{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/Chic/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/normalize.styl","path":"css/normalize.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/variable.styl","path":"css/variable.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/image/avatar.jpeg","path":"image/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/Chic/source/baidu_verify_codeva-BNp6wxaszM.html","path":"baidu_verify_codeva-BNp6wxaszM.html","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"fd6c05a8a6cb50bb5c9172f974a1f4df05cbc69a","modified":1734934531043},{"_id":"source/_posts/第一篇博客，我眼中的云原生.md","hash":"6eb81dac14ee92a10f752cf0b3775bc22470a30e","modified":1734774914820},{"_id":"source/category/index.md","hash":"495a5b1bd9c38eab2da81246e883cc3eeab947ef","modified":1734934527719},{"_id":"source/tag/index.md","hash":"6b1c99fb359dd402e711a544d0fdbaaa143862c3","modified":1734934521647},{"_id":"themes/Chic/LICENSE.md","hash":"632b916dd7e4f5c11790ab808388cda6610210ed","modified":1734925557115},{"_id":"themes/Chic/README.md","hash":"b33e7d4a20dde46667050db2fb14c783fcd1a6c7","modified":1734925557118},{"_id":"themes/Chic/_config.yml","hash":"6df8ec5a57a3ef3acb36521705f8d56fbb2644bc","modified":1735349583099},{"_id":"themes/Chic/README-CN.md","hash":"e0b616b7546d05a50bd7bf046858af8e221fd0fc","modified":1734925557117},{"_id":"themes/Chic/ChangeLogs.md","hash":"933f301ff60aa18183fadb929e6c24023c9147c2","modified":1734925557113},{"_id":"themes/Chic/package.json","hash":"55d477f0e6c76fa767b782ca0f5e0fede8d2ea28","modified":1734925557149},{"_id":"themes/Chic/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1734925557121},{"_id":"themes/Chic/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1734925557121},{"_id":"themes/Chic/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1734925557123},{"_id":"themes/Chic/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1734925557123},{"_id":"themes/Chic/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1734925557122},{"_id":"themes/Chic/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1734925557124},{"_id":"themes/Chic/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1734925557125},{"_id":"themes/Chic/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1734925557124},{"_id":"themes/Chic/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1734925557126},{"_id":"themes/Chic/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1734925557127},{"_id":"themes/Chic/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1734925557127},{"_id":"themes/Chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1734925557142},{"_id":"themes/Chic/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1734925557128},{"_id":"themes/Chic/layout/category.ejs","hash":"78c93c3a13f9678fa0f27061fa3a91a82edbcc17","modified":1734925557143},{"_id":"themes/Chic/layout/post.ejs","hash":"ce00469dfecca6db0ec9977c4a573533af9aee98","modified":1734934997119},{"_id":"themes/Chic/layout/index.ejs","hash":"b44f40dd5b866e1d6a840654aa8323054f061dac","modified":1734925557143},{"_id":"themes/Chic/layout/layout.ejs","hash":"a3f9466598ddb6df7cf8e3df5c19c09a9597340b","modified":1735350791344},{"_id":"themes/Chic/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1734925557237},{"_id":"themes/Chic/layout/tag.ejs","hash":"f6a48442749c2a743e47fde26bddabaaa2d7d95b","modified":1734925557148},{"_id":"themes/Chic/scripts/imageTag.js","hash":"21c67e132584333eaa7b0c015fdd37d2e56ea934","modified":1734925557150},{"_id":"themes/Chic/layout/page.ejs","hash":"92c2d419faea7ec7d984a3d960f5668608d36842","modified":1734925557146},{"_id":"themes/Chic/layout/_partial/footer.ejs","hash":"0f496d4767f32baca1854495ff78701cbdeb513f","modified":1735219374535},{"_id":"themes/Chic/layout/_partial/head.ejs","hash":"3e00d97ea2a1507f7b29a8b45f0be38b91b00f3e","modified":1735221982474},{"_id":"themes/Chic/layout/_page/archive.ejs","hash":"074ef6ede857a3404a454684b2a3bf6121d53bf3","modified":1734925557130},{"_id":"themes/Chic/layout/_partial/paginator.ejs","hash":"8ad8d7752378f71708ce9d25e19f06f316eacce0","modified":1734925557139},{"_id":"themes/Chic/layout/_partial/toc.ejs","hash":"e51732ce0e5787b4e4e0f6f1f4b8b6e7bc8ad50c","modified":1734925557140},{"_id":"themes/Chic/layout/_page/category.ejs","hash":"607bbfd724c47649a5b4c54d0509194ec1f6bbbd","modified":1734925557131},{"_id":"themes/Chic/layout/_partial/header.ejs","hash":"2d4be1a3899d4512892fb951e11c9cd47d38ed56","modified":1734925557138},{"_id":"themes/Chic/layout/_page/page.ejs","hash":"90559c37712ec3d7cdd58ad15d14d5662816bce1","modified":1734925557132},{"_id":"themes/Chic/layout/_page/profile.ejs","hash":"812a8a209261cde9643f38ca2fb284e91bb4310f","modified":1734925557133},{"_id":"themes/Chic/layout/_page/post.ejs","hash":"354e4a74681c10b3e6481c1a2ced03b606a0dd9f","modified":1734925557133},{"_id":"themes/Chic/layout/_page/tag.ejs","hash":"271bbaf9549a62cffbe7b5aab7afdabb4eea5ebc","modified":1734925557134},{"_id":"themes/Chic/source/css/font.styl","hash":"95f69310a9f6bc4c0b893f7c134182f2e4a871cd","modified":1734933046661},{"_id":"themes/Chic/source/css/base.styl","hash":"b6be42e4758f81662484798a66d5c36a10d812f6","modified":1734925557230},{"_id":"themes/Chic/layout/_plugins/giscus.ejs","hash":"3ca3c86fb29871816942e79ef0aa930a83b7df64","modified":1734933354037},{"_id":"themes/Chic/layout/_plugins/mathjax.ejs","hash":"56722622edf8cb6e7bb138ad1d0329e2125d9c38","modified":1734925557141},{"_id":"themes/Chic/source/css/media.styl","hash":"512311f047b94f886163f664e1236f58798e5677","modified":1734925557234},{"_id":"themes/Chic/source/css/custom.styl","hash":"71eba9ef37cca89fd8ca81b768f288fea6673906","modified":1734933995079},{"_id":"themes/Chic/source/css/normalize.styl","hash":"df9ca719f651c45a88ab4d6afa6d29edf51aeba9","modified":1734925557234},{"_id":"themes/Chic/source/css/layout.styl","hash":"d1485f52f16c19bb5022f90e0e7d7b09071202b2","modified":1734925557233},{"_id":"themes/Chic/source/css/style.styl","hash":"f87c15993e8b7c3c0bd885b51a11377fa5d2cfe3","modified":1734925557235},{"_id":"themes/Chic/source/css/variable.styl","hash":"4fbb2ffdc00cad2f5cd6ff0dd689836d6f20d227","modified":1734925557236},{"_id":"themes/Chic/source/js/script.js","hash":"85e13dd7d9f08dad3a97ff6246caf38cab1d875a","modified":1734925557350},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","hash":"fd54df22584629c604511acf67c9e992d362a5e3","modified":1734925557349},{"_id":"themes/Chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1734925557352},{"_id":"themes/Chic/source/image/avatar.jpeg","hash":"5d46dc78e55390dfab0149798249bf655dd03fca","modified":1734925557347},{"_id":"themes/Chic/source/css/_highlight/agate.styl","hash":"fc289ba8f47ead6331ec3a51533cfa93251c5634","modified":1734925557154},{"_id":"themes/Chic/source/css/_highlight/androidstudio.styl","hash":"4d67bdab6cc9c614486ca42f98199a04d053e7f0","modified":1734925557154},{"_id":"themes/Chic/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1734925557155},{"_id":"themes/Chic/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1734925557157},{"_id":"themes/Chic/source/css/_highlight/arta.styl","hash":"262167aaebcf28de7f85af7ac77a76fa1fa284f7","modified":1734925557156},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1734925557159},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-dark.styl","hash":"7e83c7f2acaaaa98864660afe2794745c36c8e51","modified":1734925557158},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1734925557163},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1734925557160},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"1cecd13e0d6b24042ff86372f0596c1441bb834a","modified":1734925557162},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-dark.styl","hash":"f186b357dcebded89b7bcc77389b2cff76533d72","modified":1734925557165},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-dark.styl","hash":"68584ed0e99c7d0e49ef8a2e67cd4dcdad359de4","modified":1734925557159},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-dark.styl","hash":"a741eba35cdfe2cfd67dfbf109655f253d6b4795","modified":1734925557164},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1734925557166},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1734925557165},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1734925557168},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"bbad7a9512b4873294e73ce806e36e43973e6ed8","modified":1734925557170},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"802979cea895a0a384645cb30a43de9572cb0e3f","modified":1734925557167},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1734925557169},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"0d51ddc580ccb0a291271fa9632bc91dab632df6","modified":1734925557168},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1734925557171},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2f008271299042f2443bca98c9bcadbc8c45e837","modified":1734925557172},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1734925557173},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"18dcb00ab9c62eb810d492047214331c51bb654f","modified":1734925557174},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1734925557174},{"_id":"themes/Chic/source/css/_highlight/brown-paper.styl","hash":"e45a5e2ae53c90334e9bc8be1e45f3c3aa3d785d","modified":1734925557175},{"_id":"themes/Chic/source/css/_highlight/codepen-embed.styl","hash":"1de45e603e2c71c7f6b0c1372a3ba00b1bc153a8","modified":1734925557177},{"_id":"themes/Chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1734925557177},{"_id":"themes/Chic/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1734925557178},{"_id":"themes/Chic/source/css/_highlight/far.styl","hash":"8da83d66724f2ce508a40f21b4f6dc0d704be562","modified":1734925557181},{"_id":"themes/Chic/source/css/_highlight/darkula.styl","hash":"8965ad6920601c275ca97e617beff5536925a266","modified":1734925557179},{"_id":"themes/Chic/source/css/_highlight/dark.styl","hash":"98d7884806838a0b46132d759d60ac27c0c4bd9c","modified":1734925557179},{"_id":"themes/Chic/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1734925557180},{"_id":"themes/Chic/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1734925557181},{"_id":"themes/Chic/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1734925557182},{"_id":"themes/Chic/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1734925557183},{"_id":"themes/Chic/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1734925557184},{"_id":"themes/Chic/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1734925557185},{"_id":"themes/Chic/source/css/_highlight/highlightjs.styl","hash":"192611c56d6fe4da343718548de21c31a75919db","modified":1734925557186},{"_id":"themes/Chic/source/css/_highlight/hybrid.styl","hash":"4906456025787de04b48a87c42bb704c5ff67065","modified":1734925557187},{"_id":"themes/Chic/source/css/_highlight/gruvbox-dark.styl","hash":"f66403ce77dcb16b1f98a5061b72f7581630d69f","modified":1734925557186},{"_id":"themes/Chic/source/css/_highlight/hopscotch.styl","hash":"dd3c78c42d4a865f11623235e5e5f6829d789706","modified":1734925557187},{"_id":"themes/Chic/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1734925557189},{"_id":"themes/Chic/source/css/_highlight/ir-black.styl","hash":"aa31b30069ebee39e2c3ebb75e2c96ba8678eb14","modified":1734925557190},{"_id":"themes/Chic/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1734925557192},{"_id":"themes/Chic/source/css/_highlight/kimbie.styl","hash":"13113af220dfed09cb49d85102babb352c3eff97","modified":1734925557193},{"_id":"themes/Chic/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1734925557188},{"_id":"themes/Chic/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1734925557194},{"_id":"themes/Chic/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1734925557193},{"_id":"themes/Chic/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1734925557190},{"_id":"themes/Chic/source/css/_highlight/monokai.styl","hash":"c3a3bfae1eb864505fbc8748db734600057af1af","modified":1734925557196},{"_id":"themes/Chic/source/css/_highlight/obsidian.styl","hash":"efba069860181d2b709e1548dd16cf102ca267fa","modified":1734925557196},{"_id":"themes/Chic/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1734925557197},{"_id":"themes/Chic/source/css/_highlight/monokai-sublime.styl","hash":"84a27bd29d939105d65f4164c219d6cc2e09ae60","modified":1734925557195},{"_id":"themes/Chic/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1734925557197},{"_id":"themes/Chic/source/css/_highlight/paraiso.styl","hash":"846a06a57fa0b3db7f83ec7ac2bf34911f32cf66","modified":1734925557198},{"_id":"themes/Chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1734925557199},{"_id":"themes/Chic/source/css/_highlight/pojoaque.styl","hash":"37436c1018394f799a1f3dfd326309da8df89742","modified":1734925557200},{"_id":"themes/Chic/source/css/_highlight/railscasts.styl","hash":"5dc9ce33cecee87fe9ca8f2ed9342602194484ec","modified":1734925557201},{"_id":"themes/Chic/source/css/_highlight/school-book.styl","hash":"6d685307f4362d3b2b0868f7b0a94b930db66e6a","modified":1734925557203},{"_id":"themes/Chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1734925557202},{"_id":"themes/Chic/source/css/_highlight/rainbow.styl","hash":"95246afef181bd96f9adb1a2e84fb3ef302d4598","modified":1734925557201},{"_id":"themes/Chic/source/css/_highlight/solarized-dark.styl","hash":"9fc9400d3a8cae97eb5761c284140acb0f847538","modified":1734925557204},{"_id":"themes/Chic/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1734925557204},{"_id":"themes/Chic/source/css/_highlight/sunburst.styl","hash":"e6e4c009b10b9805f0c593446bf013edec47d146","modified":1734925557205},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"92f4423d4964fcfe34ff7ca6cb21012b5738c697","modified":1734925557206},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"e6b025b247e4027fb3c1b7833588f5a5b04a549c","modified":1734925557207},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"8b16876cf205111d5d5454100de712bc3ea8f477","modified":1734925557208},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night.styl","hash":"eb8441364bb1664ecebde77b965dc36c91133aa0","modified":1734925557209},{"_id":"themes/Chic/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1734925557210},{"_id":"themes/Chic/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1734925557211},{"_id":"themes/Chic/source/css/_highlight/zenburn.styl","hash":"f63534764dd6598e81177d64714a184f98153b11","modified":1734925557212},{"_id":"themes/Chic/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1734925557211},{"_id":"themes/Chic/source/css/_lib/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1734925557215},{"_id":"themes/Chic/source/css/_partial/footer.styl","hash":"578a744914f05bab4eae73838076b1cdb8130929","modified":1734925557228},{"_id":"themes/Chic/source/css/_lib/looper.css","hash":"f4ee39f122059c1e7793b8dc1d72fcbc5fa5ea15","modified":1734925557214},{"_id":"themes/Chic/source/css/_partial/header.styl","hash":"9e4d9b67cc2dbbb92b190be3f9ebcd77e093f057","modified":1734925557229},{"_id":"themes/Chic/source/css/_partial/paginator.styl","hash":"fbe7e3ce8234e5e1a18764113f997b98d777ee5f","modified":1734925557229},{"_id":"themes/Chic/source/css/_page/archive.styl","hash":"edc8ee7f34629c59fd4d31f2889d5c069e9d63ac","modified":1734925557223},{"_id":"themes/Chic/source/css/_page/page.styl","hash":"b2cf99b15965f6851129d52d23f26ed91dc2ede7","modified":1734925557225},{"_id":"themes/Chic/source/css/_page/category.styl","hash":"9b0c89a525b2b4f0163f6ff1bf1d208277c8bb1f","modified":1734925557224},{"_id":"themes/Chic/source/css/_page/profile.styl","hash":"ced34f67543094c5517a6f375d6526ff1d978183","modified":1734925557226},{"_id":"themes/Chic/source/css/_page/tag.styl","hash":"715f3fb46c9ccd7c1b701bcf5aac87051ecb3d17","modified":1734925557226},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","hash":"53456972a11d52af67187fc17999e6665f9f06fe","modified":1734925557241},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","hash":"55c47c8924542a89da4741fcce7eca7e5f881e77","modified":1734925557243},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","hash":"8f1d735e4fae3757dac1866dc3e30147140811e2","modified":1734925557249},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","hash":"cb99651b9be2f87afcd5989480dd7360b4bf4643","modified":1734925557248},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1734925557250},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","hash":"496a69ed5e5232feecfd8e1390877b77003e405c","modified":1734925557244},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1734925557251},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1734925557245},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1734925557253},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1734925557247},{"_id":"themes/Chic/source/css/_page/_post/post_content.styl","hash":"8fa506bf4dd38c7cb6d5f48445ab170de4cd6868","modified":1734925557218},{"_id":"themes/Chic/source/css/_page/_post/post_code.styl","hash":"7b57bafe7e8e375372055f4a775bb42a3c190c95","modified":1734925557218},{"_id":"themes/Chic/source/css/_page/_post/post_copyright.styl","hash":"e1851fabb110414a624a1be634129dc6b0ce8d03","modified":1734925557219},{"_id":"themes/Chic/source/css/_page/_post/post_header.styl","hash":"6ea0ede34416dfaddda04a903f658325572f91a4","modified":1734925557220},{"_id":"themes/Chic/source/css/_page/_post/post_toc.styl","hash":"6c64f313146416a17b087d0a2fc90362cd977776","modified":1734925557223},{"_id":"themes/Chic/source/css/_page/_post/post_nav.styl","hash":"9c73772ad0d2b1e67007aa2816ee9b97d5152ffa","modified":1734925557221},{"_id":"themes/Chic/source/css/_page/_post/post_tags.styl","hash":"bd16f8c0e5ee2e302b61b861470ab993b6af709b","modified":1734925557222},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1734925557345},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1734925557340},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1734925557303},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1734925557281},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1734925557334},{"_id":"public/about/index.html","hash":"1d647675e492eefcaab284f19221130c8e6ca5ea","modified":1735350801860},{"_id":"public/category/index.html","hash":"44023acd83862e343fb8608ef86e82e675d5a970","modified":1735350801860},{"_id":"public/tag/index.html","hash":"1ac235aae378b3ff7b314517d50b87e10b81e493","modified":1735350801860},{"_id":"public/2024/06/10/第一篇博客，我眼中的云原生/index.html","hash":"3a79fec06b88f2eca1b352211f90d7b686e110a6","modified":1735350801860},{"_id":"public/archives/index.html","hash":"707e89a8ff74c7bd1cb600c6e2aca961f840b8b6","modified":1735350801860},{"_id":"public/archives/2024/index.html","hash":"00ce21c665933356cbafc2a91e3905c0790c7583","modified":1735350801860},{"_id":"public/archives/2024/06/index.html","hash":"40a2ec44137e4f2af7af3d72a839b86abdd7c361","modified":1735350801860},{"_id":"public/tags/云原生/index.html","hash":"334457ac345dfc0fcd455a3b19c8a2cad4904265","modified":1735350801860},{"_id":"public/categories/云原生/index.html","hash":"8f688f13983d06c091dab2634abb366727fb423e","modified":1735350801860},{"_id":"public/index.html","hash":"84fdf41cc9ca154f67baa9cee673721a0b27400f","modified":1735350801860},{"_id":"public/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1734936367275},{"_id":"public/image/avatar.jpeg","hash":"5d46dc78e55390dfab0149798249bf655dd03fca","modified":1734936367275},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1734936367275},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1734936367275},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"8f1d735e4fae3757dac1866dc3e30147140811e2","modified":1734936367275},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1734936367275},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1734936367275},{"_id":"public/css/base.css","hash":"2fce73a3c2df8f93edeb5e34a53b7d83e5191d85","modified":1734936367275},{"_id":"public/css/custom.css","hash":"d5486dc67559aed2c756aa6b034347fddf4f56eb","modified":1734936367275},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1734936367275},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1734936367275},{"_id":"public/css/layout.css","hash":"9b81d7e5146871ae2d1010f3a10089bbb43e81e3","modified":1734936367275},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1734936367275},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1734936367275},{"_id":"public/css/style.css","hash":"8ae635d7655079afccffb83bb89e16a42ebc0b00","modified":1734936367275},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1734936367275},{"_id":"public/js/script.js","hash":"5dd8ce4fa55a7201d7e2ffe417b48c95943a906b","modified":1734936367275},{"_id":"public/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1734936367275},{"_id":"public/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1734936367275},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1734936367275},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1734936367275},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1734936367275},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1734936367275},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1734936367275},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1734936367275},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1734936367275},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1734936367275},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1734936367275},{"_id":"source/_posts/Python工程化不完全指南.md","hash":"6556ec56277a04854053ba9b5eeefe877a463dfa","modified":1735223515380},{"_id":"public/2024/07/06/Python工程化不完全指南/index.html","hash":"d21fb0f14929b4c622b2ea4688e37d596689de00","modified":1735350801860},{"_id":"public/categories/日常开发/index.html","hash":"fd1f7e8020e9b60ff54e89ac54ab86226089e5ba","modified":1735350801860},{"_id":"public/archives/2024/07/index.html","hash":"c863117cbbb2ed9ded711a90845b44c875502682","modified":1735350801860},{"_id":"public/tags/Python/index.html","hash":"3dd6741991ed8e34256b86858559138438963e81","modified":1735222377903},{"_id":"source/CNAME","hash":"792cb140eb26ab12829b4a49eee4ce7875704121","modified":1735019619211},{"_id":"themes/Chic/layout/_plugins/site-visitor.ejs","hash":"26cdf4e61146024025782fd16def9e643f67ce34","modified":1735219347292},{"_id":"public/CNAME","hash":"792cb140eb26ab12829b4a49eee4ce7875704121","modified":1735219538510},{"_id":"themes/Chic/source/baidu_verify_codeva-BNp6wxaszM.html","hash":"8e0c9b3b5479c2be0aba88d2d916281511553613","modified":1735223269039},{"_id":"public/baidu_verify_codeva-BNp6wxaszM.html","hash":"dc41c40b243d3e155564489004f8a5ec582c894a","modified":1735223017652},{"_id":"public/tags/Python-日常开发/index.html","hash":"f13087722bd75ec8d527c2017d47b4b66ab159a0","modified":1735350801860}],"Category":[{"name":"云原生","_id":"cm50ntui700043gwb7ob77f2d"},{"name":"日常开发","_id":"cm521pph100010kwbf4ln3vnm"}],"Data":[],"Page":[{"title":"关于我","date":"2024-06-01T11:33:57.000Z","article":{"licenses":null},"giscus":{"enable":false},"_content":"\n云原生开发工程师，爱琢磨，在转型大模型应用开发工程师的路上~\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2024-06-01 19:33:57\narticle:\n  licenses: null\ngiscus:\n  enable: false\n---\n\n云原生开发工程师，爱琢磨，在转型大模型应用开发工程师的路上~\n","updated":"2024-12-23T06:15:31.043Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm50ntuhp00003gwbesj208sd","content":"<p>云原生开发工程师，爱琢磨，在转型大模型应用开发工程师的路上~</p>\n","excerpt":"","more":"<p>云原生开发工程师，爱琢磨，在转型大模型应用开发工程师的路上~</p>\n"},{"title":"Category","layout":"category","date":"2024-12-23T03:48:28.000Z","giscus":{"enable":false},"_content":"","source":"category/index.md","raw":"---\ntitle: Category\nlayout: category\ndate: 2024-12-23 11:48:28\ngiscus:\n  enable: false\n---\n","updated":"2024-12-23T06:15:27.719Z","path":"category/index.html","comments":1,"_id":"cm50ntuhr00013gwbbvwo1wmn","content":"","excerpt":"","more":""},{"title":"Tag","layout":"tag","date":"2024-12-23T03:48:17.000Z","giscus":{"enable":false},"_content":"","source":"tag/index.md","raw":"---\ntitle: Tag\nlayout: tag\ndate: 2024-12-23 11:48:17\ngiscus:\n  enable: false\n---\n","updated":"2024-12-23T06:15:21.647Z","path":"tag/index.html","comments":1,"_id":"cm50ntuhr00023gwb06cm35hh","content":"","excerpt":"","more":""}],"Post":[{"title":"第一篇博客，我眼中的云原生","date":"2024-06-10T12:21:39.000Z","cover":"https://image.robocanic.com/notes/k8s.svg","thumbnail":"https://image.robocanic.com/notes/k8s.svg","toc":true,"_content":"\n很多小伙伴刚一开始看到“云原生“三个字时都会有点懵，当然彼时的我也不例外。在这篇文章中，我将从”云原生是个啥“，”云原生和我有啥关系“，“云原生的未来”这三个方面来展现我眼中的云原生，希望对你有所帮助。\n\n# 云原生是个啥\n\n在说云原生之前，不得不先来谈谈云计算和微服务。云计算是一种托管在远程数据中心的服务，在今天已经相当普遍了。云计算由亚马逊在 2006 年首先推出，主打的卖点就是云的高弹性，高容错，免（少）运维，比自建机房更便宜等优点。随后各大云厂商如 Google，微软，阿里巴巴等迅速跟进，建立了 Iaas，Paas，Saas 等对云基础设施不同抽象层次的服务体系，在 08 到 16 年掀起了一波上云的浪潮。\n\n![xaas](https://image.robocanic.com/notes/image-vbfj.png)\n\n在这波浪潮推动的同时，微服务由于其易于扩展，开发敏捷，人效利用高等优点也大行其道。但是在浪潮过后，已经上云的企业又发现一些棘手的问题：\n\n1. 云服务绑定云厂商，无法比较平滑迁移到另一个云厂商\n\n2. 云服务器的利用率普遍偏低，在某些情况下的成本算下来比自建机房还要高\n\n3. 云服务确实具备弹性和容错性，但随着微服务的盛行，基于机器粒度的弹性和容错性满足不了大部分用户的需求\n\n......\n\n众多企业在用云过程都或多或少碰到了这些问题。而云原生就是这样一套技术体系以及理念，能够使得上述提到的问题迎刃而解。那到底云原生是怎么解决的呢？\n\n云原生的很多技术都考虑到了应用（服务）这个粒度，这与传统云计算的 Iaas 这个层次对机器的粒度的抽象相比都要更小一些。以云原生的集大成者 Kubernetes（k8s）为例，简单讲讲它是怎么解决迁移难，利用率低，弹性和容错性难用这么几个关键点的。\n\n首先 k8s 定义了 Node（就是一台服务器）与 Pod（就是一个服务的副本）这两种资源，Pod 可以申请 CPU，内存等计算资源，k8s 会根据申请的 CPU 和内存将 Pod 按照一定策略调度到某一个 Node。我们可以调整这其中的策略来使得 Node 可以承载更多的 Pod，以提高服务器整体的使用率。一般为了高可用我们的服务都是以多副本（Pod）部署的，对外提供相同的服务。同一个服务的 Pod 可以打散部署到不同的 Node 上，这样就算一个 Node 出现故障挂掉，那也只是这个 Node 上的 Pod 无法提供服务，其他 Node 上的 Pod 仍然可以对外提供服务，与此同时 k8s 还会在其他 Node 上拉起因为 Node 故障而挂掉的 Pod。这样高可用就能得到很好的保障。\n\n当然，最重要的莫过于：kubernetes 是开源的，与厂商无关。只要我们的服务运行在 k8s 上，理论上就能够在不同的云厂商之间进行迁移。 可以这么说，在过去十年，云原生就是趁着微服务的东风，才一跃成为炙手可热的技术之一。因此，云原生和微服务是密不可分的。\n\n再来回答到上一小节末的问题，云原生是怎么解决的呢->粒度的减小，减小到什么程度呢->与微服务体系中的服务相匹配。\n\n# 云原生和我有啥关系\n\n可能写到这你还是对云原生有一些疑惑，最大的疑惑可能莫过于：对于“我”而言，云原生和我有啥关系？为了回答这个问题，我们可以让这个“我”来扮演多个角色。\n\n如果“我”是企业老板/技术负责人，那我首先应该想到的是云原生能够提供“看得到”的价值。那首当其冲的就是使用云原生技术能够有效提高机器负载，降低机器成本，这一天然的优势特别符合近两年来的“降本增效”的浪潮。其次基于服务粒度的弹性和容错性也进一步增强了服务的健壮性，减少了事故的发生。从人效上看，基于云原生的 CI/CD 流提升了敏捷开发的效率，加快了业务迭代的速度，从而提供了人效。因此云原生作为基础设施，能产生很多看得到的价值，这与以往基础设施很难体现出价值形成了鲜明的对比。\n\n如果“我”是普通的开发者，那我首先想到的是其技术价值。在常见的开发调试->部署上线->线上调整这个应用生命周期中，云原生主要涉及到“部署上线“和“线上调整”这两个步骤。在规模稍大的公司中，通常会分为业务开发和平台开发，业务开发专注于业务开发与迭代以满足客户需求，而平台开发则专注于内部研发平台的开发迭代以满足业务开发的需求。因此部署上线和线上调整一般都会都会划归到平台研发中。那是不是业务开发就和云原生没关系了？从某些意义上是的，但从技术发展的角度看，云原生作为基础设施层的技术，融合了很多设计艺术，涉及到很多高可用，高并发的场景设计。因此当你学习云原生的一些技术时，你会自然而然地将一些优雅的设计熟稔于心。此外，熟悉云原生的大致框架有助于对整个应用的生命周期有完整的理解，反过来也有助于你在开发应用时能够更好地利用底层的基础资源。\n\n# 云原生的未来\n\n上文中说道，云原生乘着微服务的东风，度过了“黄金十年“。那在下一个十年，云原生又该何去何从？\n要回答这个问题，我们可以先来看看云原生的优势。关于云原生的优势，上文也提到了不少，在这里我可以总结成一句话：云原生技术能够使应用更好地利用云资源，更好地对外提供服务。对这句话再解读一下，我们的应用是需要消耗云资源并向外提供服务的，而云原生技术抽象了计算资源，能够让应用按需地使用云资源，从而使得应用对外提供服务这一过程便捷了不少。需要注意的是，以上的总结以及解读中的“应用“特指消耗 CPU，内存，存储的“传统应用“。那与传统应用相对应的是什么呢？答案就是 AI。从去年大火的 ChatGPT 到今年的百模大战，AI 发展的速度超过了绝大多数人的想象。与传统应用相比，AI 应用的生命周期更长，且模型的训练，微调，推理都离不开当今时代的“黄金“——GPU，而云原生领域的技术对 AI 的支持还远没有传统应用的完善。诸如 mlops，GPU 的调度分配，分布式训练等随着 AI 发展而涌现的 topic 会越来越多，相信云原生+人工智能的脚步也会越来越快。\n\n至此，云原生的未来也很确定了，CNAI（Cloud Native Artificial Intelligence）将会成为云原生下一个十年的主航道。\n\n![CNAI](https://image.robocanic.com/notes/image.png)\n\n写在最后：\n\n想了很久第一篇博客要写些什么，前前后后想了一周，最后还是敲定了一个比较大的 title，希望对你有所帮助。文章内容如有错误，请老师们评论区勘误 😁😁。后续将会持续更新云原生，LLM 等领域的内容。\n","source":"_posts/第一篇博客，我眼中的云原生.md","raw":"---\ntitle: 第一篇博客，我眼中的云原生\ndate: 2024-06-10 20:21:39\ntags: 云原生\ncategories: 云原生\ncover: https://image.robocanic.com/notes/k8s.svg\nthumbnail: https://image.robocanic.com/notes/k8s.svg\ntoc: true\n---\n\n很多小伙伴刚一开始看到“云原生“三个字时都会有点懵，当然彼时的我也不例外。在这篇文章中，我将从”云原生是个啥“，”云原生和我有啥关系“，“云原生的未来”这三个方面来展现我眼中的云原生，希望对你有所帮助。\n\n# 云原生是个啥\n\n在说云原生之前，不得不先来谈谈云计算和微服务。云计算是一种托管在远程数据中心的服务，在今天已经相当普遍了。云计算由亚马逊在 2006 年首先推出，主打的卖点就是云的高弹性，高容错，免（少）运维，比自建机房更便宜等优点。随后各大云厂商如 Google，微软，阿里巴巴等迅速跟进，建立了 Iaas，Paas，Saas 等对云基础设施不同抽象层次的服务体系，在 08 到 16 年掀起了一波上云的浪潮。\n\n![xaas](https://image.robocanic.com/notes/image-vbfj.png)\n\n在这波浪潮推动的同时，微服务由于其易于扩展，开发敏捷，人效利用高等优点也大行其道。但是在浪潮过后，已经上云的企业又发现一些棘手的问题：\n\n1. 云服务绑定云厂商，无法比较平滑迁移到另一个云厂商\n\n2. 云服务器的利用率普遍偏低，在某些情况下的成本算下来比自建机房还要高\n\n3. 云服务确实具备弹性和容错性，但随着微服务的盛行，基于机器粒度的弹性和容错性满足不了大部分用户的需求\n\n......\n\n众多企业在用云过程都或多或少碰到了这些问题。而云原生就是这样一套技术体系以及理念，能够使得上述提到的问题迎刃而解。那到底云原生是怎么解决的呢？\n\n云原生的很多技术都考虑到了应用（服务）这个粒度，这与传统云计算的 Iaas 这个层次对机器的粒度的抽象相比都要更小一些。以云原生的集大成者 Kubernetes（k8s）为例，简单讲讲它是怎么解决迁移难，利用率低，弹性和容错性难用这么几个关键点的。\n\n首先 k8s 定义了 Node（就是一台服务器）与 Pod（就是一个服务的副本）这两种资源，Pod 可以申请 CPU，内存等计算资源，k8s 会根据申请的 CPU 和内存将 Pod 按照一定策略调度到某一个 Node。我们可以调整这其中的策略来使得 Node 可以承载更多的 Pod，以提高服务器整体的使用率。一般为了高可用我们的服务都是以多副本（Pod）部署的，对外提供相同的服务。同一个服务的 Pod 可以打散部署到不同的 Node 上，这样就算一个 Node 出现故障挂掉，那也只是这个 Node 上的 Pod 无法提供服务，其他 Node 上的 Pod 仍然可以对外提供服务，与此同时 k8s 还会在其他 Node 上拉起因为 Node 故障而挂掉的 Pod。这样高可用就能得到很好的保障。\n\n当然，最重要的莫过于：kubernetes 是开源的，与厂商无关。只要我们的服务运行在 k8s 上，理论上就能够在不同的云厂商之间进行迁移。 可以这么说，在过去十年，云原生就是趁着微服务的东风，才一跃成为炙手可热的技术之一。因此，云原生和微服务是密不可分的。\n\n再来回答到上一小节末的问题，云原生是怎么解决的呢->粒度的减小，减小到什么程度呢->与微服务体系中的服务相匹配。\n\n# 云原生和我有啥关系\n\n可能写到这你还是对云原生有一些疑惑，最大的疑惑可能莫过于：对于“我”而言，云原生和我有啥关系？为了回答这个问题，我们可以让这个“我”来扮演多个角色。\n\n如果“我”是企业老板/技术负责人，那我首先应该想到的是云原生能够提供“看得到”的价值。那首当其冲的就是使用云原生技术能够有效提高机器负载，降低机器成本，这一天然的优势特别符合近两年来的“降本增效”的浪潮。其次基于服务粒度的弹性和容错性也进一步增强了服务的健壮性，减少了事故的发生。从人效上看，基于云原生的 CI/CD 流提升了敏捷开发的效率，加快了业务迭代的速度，从而提供了人效。因此云原生作为基础设施，能产生很多看得到的价值，这与以往基础设施很难体现出价值形成了鲜明的对比。\n\n如果“我”是普通的开发者，那我首先想到的是其技术价值。在常见的开发调试->部署上线->线上调整这个应用生命周期中，云原生主要涉及到“部署上线“和“线上调整”这两个步骤。在规模稍大的公司中，通常会分为业务开发和平台开发，业务开发专注于业务开发与迭代以满足客户需求，而平台开发则专注于内部研发平台的开发迭代以满足业务开发的需求。因此部署上线和线上调整一般都会都会划归到平台研发中。那是不是业务开发就和云原生没关系了？从某些意义上是的，但从技术发展的角度看，云原生作为基础设施层的技术，融合了很多设计艺术，涉及到很多高可用，高并发的场景设计。因此当你学习云原生的一些技术时，你会自然而然地将一些优雅的设计熟稔于心。此外，熟悉云原生的大致框架有助于对整个应用的生命周期有完整的理解，反过来也有助于你在开发应用时能够更好地利用底层的基础资源。\n\n# 云原生的未来\n\n上文中说道，云原生乘着微服务的东风，度过了“黄金十年“。那在下一个十年，云原生又该何去何从？\n要回答这个问题，我们可以先来看看云原生的优势。关于云原生的优势，上文也提到了不少，在这里我可以总结成一句话：云原生技术能够使应用更好地利用云资源，更好地对外提供服务。对这句话再解读一下，我们的应用是需要消耗云资源并向外提供服务的，而云原生技术抽象了计算资源，能够让应用按需地使用云资源，从而使得应用对外提供服务这一过程便捷了不少。需要注意的是，以上的总结以及解读中的“应用“特指消耗 CPU，内存，存储的“传统应用“。那与传统应用相对应的是什么呢？答案就是 AI。从去年大火的 ChatGPT 到今年的百模大战，AI 发展的速度超过了绝大多数人的想象。与传统应用相比，AI 应用的生命周期更长，且模型的训练，微调，推理都离不开当今时代的“黄金“——GPU，而云原生领域的技术对 AI 的支持还远没有传统应用的完善。诸如 mlops，GPU 的调度分配，分布式训练等随着 AI 发展而涌现的 topic 会越来越多，相信云原生+人工智能的脚步也会越来越快。\n\n至此，云原生的未来也很确定了，CNAI（Cloud Native Artificial Intelligence）将会成为云原生下一个十年的主航道。\n\n![CNAI](https://image.robocanic.com/notes/image.png)\n\n写在最后：\n\n想了很久第一篇博客要写些什么，前前后后想了一周，最后还是敲定了一个比较大的 title，希望对你有所帮助。文章内容如有错误，请老师们评论区勘误 😁😁。后续将会持续更新云原生，LLM 等领域的内容。\n","slug":"第一篇博客，我眼中的云原生","published":1,"updated":"2024-12-21T09:55:14.820Z","comments":1,"layout":"post","photos":[],"_id":"cm50ntui200033gwbfmg56z1g","content":"<p>很多小伙伴刚一开始看到“云原生“三个字时都会有点懵，当然彼时的我也不例外。在这篇文章中，我将从”云原生是个啥“，”云原生和我有啥关系“，“云原生的未来”这三个方面来展现我眼中的云原生，希望对你有所帮助。</p>\n<h1 id=\"云原生是个啥\"><a href=\"#云原生是个啥\" class=\"headerlink\" title=\"云原生是个啥\"></a>云原生是个啥</h1><p>在说云原生之前，不得不先来谈谈云计算和微服务。云计算是一种托管在远程数据中心的服务，在今天已经相当普遍了。云计算由亚马逊在 2006 年首先推出，主打的卖点就是云的高弹性，高容错，免（少）运维，比自建机房更便宜等优点。随后各大云厂商如 Google，微软，阿里巴巴等迅速跟进，建立了 Iaas，Paas，Saas 等对云基础设施不同抽象层次的服务体系，在 08 到 16 年掀起了一波上云的浪潮。</p>\n<p><img src=\"https://image.robocanic.com/notes/image-vbfj.png\" alt=\"xaas\"></p>\n<p>在这波浪潮推动的同时，微服务由于其易于扩展，开发敏捷，人效利用高等优点也大行其道。但是在浪潮过后，已经上云的企业又发现一些棘手的问题：</p>\n<ol>\n<li><p>云服务绑定云厂商，无法比较平滑迁移到另一个云厂商</p>\n</li>\n<li><p>云服务器的利用率普遍偏低，在某些情况下的成本算下来比自建机房还要高</p>\n</li>\n<li><p>云服务确实具备弹性和容错性，但随着微服务的盛行，基于机器粒度的弹性和容错性满足不了大部分用户的需求</p>\n</li>\n</ol>\n<p>……</p>\n<p>众多企业在用云过程都或多或少碰到了这些问题。而云原生就是这样一套技术体系以及理念，能够使得上述提到的问题迎刃而解。那到底云原生是怎么解决的呢？</p>\n<p>云原生的很多技术都考虑到了应用（服务）这个粒度，这与传统云计算的 Iaas 这个层次对机器的粒度的抽象相比都要更小一些。以云原生的集大成者 Kubernetes（k8s）为例，简单讲讲它是怎么解决迁移难，利用率低，弹性和容错性难用这么几个关键点的。</p>\n<p>首先 k8s 定义了 Node（就是一台服务器）与 Pod（就是一个服务的副本）这两种资源，Pod 可以申请 CPU，内存等计算资源，k8s 会根据申请的 CPU 和内存将 Pod 按照一定策略调度到某一个 Node。我们可以调整这其中的策略来使得 Node 可以承载更多的 Pod，以提高服务器整体的使用率。一般为了高可用我们的服务都是以多副本（Pod）部署的，对外提供相同的服务。同一个服务的 Pod 可以打散部署到不同的 Node 上，这样就算一个 Node 出现故障挂掉，那也只是这个 Node 上的 Pod 无法提供服务，其他 Node 上的 Pod 仍然可以对外提供服务，与此同时 k8s 还会在其他 Node 上拉起因为 Node 故障而挂掉的 Pod。这样高可用就能得到很好的保障。</p>\n<p>当然，最重要的莫过于：kubernetes 是开源的，与厂商无关。只要我们的服务运行在 k8s 上，理论上就能够在不同的云厂商之间进行迁移。 可以这么说，在过去十年，云原生就是趁着微服务的东风，才一跃成为炙手可热的技术之一。因此，云原生和微服务是密不可分的。</p>\n<p>再来回答到上一小节末的问题，云原生是怎么解决的呢-&gt;粒度的减小，减小到什么程度呢-&gt;与微服务体系中的服务相匹配。</p>\n<h1 id=\"云原生和我有啥关系\"><a href=\"#云原生和我有啥关系\" class=\"headerlink\" title=\"云原生和我有啥关系\"></a>云原生和我有啥关系</h1><p>可能写到这你还是对云原生有一些疑惑，最大的疑惑可能莫过于：对于“我”而言，云原生和我有啥关系？为了回答这个问题，我们可以让这个“我”来扮演多个角色。</p>\n<p>如果“我”是企业老板&#x2F;技术负责人，那我首先应该想到的是云原生能够提供“看得到”的价值。那首当其冲的就是使用云原生技术能够有效提高机器负载，降低机器成本，这一天然的优势特别符合近两年来的“降本增效”的浪潮。其次基于服务粒度的弹性和容错性也进一步增强了服务的健壮性，减少了事故的发生。从人效上看，基于云原生的 CI&#x2F;CD 流提升了敏捷开发的效率，加快了业务迭代的速度，从而提供了人效。因此云原生作为基础设施，能产生很多看得到的价值，这与以往基础设施很难体现出价值形成了鲜明的对比。</p>\n<p>如果“我”是普通的开发者，那我首先想到的是其技术价值。在常见的开发调试-&gt;部署上线-&gt;线上调整这个应用生命周期中，云原生主要涉及到“部署上线“和“线上调整”这两个步骤。在规模稍大的公司中，通常会分为业务开发和平台开发，业务开发专注于业务开发与迭代以满足客户需求，而平台开发则专注于内部研发平台的开发迭代以满足业务开发的需求。因此部署上线和线上调整一般都会都会划归到平台研发中。那是不是业务开发就和云原生没关系了？从某些意义上是的，但从技术发展的角度看，云原生作为基础设施层的技术，融合了很多设计艺术，涉及到很多高可用，高并发的场景设计。因此当你学习云原生的一些技术时，你会自然而然地将一些优雅的设计熟稔于心。此外，熟悉云原生的大致框架有助于对整个应用的生命周期有完整的理解，反过来也有助于你在开发应用时能够更好地利用底层的基础资源。</p>\n<h1 id=\"云原生的未来\"><a href=\"#云原生的未来\" class=\"headerlink\" title=\"云原生的未来\"></a>云原生的未来</h1><p>上文中说道，云原生乘着微服务的东风，度过了“黄金十年“。那在下一个十年，云原生又该何去何从？<br>要回答这个问题，我们可以先来看看云原生的优势。关于云原生的优势，上文也提到了不少，在这里我可以总结成一句话：云原生技术能够使应用更好地利用云资源，更好地对外提供服务。对这句话再解读一下，我们的应用是需要消耗云资源并向外提供服务的，而云原生技术抽象了计算资源，能够让应用按需地使用云资源，从而使得应用对外提供服务这一过程便捷了不少。需要注意的是，以上的总结以及解读中的“应用“特指消耗 CPU，内存，存储的“传统应用“。那与传统应用相对应的是什么呢？答案就是 AI。从去年大火的 ChatGPT 到今年的百模大战，AI 发展的速度超过了绝大多数人的想象。与传统应用相比，AI 应用的生命周期更长，且模型的训练，微调，推理都离不开当今时代的“黄金“——GPU，而云原生领域的技术对 AI 的支持还远没有传统应用的完善。诸如 mlops，GPU 的调度分配，分布式训练等随着 AI 发展而涌现的 topic 会越来越多，相信云原生+人工智能的脚步也会越来越快。</p>\n<p>至此，云原生的未来也很确定了，CNAI（Cloud Native Artificial Intelligence）将会成为云原生下一个十年的主航道。</p>\n<p><img src=\"https://image.robocanic.com/notes/image.png\" alt=\"CNAI\"></p>\n<p>写在最后：</p>\n<p>想了很久第一篇博客要写些什么，前前后后想了一周，最后还是敲定了一个比较大的 title，希望对你有所帮助。文章内容如有错误，请老师们评论区勘误 😁😁。后续将会持续更新云原生，LLM 等领域的内容。</p>\n","excerpt":"","more":"<p>很多小伙伴刚一开始看到“云原生“三个字时都会有点懵，当然彼时的我也不例外。在这篇文章中，我将从”云原生是个啥“，”云原生和我有啥关系“，“云原生的未来”这三个方面来展现我眼中的云原生，希望对你有所帮助。</p>\n<h1 id=\"云原生是个啥\"><a href=\"#云原生是个啥\" class=\"headerlink\" title=\"云原生是个啥\"></a>云原生是个啥</h1><p>在说云原生之前，不得不先来谈谈云计算和微服务。云计算是一种托管在远程数据中心的服务，在今天已经相当普遍了。云计算由亚马逊在 2006 年首先推出，主打的卖点就是云的高弹性，高容错，免（少）运维，比自建机房更便宜等优点。随后各大云厂商如 Google，微软，阿里巴巴等迅速跟进，建立了 Iaas，Paas，Saas 等对云基础设施不同抽象层次的服务体系，在 08 到 16 年掀起了一波上云的浪潮。</p>\n<p><img src=\"https://image.robocanic.com/notes/image-vbfj.png\" alt=\"xaas\"></p>\n<p>在这波浪潮推动的同时，微服务由于其易于扩展，开发敏捷，人效利用高等优点也大行其道。但是在浪潮过后，已经上云的企业又发现一些棘手的问题：</p>\n<ol>\n<li><p>云服务绑定云厂商，无法比较平滑迁移到另一个云厂商</p>\n</li>\n<li><p>云服务器的利用率普遍偏低，在某些情况下的成本算下来比自建机房还要高</p>\n</li>\n<li><p>云服务确实具备弹性和容错性，但随着微服务的盛行，基于机器粒度的弹性和容错性满足不了大部分用户的需求</p>\n</li>\n</ol>\n<p>……</p>\n<p>众多企业在用云过程都或多或少碰到了这些问题。而云原生就是这样一套技术体系以及理念，能够使得上述提到的问题迎刃而解。那到底云原生是怎么解决的呢？</p>\n<p>云原生的很多技术都考虑到了应用（服务）这个粒度，这与传统云计算的 Iaas 这个层次对机器的粒度的抽象相比都要更小一些。以云原生的集大成者 Kubernetes（k8s）为例，简单讲讲它是怎么解决迁移难，利用率低，弹性和容错性难用这么几个关键点的。</p>\n<p>首先 k8s 定义了 Node（就是一台服务器）与 Pod（就是一个服务的副本）这两种资源，Pod 可以申请 CPU，内存等计算资源，k8s 会根据申请的 CPU 和内存将 Pod 按照一定策略调度到某一个 Node。我们可以调整这其中的策略来使得 Node 可以承载更多的 Pod，以提高服务器整体的使用率。一般为了高可用我们的服务都是以多副本（Pod）部署的，对外提供相同的服务。同一个服务的 Pod 可以打散部署到不同的 Node 上，这样就算一个 Node 出现故障挂掉，那也只是这个 Node 上的 Pod 无法提供服务，其他 Node 上的 Pod 仍然可以对外提供服务，与此同时 k8s 还会在其他 Node 上拉起因为 Node 故障而挂掉的 Pod。这样高可用就能得到很好的保障。</p>\n<p>当然，最重要的莫过于：kubernetes 是开源的，与厂商无关。只要我们的服务运行在 k8s 上，理论上就能够在不同的云厂商之间进行迁移。 可以这么说，在过去十年，云原生就是趁着微服务的东风，才一跃成为炙手可热的技术之一。因此，云原生和微服务是密不可分的。</p>\n<p>再来回答到上一小节末的问题，云原生是怎么解决的呢-&gt;粒度的减小，减小到什么程度呢-&gt;与微服务体系中的服务相匹配。</p>\n<h1 id=\"云原生和我有啥关系\"><a href=\"#云原生和我有啥关系\" class=\"headerlink\" title=\"云原生和我有啥关系\"></a>云原生和我有啥关系</h1><p>可能写到这你还是对云原生有一些疑惑，最大的疑惑可能莫过于：对于“我”而言，云原生和我有啥关系？为了回答这个问题，我们可以让这个“我”来扮演多个角色。</p>\n<p>如果“我”是企业老板&#x2F;技术负责人，那我首先应该想到的是云原生能够提供“看得到”的价值。那首当其冲的就是使用云原生技术能够有效提高机器负载，降低机器成本，这一天然的优势特别符合近两年来的“降本增效”的浪潮。其次基于服务粒度的弹性和容错性也进一步增强了服务的健壮性，减少了事故的发生。从人效上看，基于云原生的 CI&#x2F;CD 流提升了敏捷开发的效率，加快了业务迭代的速度，从而提供了人效。因此云原生作为基础设施，能产生很多看得到的价值，这与以往基础设施很难体现出价值形成了鲜明的对比。</p>\n<p>如果“我”是普通的开发者，那我首先想到的是其技术价值。在常见的开发调试-&gt;部署上线-&gt;线上调整这个应用生命周期中，云原生主要涉及到“部署上线“和“线上调整”这两个步骤。在规模稍大的公司中，通常会分为业务开发和平台开发，业务开发专注于业务开发与迭代以满足客户需求，而平台开发则专注于内部研发平台的开发迭代以满足业务开发的需求。因此部署上线和线上调整一般都会都会划归到平台研发中。那是不是业务开发就和云原生没关系了？从某些意义上是的，但从技术发展的角度看，云原生作为基础设施层的技术，融合了很多设计艺术，涉及到很多高可用，高并发的场景设计。因此当你学习云原生的一些技术时，你会自然而然地将一些优雅的设计熟稔于心。此外，熟悉云原生的大致框架有助于对整个应用的生命周期有完整的理解，反过来也有助于你在开发应用时能够更好地利用底层的基础资源。</p>\n<h1 id=\"云原生的未来\"><a href=\"#云原生的未来\" class=\"headerlink\" title=\"云原生的未来\"></a>云原生的未来</h1><p>上文中说道，云原生乘着微服务的东风，度过了“黄金十年“。那在下一个十年，云原生又该何去何从？<br>要回答这个问题，我们可以先来看看云原生的优势。关于云原生的优势，上文也提到了不少，在这里我可以总结成一句话：云原生技术能够使应用更好地利用云资源，更好地对外提供服务。对这句话再解读一下，我们的应用是需要消耗云资源并向外提供服务的，而云原生技术抽象了计算资源，能够让应用按需地使用云资源，从而使得应用对外提供服务这一过程便捷了不少。需要注意的是，以上的总结以及解读中的“应用“特指消耗 CPU，内存，存储的“传统应用“。那与传统应用相对应的是什么呢？答案就是 AI。从去年大火的 ChatGPT 到今年的百模大战，AI 发展的速度超过了绝大多数人的想象。与传统应用相比，AI 应用的生命周期更长，且模型的训练，微调，推理都离不开当今时代的“黄金“——GPU，而云原生领域的技术对 AI 的支持还远没有传统应用的完善。诸如 mlops，GPU 的调度分配，分布式训练等随着 AI 发展而涌现的 topic 会越来越多，相信云原生+人工智能的脚步也会越来越快。</p>\n<p>至此，云原生的未来也很确定了，CNAI（Cloud Native Artificial Intelligence）将会成为云原生下一个十年的主航道。</p>\n<p><img src=\"https://image.robocanic.com/notes/image.png\" alt=\"CNAI\"></p>\n<p>写在最后：</p>\n<p>想了很久第一篇博客要写些什么，前前后后想了一周，最后还是敲定了一个比较大的 title，希望对你有所帮助。文章内容如有错误，请老师们评论区勘误 😁😁。后续将会持续更新云原生，LLM 等领域的内容。</p>\n"},{"title":"Python工程化不完全指南","date":"2024-07-06T13:37:12.000Z","_content":"\nPython 作为一个弱类型语言，似乎从诞生之初就被很多人觉得这是一个很随便的语言，构建一个可靠的 Python 项目是一个很难的事情。事实也确实如此，随着 AI 的爆发，入坑 Python 的人越来越多，但对 Python 的诟病却只增不减。不过，Python 工程化还是在诟病中曲折前进的，到今天为止，尽管还存在着一些混乱，Python 工程化的标准趋于基本完善。本篇将从“过来人”的视角，由浅入深地讲述 python 工程化的方方面面，提供一个最佳实践供你参考。\n\n# 项目目录结构\n\nPython 作为脚本语言，一个.py 文件能放在任何地方运行，但是**一个清晰的目录结构不仅易于排查问题，更方便别人读懂我们的代码，更加优雅**。Python 由于其应用广泛，不同类型的 Python 项目也有着不同的目录结构规约。这里我选取普通应用工程和数据/AI 工程这两种最为广泛的类型进行说明。\n\n## 普通应用工程\n\n假定我们的项目名为`robocanic-project`，普通应用工程最常用的目录结构风格如下所示：\n\n```Plain Text\n robocanic-project/\n │\n ├── robocanic_project/      # 主包，我们的核心代码都在这里面\n │   ├── __init__.py         # 包初始化文件\n │   ├── module1.py          # 模块1\n │   ├── module2.py          # 模块2\n │   └── main.py             # 主程序入口\n │\n ├── tests/                  # 测试目录\n │   ├── __init__.py\n │   ├── test_module1.py\n │   └── test_module2.py\n │\n ├── requirements.txt        # 依赖文件\n ├── setup.py                # 安装脚本\n ├── README.md               # 项目说明\n └── .gitignore              # Git忽略文件\n```\n\n那上面这种还比较宽泛，如果以前后端分离的后端 Web 应用这种比较常见的项目为例，目录结构可以是下面这样的：\n\n```Plain Text\nrobocanic-project/\n├── robocanic_project/                     # 主应用程序目录\n│   ├── __init__.py          # 将该目录标识为包，通常初始化 FastAPI 实例\n│   ├── main.py              # 主文件，包含应用实例和路由\n│   ├── api/                 # API 路由目录\n│   │   ├── __init__.py\n│   │   ├── v1/              # API 的 v1 版本（可选分版本目录）\n│   │   │   ├── __init__.py\n│   │   │   ├── routes/   # 具体的 API 端点\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── user.py  # 用户相关的 API 路由\n│   │   │   │   └── item.py  # 其他模块（如商品）的 API 路由\n│   │   │   └── ...          # 更多 API 路由\n│   ├── core/                # 核心配置模块\n│   │   ├── __init__.py\n│   │   ├── config.py        # 配置文件，包含数据库连接、第三方服务配置等\n│   │   ├── security.py      # 安全相关的设置，例如 OAuth2、JWT\n│   ├── models/              # 数据库模型\n│   │   ├── __init__.py\n│   │   └── user.py          # 用户模型\n│   │   └── item.py          # 其他数据模型\n│   ├── crud/                # 增删改查操作的封装\n│   │   ├── __init__.py\n│   │   ├── user.py          # 用户的 CRUD 操作\n│   │   └── item.py          # 其他数据的 CRUD 操作\n│   ├── db/                  # 数据库初始化及连接\n│   │   ├── __init__.py\n│   │   ├── base.py          # 基础的数据库模型\n│   │   └── session.py       # 数据库会话（SQLAlchemy 会话）\n│   ├── tests/               # 测试目录\n│   │   ├── __init__.py\n│   │   └── test_user.py     # 用户相关的测试文件\n│   │   └── test_item.py     # 其他模块的测试文件\n│   ├── utils/               # 工具函数目录\n│   │   ├── __init__.py\n│   │   └── hashing.py       # 用于密码加密/解密等实用工具\n    ├── alembic/             # 数据库迁移工具 Alembic 相关文件（如果使用）\n│   │   ├── versions/        # 每个迁移文件都保存在这个目录中\n│   │   ├── env.py           # Alembic 环境配置文件\n│   │   ├── README           # Alembic 说明\n│   │   └── script.py.mako   # Alembic 脚本模板\n│   └── ...\n├── .env                     # 环境变量文件（敏感信息，不应提交到版本控制）\n├── .gitignore               # Git 忽略文件列表\n├── requirements.txt         # 依赖包列表（如果使用 pip）\n├── setup.py                 # 安装脚本（如果使用setuptools）\n├── pyproject.toml           # 项目元数据及依赖管理（如果使用 poetry）\n├── README.md                # 项目说明文件\n└── Dockerfile               # Docker 配置文件（如果使用容器化）\n```\n\n一个以 FastAPI 为基础 Web 框架的项目的目录结构如上所示。其中，除了`api`，`models`，`crud`，`utils`这类见名知意的目录，还有一个不太常见的`alembic`这个目录，alembic 其实是数据库迁移（**Database Migration**）的工具。而数据库迁移就是指在我们的应用开发过程中，当涉及到需要修改 ORM 对应的数据库结构（例如表、字段、索引等）时，引入的一套逐步演进数据库的状态，使其与应用代码保持一致的工具。这套工具一般是半自动或者全自动的，可以大大降低手动操作数据库带来的风险。\n\n## 数据/AI 工程\n\n而对于数据科学，模型训练，科学计算这类项目，则有着另一套完全不一样的目录风格：\n\n```Plain Text\nrobocanic-project/\n├── data/\n├── notebooks/\n├── scripts/\n├── requirements.txt\n└── README.md\n\n```\n\n以上是比较简略的目录结构，展开来看：\n\n```Plain Text\nrobocanic-project/\n├── data/\n│   ├── raw/                  # 原始数据（未处理的数据）\n│   ├── processed/            # 处理后的数据（清洗后的数据、特征工程后的数据）\n│   └── external/             # 外部数据源（可能是API或第三方提供的数据）\n│\n├── notebooks/                # Jupyter Notebooks（探索性分析和初步模型）\n│   ├── 01_data_exploration.ipynb  # 数据探索\n│   ├── 02_data_cleaning.ipynb     # 数据清理\n│   └── 03_model_training.ipynb    # 模型训练\n│\n├── scripts/                  # 数据处理和模型训练的Python脚本\n│   ├── data_preprocessing.py  # 数据预处理脚本\n│   ├── train_model.py         # 模型训练脚本\n│   └── evaluate_model.py      # 模型评估脚本\n│\n├── models/                   # 保存的模型（训练好的模型、标记化文件等）\n│   └── model_v1.pkl           # 保存的模型文件\n│\n├── reports/                  # 项目报告与结果展示\n│   ├── figures/              # 图表和可视化结果\n│   └── final_report.pdf      # 最终报告或结果总结\n│\n├── requirements.txt          # 项目所需的依赖库列表\n├── environment.yml           # Conda 环境配置文件\n├── README.md                 # 项目说明文件\n└── .gitignore                # Git忽略文件\n\n```\n\n可以看出数据/AI 项目和普通的应用还是有很大区别的。**数据/AI 项目更多是从数据的流向来进行目录结构的划分，从数据采集 → 数据处理 → 模型训练（数据聚合）→ 模型评估（数据评估）→...... 而普通应用项目则更多是按功能模块来划分，比如 MVC 的划分模式，以 APP 为核心的划分模型等。**\n\n总的来说，Python 工程的目录还是比较灵活的，我们在构建我们自己的项目目录时可以不拘泥于固定的目录结构，但也要遵循上面提到的一些基本规律，这样别人上手我们的项目时能够快速读懂我们的项目结构，进而读懂代码。\n\n# 项目环境与依赖管理\n\n接下来要谈到的部分个人认为是 python 中最混乱的部分——依赖管理。但是讲 Python 的依赖管理不能只讲依赖管理，还要连带着**虚拟环境(Virtual Environment)**一起讲。\n\n不同于 Java，Go 这类依赖跟着项目走的做法，Python 项目的依赖是对于当前虚拟环境而言的。也就是说你在命令行中敲下`pip install fastapi`去下载 fastapi 这个包时，这个依赖是对当前环境有效的，如果项目 A 和项目 B 都使用了虚拟环境 E，那项目 A 和项目 B 都可以使用`fastapi`这个依赖，如果有多个项目都需要依赖`fastapi`，那是不是把他们放到一个虚拟化环境里就行？答案是否定的，因为一般来说，一个项目不单单只依赖一个`fastapi`，还有其他的依赖。比如两个项目 A 和 B 依赖了一个共同的包`pymysql`，但是依赖的版本不一样，这样就会发生依赖冲突。因此我们在创建 Python 项目时，一般都会创建一个对应的虚拟环境来防止依赖冲突。所以到这你就会发现虚拟环境其实还是项目层面的，一个项目就对应一个虚拟环境，虚拟环境的这个设计说实话很鸡肋，不仅相同版本的包不能得到复用，还变相地提高了依赖管理的复杂度。\n\n吐槽完之后，我们来看看现阶段环境管理以及依赖管理的最佳实践。这个最佳实践包括不推荐的方式 venv/virtualenv+pip，以及两种推荐的方式：conda+pip，poetry。\n\n## venv/virtualenv+pip（不推荐）\n\nvenv 和 virtualenv 都是用来创建 python 虚拟环境的工具，不同的地方在于 venv 是 python3.3 后自带的轻量级虚拟环境创建工具，只能用于 python3；而 virtualenv 则需要另外安装，可以用于 py2 以及 py3，还有一些 venv 没有的功能（个人觉得可有可无）。那对于 python3.3 以后的项目，现在都推荐自带的 venv 了。venv 使用起来也很简单：\n\n1.  `python -m venv venv`命令的第一个 venv，是运行 venv 这个模块来创建一个虚拟环境。第二个 venv 是指虚拟环境的文件夹的名字，这个可以根据需要来修改。命令执行后，会在当前文件夹中，建立一个 venv 目录。 在这个 venv 目录中，会默认放置 python.exe、pip.exe 等与系统目录隔离的可执行文件和依赖。一般 venv 会放置在项目的根目录下。\n\n2.  进入到`venv/Scipts`文件夹，执行`activate`，可以激活当前的虚拟环境; 执行`deactivate`，可以停用当前虚拟环境\n\n3.  删除这个虚拟环境只需要删除掉项目根目录下的 venv 文件夹即可。\n\nvenv 没有管理虚拟环境的功能，这是因为虚拟环境的依赖都跟着项目走了（venv 文件夹在项目根目录下）。因此它足够的轻量。\n\npip 是一个轻量级包管理工具，安装 python 时都会自带 pip。pip 最常用的命令有用于下载依赖的`pip install deps`、`pip install -r requirements`和用于删除依赖的`pip uninstall deps`。很多人在一开始使用 pip 时还觉得简单好用，但在使用多了之后就深恶痛绝。pip 让人深恶痛绝的最主要的两个原因如下：\n\n1. 在命令行执行完`pip install deps`后下载的依赖不会同步到 requirements.txt 中，同样`pip uninstall deps`删除的依赖也不会删除 requirements 中声明的依赖。\n\n2. **`pip uninstall deps`只会删除`deps`这个直接依赖，而不会删除最初下载`deps`这个包引入的间接依赖**\n\n其中，第一点还可以使用`pip freeze > requirements.txt`来完成手动同步，第二点则是吐槽最多的点。这两点经常会引起依赖冲突，生产环境与本地开发环境不一致的情况出现。所以在使用 venv+pip 组合时，得遵循一个开发范式，包括但不限于以下几点\n\n1. 直接依赖需要写入 requirements.txt 中，使用`pip install -r requirements`来下载依赖，摈弃`pip install deps`，保证项目依赖相对清晰\n\n2. 发版时必须执行`pip freeze > requirements.txt`来保证本地与云端环境一致\n\n## conda+pip（推荐用于数据/AI 领域）\n\nconda 不仅是一个包管理工具库，还是一个环境管理工具，广泛用于科学计算领域，conda 命令也比较简单易用，使用 conda 的基本步骤如下：\n\n1. `conda create -n my-ns`创建一个隔离的虚拟环境\n\n2. `conda activate my-ns`，激活虚拟环境\n\n3. `conda install dps`下载依赖\n\n4. `conda remve deps` 卸载依赖，conda 在卸载依赖时会智能地处理包的依赖关系，将间接依赖中无用的包也会一并卸载\n\n5. `conda remove --name my-ns --all`删除虚拟环境\n\n其中，conda 创建的虚拟环境会维护一个与环境名同名的文件目录（类似 venv），但这个文件目录会统一放在一个地方，不会放在项目根目录下，这也让多个使用 conda 的项目“有了共享虚拟环境的可能”。那 conda 既能管理环境，又能管理依赖，是不是就能替代 pip？很遗憾还是不能，主要原因有两点：\n\n1. conda 主要用于数据科学领域，整个环境安装起来就比较重，环境初始时就自带了很多依赖，很多依赖是普通项目不需要的。此外，conda 下载依赖的速度也会慢一些。\n\n2. conda 的包与 pip 安装的包不一样，conda 包是二进制格式的，除了数据科学领域，很多 python 库都会在 PyPI 上发布，但不会在 Anaconda repository 上发布\n\n所以以上两点就限制了 conda 的应用领域，除了数据科学领域，conda 就只能作为一个环境管理的工具。那对于使用 conda 来管理环境的情况，pip 一般也是不可或缺的，使用时的注意点同上面的`venv+pip`\n\n## poetry（推荐）\n\n> 以下代码地址: [https://github.com/robocanic/poetry-fastapi-demo.git](https://github.com/robocanic/poetry-fastapi-demo.git)\n\n上面两种环境与依赖管理的方式都有一个比较棘手的点无法解决，那就是 pip 卸载依赖时无法删除引入的间接依赖，这很可能会导致**依赖臃肿，依赖冲突**等问题。\n\npoetry 是一个 python 依赖管理与环境管理的工具，它能够分析出哪些是直接依赖，哪些是间接依赖，在删除依赖时能够删掉无用的间接依赖，保持项目依赖的清爽。此外，poetry 还有指定模糊依赖，依赖快速升级等实用的功能，这让它在依赖管理方面直接甩了 pip 好几条街。至于环境管理，poetry 则是在 virtualenv 的基础上，增强了一些功能，如自动创建虚拟环境，集中/分离的环境管理等等。\n\npoetry 的命令会相对多一些，但常用的也只有几个，下面从建立一个新项目的流程来熟悉一下如何使用 poetry：\n\n#### 创建虚拟环境\n\n在创建文件夹后，执行`poetry init`，会有一系列互动的 command 来引导你创建`pyproject.toml`:\n\n```YAML\n PS D:\\code\\python-projects\\poetry-fastapi-demo>poetry init\n ​\n This command will guide you through creating your pyproject.toml config.\n ​\n Package name [poetry-fastapi-demo]:  \n Version [0.1.0]:  \n Description []:  A web project template using poetry and fastapi.\n Author [robocanic <robocanic@example.com>, n to skip]:  \n License []:  Apache 2.0\n Compatible Python versions [^3.11]:  ~3.10\n ​\n Would you like to define your main dependencies interactively? (yes/no) [yes] no\n Would you like to define your development dependencies interactively? (yes/no) [yes] no\n Generated file\n ​\n [tool.poetry]\n name = \"poetry-fastapi-demo\"\n version = \"0.1.0\"\n description = \"A web project template using poetry and fastapi.\"\n authors = [\"robocanic <robocanic@example.com>\"]\n license = \"Apache 2.0\"\n readme = \"README.md\"\n ​\n [tool.poetry.dependencies]\n python = \"~3.10\"\n ​\n ​\n [build-system]\n requires = [\"poetry-core\"]\n build-backend = \"poetry.core.masonry.api\"\n ​\n ​\n Do you confirm generation? (yes/no) [yes]\n```\n\n这里你在命令行输入的在后面都是可以通过修改`pyproject.toml`来同步的，因此一般我们都会快速地跳过这个阶段。生成的`pyproject.toml`如下所示：\n\n```YAML\n [tool.poetry] #项目信息\n name = \"poetry-fastapi-demo\"\n version = \"0.1.0\"\n description = \"A web project template using poetry and fastapi.\"\n authors = [\"robocanic <robocanic@example.com>\"]\n license = \"Apache 2.0\"\n readme = \"README.md\"\n ​\n [tool.poetry.dependencies]  #主要依赖\n python = \"~3.10\"\n ​\n ​\n [build-system]  # 构建工具\n requires = [\"poetry-core\"]\n build-backend = \"poetry.core.masonry.api\"\n ​\n```\n\n在创建`pyproject.toml`后，在项目根目录下执行`poetry env use python`，会创建一个该项目专有的虚拟环境：\n\n```YAML\n PS D:\\code\\python-projects\\poetry-fastapi-demo> poetry config virtualenvs.in-project true\n PS D:\\code\\python-projects\\poetry-fastapi-demo> poetry env use D:\\env\\python\\python.exe\n Creating virtualenv poetry-fastapi-demo in D:\\code\\python-projects\\poetry-fastapi-demo\\.venv\n Using virtualenv: D:\\code\\python-projects\\poetry-fastapi-demo\\.venv\n```\n\n这里我指定了 poetry 虚拟环境的路径放置在项目根目录的.venv 目录下，我觉得这样的项目组织方式更清晰。`poetry env use python` 这个命令默认使用系统环境变量中的 python，如果你想使用指定版本的 python，可以将 python 换成`path/to/your/py`。\n\n#### 添加依赖\n\n我们可以编辑`pyproject.toml`，添加指定的依赖，再先后执行`poetry lock` 和`poetry install`，`poetry lock`会解析`pyproject.toml`中的主要依赖与开发依赖以及间接依赖，选择合适的依赖版本，记录到 poetry.lock 这个文件中。poetry.lock 的作用类似于 requirements.txt，即“锁定”项目需要的依赖（包括直接依赖和间接依赖）版本。紧接着的`poetry install`就会根据 poetry.lock 中的内容去下载相应版本的依赖。\n\n```Toml\n[tool.poetry] # 项目信息\nname = \"poetry-fastapi-demo\"\nversion = \"0.1.0\"\ndescription = \"A web project template using poetry and fastapi.\"\nauthors = [\"robocanic <robocanic@example.com>\"]\nlicense = \"Apache 2.0\"\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]  # 主要依赖\npython = \"~3.10\"        # python版本>=3.10 且 <3.20\nfastapi = \"^0.115.0\"    # fastapi版本 >=0.115.0 且 <0.116.0\nsqlalchemy = \"^2.0.36\"  # sqlalchemy版本 >=2.0.36 且 < 3.0\npyyaml = \"^6.0.2\"       # pyyaml版本 >=6.0.2 且 < 7.0.0\n\n[tool.poetry.group.dev.dependencies]  # 开发依赖\npytest = \"^8.3.3\"       # pytest版本 >=8.3.3 且 < 9.0.0\n\n[build-system]  # 构建工具\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n```\n\n我们可以指定主要依赖和开发依赖，在发布部署时只打包主要依赖，这样就可以减小包的体积。同时我们可以指定依赖的版本范围，不同的符号有不同的指定范围策略，这一块可以参考 poetry 官方文档：[https://python-poetry.org/docs/dependency-specification/](https://python-poetry.org/docs/dependency-specification/)\n\n此外，我们也可以直接使用命令行`poetry add deps`来下载包，这个命令会自动地更新`pyproject.toml`以及`poetry.lock`文件，保证环境中的依赖与`pyproject.toml`中的的依赖的一致性。\n\n#### 删除依赖\n\n我们可以通过编辑`pyproject.toml`，删除对应的依赖声明，然后执行`poetry lock` 即可，poetry 会自动帮我们把依赖删除。我们也可以使用`poetry remove deps`来删除依赖。\n\npoetry 的这两种删除方式都会解析`deps`的无用的间接依赖，将其一并删除。\n\n#### 删除虚拟环境\n\n执行`poetry env remove poetry-demo`，即可删除虚拟环境。\n\n> 如果在 poetry 的配置中指定了`poetry config virtualenvs.in-project true`，虚拟环境维护的目录就会放在项目的根目录下。类似于 venv 的方式，因此这种情况下删除.venv 文件夹就等同于删除虚拟环境\n\n#### 查看依赖树\n\npoetry 中很实用的一个功能是它可以使用`poetry show --tree`来查看依赖关系，从而在依赖错误时能够更好地定位异常，更快速地解决问题。\n\n![poetry-show--tree](https://image.robocanic.com/notes/image-20241104154436296.png)\n\n#### 导出依赖\n\n理论上来说，有了 poetry 不再需要 pip 了，自然也不需要 requirements.txt 了，但是在后面的项目发布管理中我们会提到，当使用容器化部署时，我们希望我们的镜像尽可能地精简，我们的项目部署能尽可能快速。从精简镜像这个角度来看，poetry 对于我们的项目而言只是开发时依赖，在运行时我们希望只用最简单的依赖就能把项目跑起来。因此我们需要将 poetry.lock 中的依赖转化为 requirements.txt，这样部署时使用`pip install -r requirements.txt`下完依赖之后直接就能 run 起来项目。\n\npoetry 本身也支持导出环境内的依赖，使用`poetry export -f requirements.txt -o requirements.txt`就可以将环境中的所有依赖导出到 requirements.txt 中。\n\n#### 总结\n\npoetry 作为环境管理与依赖管理合二为一的银弹，在体验下来，除了数据科学/AI 领域的项目，我认为 poetry 是开发大多数 python 项目的最佳环境与依赖的管理方式。\n\n# 项目日志\n\n> 以下代码地址: [https://github.com/robocanic/poetry-fastapi-demo.git](https://github.com/robocanic/poetry-fastapi-demo.git)\n\n## 目标\n\n日志的重要性不言而喻，我们这里探讨的“项目日志”，更准确地来说是怎么使用日志能够得到我们想要的效果。通常，我们对于日志会有一些要求：\n\n1. 我们希望我们的日志能够显示出日志时间，日志等级(INFO, WARN, ERROR .....)，日志内容，所在线程，是由哪个组件/py 文件打印的......\n\n2. 对于以上日志信息，不管是自己项目中的还是依赖包中的，都有一个统一的格式打印出来\n\n3. 不仅要在控制台打印，还需要保存到文件中，以便后续排查错误时能够追溯。\n\n4. 更进一步，我们希望 ERROR 级别的日志能够单独放到一个文件中，每天的日志按照日期做一个切割分块......\n\n## 原理\n\n在阐明日志需要达到的效果之后，我们来看看 python 中的 logging 模块，这个模块是 python 自带的，我们可以先来试用一下：\n\n```Python\nimport logging\nlogging.info(\"this is a info log\")\nlogging.warning(\"this is a warning log\")\nlogging.error(\"this is a error log\")\nlogging.critical(\"this is a critical log\")\n\"\"\"\noutput:\nWARNING:root:this is a warning log\nERROR:root:this is a error log\nCRITICAL:root:this is a critical log\n\"\"\"\n```\n\n运行这个 python 文件会发现控制台并没有打印出 info 级别的日志，这是因为 logging 模块提供的日志记录函数所使用的日志器设置的日志级别是`WARNING`，因此只有`WARNING`级别的日志记录以及大于它的`ERROR`和`CRITICAL`级别的日志记录被输出了，而小于它的`INFO`级别的日志记录被丢弃了。\n\n我们可以观察每条日志，每个日志都由三部分构成：`日志级别:日志器名称:日志内容`，这是因为 logging 模块提供的日志记录函数所使用的日志器设置的日志格式默认为`%(levelname)s:%(name)s:%(message)s`。\n\n那自然我们会想到，可不可以通过设置 logging 的日志级别与日志格式，来生成我们想要的日志格式？进一步，我们可不可以调整日志输出的位置，同时输出在控制台和文件？\n\n在回答这个问题之前，我们可以来先简单看下 logging 模块涉及到的四个组件\n\n1. 日志器（Logger），提供了我们的代码可以使用的接口，即 log.info，log.warning，log.error 等\n\n2. 处理器（Handler），将 logger 创建的日志记录发送到合适的目的输出\n\n3. 过滤器（Filter），提供了更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录\n\n4. 格式器（Formatter），决定日志记录的输出格式\n\n这些组件的关系大致如下：日志器（Logger）需要通过处理器（Handler）将日志信息输出到目标位置（文件，控制台，网络等）。而处理器（Handler）可以设置过滤器（Filter）和格式器（Formatter）来对日志进行过滤和格式化，再输出到指定的目标位置。\n\n因此上面的问题也有了答案：通过调整 Logger，Handler，Filter，Formatter 的设置和组合关系，我们可以得到我们想要的日志。\n\n我们可以通过 3 种方式来配置 logging：\n\n1. 使用 Python 代码显式的创建 logger，handle，filter，formatter 并分别调用它们的配置函数\n\n2. 创建一个日志配置文件，然后使用`fileConfig()`函数来读取该文件的内容；\n\n3. 创建一个包含配置信息的 dict，然后把它传递给`dictConfig()`函数；\n\n## 实践\n\n这里我介绍一下第三种，其他两种可以自行研究。第三种我们通常会用一个 yaml/json 文件来描述配置，然后使用`yaml.load`读取日志配置文件，转化成 dict，进而传递给`dictConfig()`，完成 logging 的配置。\n\nyaml 形式的日志配置如下：\n\n```YAML\nversion: 1\nformatters:  # 定义格式器\n  default:   # 格式器名\n    format: '%(asctime)s - %(name)s - %(levelname)s -%(threadName)s%(thread)d - %(message)s'  # 日志格式：时间 - 日志器名 - 日志等级 - 线程名 线程ID - 日志内容\n    datefmt: '%Y-%m-%d %H:%M:%S'   # 时间格式\n    use_colors: true   # 使用颜色\nhandlers:     # 定义处理器\n  console:    # 处理器名\n    class: logging.StreamHandler  # 使用的handler\n    level: INFO    # 日志等级\n    formatter: default  # 使用的formatter名字\n    stream: ext://sys.stdout  # 输出到控制台\n  file:\n    class: logging.FileHandler\n    level: INFO\n    formatter: default\n    filename: app.log   # 输出到app.log\nloggers:         # 定义日志器\n  poetry_fastapi_demo:   # 日志器名称\n    level: INFO  # 日志等级\n    handlers:    # 使用的handler\n      - file\n      - console\n    propagate: false   # 是否传播到父logger再处理\n  poetry_fastapi_demo.routers:  # poetry_fastapi_demo的子logger\n    level: INFO\n    handlers:\n      - console\n      - file\n    propagate: false   # 是否传播到父logger再处理\n  uvicorn:\n    level: INFO\n    handlers:\n      - console\n      - file\n    propagate: false\nroot:            # 根日志器，所有没有归属的日志都会由root来处理\n  level: INFO\n  handlers:\n    - console\n    - file\n```\n\n其中，logger 是有层级结构的，logger 的名称是一个以'.'分割的结构，每个'.'后面的 logger 都是'.'前面的 logger 的 children。而 root 是一个特殊的 logger，它会捕捉没有被其他 logger 处理的日志消息，我们依赖的三方包打印的日志大部分都会由 root logger 捕获到进行处理，因此 root 是很重要的兜底 logger。\n\n在完善好`log.yaml`后，我们做一个验证，`poetry-fastapi-demo`项目结构如下：\n\n```Plain Text\n poetry-fastapi-demo/\n │\n ├── poetry_fastapi_demo/         \n │   ├── models             # 模型\n │   │   ├── __init__.py\n |   |   ├── user.py\n |   ├── routers             # 路由\n |   |   ├── __init__.py\n |   |   ├── user.py\n |   ├── tables              # 增删改查\n |   |   ├── __init__.py\n |   |   ├── user.py\n │   ├── __init__.py    \n │   └── main.py             # 主程序入口\n```\n\n`poetry_fastapi_demo/__init__.py`的内容如下，这里我们将 log.yaml 的路径以环境变量传入，然后使用`.dictConfig`完成日志的配置\n\n```Python\nimport logging.config\nimport os\nimport yaml\n\nlog_conf_path = os.environ.get(\"LOG_CONFIG\")\nwith open(log_conf_path, 'r', encoding='utf-8') as f:\n    dict_conf = yaml.safe_load(f)\nlogging.config.dictConfig(dict_conf)\n\n```\n\n`poetry_fastapi_demo/routers/user.py`的内容如下\n\n```Python\nimport logging\n\nfrom fastapi import APIRouter\n\nfrom poetry_fastapi_demo.models import User\nfrom poetry_fastapi_demo.tables import user_table\n\nlog = logging.getLogger(__name__)\nrouter = APIRouter()\n\n\n@router.get(\"\")\ndef get_all_users():\n    return user_table.get_all_users()\n\n\n@router.get(\"/{user_id}\")\ndef get_user(user_id: int):\n    return user_table.get_user_by_id(user_id)\n\n\n@router.post(\"\")\ndef create_user(user: User):\n    log.info(f\"Creating user: {user}\")\n    return user_table.add_user(user)\n\n\n@router.delete(\"/{user_id}\")\ndef delete_user(user_id: int):\n    log.warning(f\"Deleting user with id: {user_id}\")\n    return user_table.delete_user(user_id)\n\n\n@router.put(\"\")\ndef update_user(user: User):\n    log.warning(f\"Updating user: {user}\")\n    return user_table.update_user(user)\n\n```\n\n运行 main.py（记得设置环境变量），我们可以在控制台中看到日志输出，同时在项目的根目录下也会生成 app.log 日志文件，记录运行的日志。\n\n![app-log](https://image.robocanic.com/notes/app-log.png)\n\n我们发起一个新增 user 的请求：\n\n```Shell\ncurl --request POST \\\n  --url http://localhost:8080/api/v1/user \\\n  --header 'content-type: application/json' \\\n  --data '{\n  \"id\": 6,\n  \"name\": \"robb\",\n  \"email\": \"robocanic@gmail.com\",\n \"password\": \"xclkjva\",\n  \"role\": \"user\"\n}'\n```\n\n我们可以看到日志显示如下：\n\n![create-user-log](https://image.robocanic.com/notes/create-user-log.png)\n\n到这，基本的日志需求就满足了，我们无需调整代码，仅通过调整配置文件就能适时调整日志。那对于目标中的第 4 点“我们希望 ERROR 级别的日志能够单独放到一个文件中，每天的日志按照日期做一个切割分块”，相信你可以举一反三\n\n# 项目测试\n\n> 以下代码地址: [https://github.com/robocanic/poetry-fastapi-demo.git](https://github.com/robocanic/poetry-fastapi-demo.git)\n\n一个项目可靠的项目离不开完备的测试，测试一般分为单元测试和接口测试，单测针对某个函数或者某个模块，测试返回的参数是否符合预期，而接口测试是针对于 HTTP（RPC）接口，测试的是某一块功能的完备性。\n\n这里我们讨论的仅限于单元测试。在 python 中，单元测试可以使用 unittest 模块和 pytest，uninttest 是 python 自带的测试模块，而 pytest 是一个第三方模块，在兼容 unittest 的基础上，增加了集成测试的功能，方便我们进行批量的单元测试，与 CI 进行结合。因此后文中使用 pytest 来进行讲解。\n\npytest 可以自动递归指定路径下的所有文件，只要符合`test_`或者`_test`开头的 py 文件都会被识别为测试用例文件。都会在测试计划中执行。\n\n## 实践\n\n在使用 pytest 之前需要使用 pip 或者 poetry 下载，我们可以将 pytest 下载到`dev`分组的依赖，也就是开发时依赖（如`poetry add pytest --group dev`），以便生产部署时精简掉开发时依赖。\n\n项目目录结构如下：\n\n```Plain Text\n poetry-fastapi-demo/\n │\n ├── poetry_fastapi_demo/   # 程序主包    \n │   ├── models/             # 模型\n │   │   ├── __init__.py\n |   |   ├── user.py\n |   ├── routers/             # 路由\n |   |   ├── __init__.py\n |   |   ├── user.py\n |   ├── tables/              # 增删改查\n |   |   ├── __init__.py\n |   |   ├── user.py\n │   ├── __init__.py    \n │   └── main.py             # 主程序入口\n ├── tests/                  # 测试文件\n |   ├── test_user_table.py    # 模型\n ......\n```\n\n其中，`poetry_fastapi_demo/tables/user.py`内容如下：\n\n```Python\nfrom typing import Optional, List\n\nfrom poetry_fastapi_demo.models import User\n\nuser_list = [\n    User(\n        id=1,\n        name=\"Chris\",\n        email=\"chris@gmail.com\",\n        password=\"pso3sd5xv\",\n        role=\"admin\"\n    ),\n    User(\n        id=2,\n        name=\"Jon\",\n        email=\"jon@gmail.com\",\n        password=\"rthdfwe5sdf\",\n        role=\"user\"\n    ),\n    User(\n        id=3,\n        name=\"Arya\",\n        email=\"arya@gmail.com\",\n        password=\"ndddrwe42\",\n        role=\"user\"\n    )\n\n]\n\n\nclass UserTable:\n\n    def get_all_users(self) -> List[User]:\n        return user_list\n\n    def get_user_by_id(self, user_id: int) -> Optional[User]:\n        for user in user_list:\n            if user.id == user_id:\n                return user\n        return None\n\n    def update_user(self, user: User) -> bool:\n        for u in user_list:\n            if u.id == user.id:\n                u.name = user.name\n                u.email = user.email\n                u.password = user.password\n                u.role = user.role\n                return True\n        return False\n\n    def delete_user(self, user_id: int) -> bool:\n        for i, u in enumerate(user_list):\n            if u.id == user_id:\n                del user_list[i]\n                return True\n        return False\n\n    def add_user(self, user: User) -> bool:\n        for u in user_list:\n            if u.id == user.id:\n                return False\n        user_list.append(user)\n        return True\n\n\nuser_table = UserTable()\n\n```\n\n测试案例`test_user_table.py`内容如下：\n\n```Python\nfrom poetry_fastapi_demo.models import User\nfrom poetry_fastapi_demo.tables import user_table\n\n\nclass TestUserTable:\n\n    def test_get_all(self):\n        user_table.get_all_users()\n\n    def test_get_by_id(self):\n        user = user_table.get_user_by_id(1)\n        assert user.name == \"Chris\"\n\n    def test_update_user(self):\n        user = user_table.get_user_by_id(1)\n        user.name = \"Chris2\"\n        assert user_table.update_user(user) is True\n        assert user_table.get_user_by_id(1).name == \"Chris\"   # 故意写错\n\n    def test_delete_user(self):\n        assert user_table.delete_user(1) is True\n        assert user_table.get_user_by_id(1) is None\n\n    def test_add_user(self):\n        result = user_table.add_user(User(\n            id=4,\n            name=\"robb\",\n            email=\"robb@gmail.com\",\n            password=\"loqjwnd[as;\",\n            role=\"admin\"\n        ))\n        assert result is True\n        assert user_table.get_user_by_id(4).name == \"robb\"\n\n\n\n```\n\n然后我们在项目根目录执行`pytest tests/ -v`，输出如下：\n\n![py-test](https://image.robocanic.com/notes/py-test.png)\n\npytest 会递归地在 tests 文件夹下寻找以`test_`或`_test`开头的 py 文件，在 py 文件中，会寻找以`test_`或`_test`开头的函数或者类，对于我们这个案例来说，一共有 5 个测试用例，在输出中我们也能详细地查看到通过和失败的具体用例，错误的原因，执行的时间等等。此外，pytest 还有其他的功能（可参考[https://learning-pytest.readthedocs.io/zh/latest/index.html](https://learning-pytest.readthedocs.io/zh/latest/index.html)），如测试前和测试后的预处理和后处理，使用插件生成测试报告等，这里就算抛砖引玉给大家。\n\n## CI 集成\n\n按照开发流程来说，我们在本地开发并单测完后，会发布到测试环境中进行进一步地调试验证。有时候我们修改完代码后忘记执行对应的单测就提交了，然后在调试中才发现了错误，然后又回炉重造。为了尽量减少修改小错误反复发布的时间，我们可以将自动化测试集成到 gitlab pipeline（使用参考[https://docs.gitlab.com/ee/ci/pipelines/](https://docs.gitlab.com/ee/ci/pipelines/)）或 github actions(使用参考[https://docs.github.com/zh/actions](https://docs.github.com/zh/actions))。\n\n#### github actions\n\n```YAML\nname: Python ci           # workflow名字\n\non:                            # 触发条件，push或merge到dev中触发\n  push:\n    branches: [ \"dev\" ]\n  pull_request:\n    branches: [ \"dev\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest    # 跑在ubuntu虚拟机上\n    strategy:                 # 执行策略\n      fail-fast: false\n      matrix:\n        python-version: [\"3.10\"]\n\n    steps:                    # 执行步骤\n    - uses: actions/checkout@v4    # 使用checkout这个已有的action来初始化git环境\n    - name: Set up Python ${{ matrix.python-version }}   # 使用setup-python来初始化python环境\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}     # 指定python版本\n    - name: Set up Poetry                 # 使用setup-poetry这个已有的action来初始化poetry\n      uses: Gr1N/setup-poetry@v9\n    - name: Install dependencies         # 使用poetry下载依赖，因为是在一个单独的虚拟机/容器中，所以无需创建虚拟环境\n      run: |\n        poetry config virtualenvs.create false\n        poetry lock\n        poetry install --all-extras\n    - name: Test with pytest            # 使用pytest执行集成测试\n      env:\n        LOG_CONFIG: ./log.yaml\n      run: |\n        pytest tests/ -v\n```\n\n我们把上面这个 yml 命名为 ci.yml，并放置在项目根目录.github/workflows 目录下，然后 github 会自动检测到 workflow 的存在并按照 yml 中定义的步骤依次执行。然后我们在 dev 分支 push 到远程，然后我们会在 actions 中发现历史执行/正在执行的 workflow。\n\n![github-action](https://image.robocanic.com/notes/github-action.png)\n\n我们点进某一个 workflow 可以看到 job 的执行结果是成功还是失败：\n\n![github-workflow-job](https://image.robocanic.com/notes/github-workflow-job.png)\n\n进一步，我们进入 build 这个 job，我们可以看到集成测试的信息：\n\n![job-test](https://image.robocanic.com/notes/job-test.png)\n\n此外，github actions 还可以探索更多的玩法，比如：当 job 失败了发送邮件到自己的邮箱提示流水线失败了，当 job 失败了回滚到上一个 commit 的状态等等，这些就都留给你去探索了\n\n#### gitlab pipeline\n\n```YAML\nstages:\n  - automatic_test_dev\n\nautomatic_test_job_dev:   # 我们只在测试环境执行自动化测试，生产环境为了加快发布速度，不执行测试\n  image: sunpeek/poetry:py3.10-slim    # 使用带poetry的python镜像\n  stage: automatic_test_dev\n  only:\n    - dev                 # 只有dev分支发生变化（merge或push）时触发\n  tags:                   # 匹配python标签的runner才运行\n    - python\n  script:                 # 执行脚本\n    - poetry config virtualenvs.create false  # 在容器中，不用创建虚拟环境\n    - poetry lock     # 锁定依赖版本\n    - poetry install  # 下载依赖\n    - pytest tests/   # 执行测试\n```\n\n我们将这个 yml 文件命名为.gitlab-ci.yml，然后 push 到 dev 分支，就会触发 pipeline。gitlab pipeline 本质上和 github actions 是一样的，都是声明式的流水线，因此这里就不再赘述，你可以查阅官方文档（[https://docs.gitlab.com/ee/ci/pipelines/](https://docs.gitlab.com/ee/ci/pipelines/)）来组合出你的 pipeline。\n\n# 项目发布管理\n\n当我们项目在本地运行 ok，测试也 ok 后，该考虑发布到各个环境（联调，测试，生产等）。这个过程根据项目的属性分为两类，一类是二方包的发布，另一类则是正经应用发布。\n\n在谈这两类发布之前，我们先来确认发布过程中我们想要达到的目标（要求）：\n\n1. 对于二方包发布，我们希望它在本地就能够发布 beta 版本，以便于快速验证。此外，正式版本的发布，我们希望能够集成到 CI 中。\n\n2. 对于应用发布，我们希望它发布时足够迅速，以便在出现问题时快速推送补丁解决问题。\n\n3. 无论是二方包还是应用发布，我们希望在发布的时候自动执行集成测试（生产除外），生成一份测试报告。\n\n## 二方包发布\n\n二方包的发布根据我们使用的项目环境和依赖管理工具可以划分为两类，第一类是使用 conda+pip 或者 venv+pip 后的发布流程，另一类是使用 poetry 后的发布流程。\n\n### setuptools+twine\n\n发布分为打包和推送两个步骤，setuptools 负责将我们的 python 代码打包，而 twine 则负责将打包后的 pkg 推送到 PyPI 仓库。\n\nsetuptools 是很多年来 python 打包的首选工具，我们首先需要执行`pip install setuptools`来下载这个工具。然后在项目根目录下新建一个`setup.py`文件来写打包时的配置，一个 setup.py 如下所示：\n\n```Python\nfrom setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"UTF-8\") as fh:\n    long_description = fh.read()\nversion= os.environ.get(\"GITHUB_REF_NAME\", \"0.0.1b0\") # 包的版本，GITHUB_REF_NAME是github tag name的环境变量，代表代码分支TAG；0.0.1b0 是0.0.1-BETA0的缩写\nsetup(\n    name='poetry_fastapi_demo',  # 包名\n    version=version,     # 构建版本\n    author='robocanic',  # 作者\n    author_email='robocanic@gmail.com',\n    description='A web project template using poetry and fastapi.',   # 描述\n    long_description=long_description,  # 长的描述\n    long_description_content_type=\"text/markdown\",\n    url='https://github.com/robocanic/poetry-fastapi-demo',\n    packages=find_packages(),  # 打包所有包目录\n    classifiers=[\n        \"Development Status :: 2 - Beta\"    # 开发阶段\n        \"Programming Language :: Python :: 3.10\",   # 使用的语言\n        \"Operating System:: OS Independent\",   # 不限定OS\n    ],\n    install_requires=[     # 该项目的依赖，别人下载我们的包时会自动下载这些依赖\n        \"fastapi==0.115.0\",\n        \"sqlalchemy==2.0.36\",\n        \"pyyaml==6.0.2\",\n        \"uvicorn=0.32.0\"\n    ],\n    python_requires='>=3.10'    # python要求\n)\n\n```\n\n`setup.py`使用代码的方式声明了我们打包的配置，包括构建版本，直接依赖，python 版本要求等等。接下来我们只需要执行`python setup.py sdist`就能将项目打包成.tar.gz 文件，当然我们也可以指定打包格式为`bdist_wheel`，打包成.wheel 文件。打包后的文件默认放在 dist 目录下。\n\n接下来我们需要使用 twine 上传到 PyPI 仓库，twine 也是一个 python 包，在使用之前需要通过`pip install twine`下载。然后执行`twine upload dist/*`就上传到了仓库。\n\n> 如果要上传到私有的 PyPI 仓库，则需要配置上传的用户名和密码，同时在上传时需要指定私有仓库。最便捷的方法是在 root 目录下新增一个.pypirc 文件，文件内容为：\n\n    [distutils]\n\n\n    index-servers = private-pypi\n\n    [nexus]\n\nrepository=https://private-pypi.com/simple/\nusername=foo\npassword=bar\n然后使用`twine upload -r private-pypi dist/*` 来上传到指定的私有仓库\n\n### poetry\n\n如果你使用了 poetry，那 poetry 就自带了打包和上传的功能。poetry 打包非常简单，只需要执行`poetry build`，它就会参照`pyproject.toml`中的配置进行打包。打包生成的文件默认也会放在 dist 目录下。\n\n然后我们执行`poetry publish`就可以发布到 PyPI 仓库\n\n> 同样，若要使用 poetry 上传到私有的 PyPI 仓库。也需要额外的配置：\n> `poetry config repositories.foo-pub [https://pypi.example.org/legacy/](https://pypi.example.org/legacy/)` > `poetry config http-basic.foo-pub <username> <password>` > `poetry publish --repository foo-pub`\n\n### CI 集成\n\n很多时候我们发现了特定版本包的一些问题，我们想要这个特定版本的包对应的源代码，并在此基础上加一个补丁。因此我们需要将我们包的版本和我们代码的特定分支一一对应。通过人工完成这个过程是可行的，我们只需要在每次打包前/后 加一个 commit，推到远程仓库，打一个 tag 就能对应起来。但是这件重复的工作我们时常会忘记，这个重复的工作可以交给一个单独的程序来做吗？答案当然是肯定的，毕竟程序员最习惯的事就是将重复的工作程序化，复杂的工作流程化。gitlab pipeline/github actions 能够通过我们声明的 yml 文件来完成这个过程。\n\n#### gitlab pipeline\n\n一个使用 poetry 的二方包发布的 gitlab pipeline 文件可以如下（集成了单测）：\n\n```YAML\nimage: sunpeek/poetry:py3.10-slim   # 需要带有poetry的python镜像\n\nstages:\n  - automatic_test\n  - package_build_push\n\n\nautomatic_test_job:   #\n  stage: automatic_test\n  only:\n    - dev\n  tags:\n    - golang\n  script:\n    - poetry config virtualenvs.create false  # 在容器中，不用创建虚拟环境\n    - poetry lock     # 锁定依赖版本\n    - poetry install  # 下载依赖\n    - pytest tests/   # 执行测试\n\n\npackage_build_push_job:\n  stage: package_build_push\n  only:    # 触发条件：只有打tag之后才会触发该job\n    - tags\n  script:\n    - poetry config repositories.foo-pub https://pypi.example.org/legacy/   # 添加发布仓库\n    - poetry config http-basic.foo-pub $FOO_USERNAME $FOO_PASSWORD          # 添加发布仓库的用户名密码，通过流水线环境变量可以设置\n    - sed -i \"s/^version = \\\".*\\\"/version = \\\"$CI_COMMIT_TAG\\\"/\" pyproject.toml  # 修改构建版本，与TAG一致\n    - poetry publish --build  --repository foo-pub   # 打包并推送\n```\n\n简单来说，gitlab 在我们打上一个 tag 之后，会起一个 runner 执行这个 yml 文件的 script（具体过程可自行了解）。因此当我们想要发布一个版本时，推到镜像仓库后，打一个 tag，gitlab pipeline 就会进行打包，推送，并且推送到仓库的包的版本和我们的 TAG 是严格对应的。\n\n#### github actions\n\n```YAML\nname: Release package           # workflow名字\n\non:                            # 触发条件，新建tag时触发\n  push:\n    tags:\n      - '*'                  # 任意标签都会触发工作流\n\njobs:\n  pkg:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4    # 使用checkout这个已有的action来初始化git环境\n      - name: Set up Python ${{ matrix.python-version }}   # 使用setup-python来初始化python环境\n        uses: actions/setup-python@v3\n        with:\n          python-version: ${{ matrix.python-version }}     # 指定python版本\n      - name: Set up Poetry                 # 使用setup-poetry这个已有的action来初始化poetry\n        uses: Gr1N/setup-poetry@v9\n      - name: Extract version\n        id: extract_version\n        run: |\n          VERSION=\"${GITHUB_REF#refs/tags/}\"\n          echo \"VERSION=${VERSION}\" >> $GITHUB_ENV\n      - name: Replace version\n        run: |\n          sed -i \"s/^version = \\\".*\\\"/version = \\\"${{ env.VERSION }}\\\"/\" pyproject.toml\n      - name: Build Package        # 打包\n        run: |\n          poetry config virtualenvs.create false\n          poetry build\n      - name: Publish Package    # 发布\n        env:\n          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}    # 提前定义pypi的 api token\n        run: |\n          poetry config pypi-token.pypi $PYPI_API_TOKEN\n          poetry publish\n\n\n```\n\n#### 总结\n\npoetry 作为集环境管理，依赖管理，打包发布一体的工具，虽然有上手难度，但从长期来看是值得使用的，强烈推荐。gitlab pipeline/github actions 的使用倒是可以看自身需求，如果项目比较小，发布次数少，不要求代码分支与包的版本严格对应，是可以不用的。此外，我们在使用 gitlab pipeline 时也可以适当没那么“严格”，比如，为了图方便我们可以在本地发布非正式版本，而正式版本则走 pipeline，保证正式版本的稳定。\n\n## 应用发布\n\n应用发布即让我们的应用运行在机器上，对外提供服务。应用的运行形态可以基本分为容器/虚拟机，后文中都基于使用更广泛的容器来进行说明。\n\n应用发布大体上分为两个阶段，一个是镜像的打包与推送，另一个是镜像拉取和启动容器。其中，镜像推送，镜像拉取和启动容器对于每一种应用程序都是大差不差的，而镜像打包则是差异比较大的，所以这里我就镜像打包展开来讲。\n\n### 镜像打包\n\n镜像的大小关乎到推送和拉取的效率，因此我们要尽可能地减小镜像大小。python 的基础镜像中，`slim`版本的基础镜像移除了不必要的系统个工具和库，因此基础镜像我们选择`slim`版本（127MB 左右）。\n\n此外，我们如果使用了 poetry 来作为依赖管理的工具，那在打包时就有两种选择：第一种是直接将 poetry 打到基础镜像中，第二种是使用 multi-stage build，即在第一个阶段先下载 poetry，导出依赖到 requirements.txt，然后在第二个阶段使用 pip install 来下载依赖。multi-stage build 虽然最终的镜像里不包含 poetry，但是第一个阶段下载 poetry 和导出依赖都需要时间，而第一种方法中直接将 poetry 打到基础镜像中，镜像大小也只增加了不到 100MB，在可以接受的范围内，因此我更推荐第一种。\n\n确定好镜像策略后，我们来看看 Dockerfile 长啥样（基础镜像的打包就是在 python 基础镜像的上面使用 pip 下载 poetry 即可，不再赘述）：\n\n```Dockerfile\n# 包含poetry的python基础镜像\nFROM sunpeek/poetry:py3.10-slim\nLABEL maintainer=\"robocanic@gmail.com\"\n# Keeps Python from generating .pyc files in the container\nENV PYTHONDONTWRITEBYTECODE=1\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED=1\n\n# mv source code to a specific directory\nWORKDIR /appruntime\nCOPY . /appruntime\n\n# no need to create virtual env\nRUN poetry config virtualenvs.create false\n# analyze deps\nRUN poetry lock\n# Install deps\nRUN poetry install\n\n# Creates a non-root user with an explicit UID and adds permission to access the /appruntime folder\nRUN adduser -u 5678 --disabled-password --gecos \"\" appuser && chown -R appuser /appruntime\nUSER appuser\n\nCMD [\"uvicorn\", \"poetry_fastapi_demo.main:app\", \"--host=0.0.0.0\", \"--port=8080\", \"--log-config=/appruntime/log.yaml\"]\n```\n\n### CI 集成\n\n如果使用了 gitlab pipeline/github actions，那我们可以将镜像打包，镜像推送都结合到 CI 中\n\n#### gitlab pipeline\n\n```YAML\nvariables:    # 变量\n  IMAGE_NAME: $CI_PROJECT_PATH\n  PROJECT_NAME: $CI_PROJECT_NAME\n\n\nstages:\n  - automatic_test_dev\n  - package_build_push_dev\n  - deploy_dev\n\nautomatic_test_job_dev:   # 我们只在联调/测试时执行自动化测试，生产环境为了加快发布速度，不执行测试\n  image: sunpeek/poetry:py3.10-slim    # 使用带poetry的python镜像\n  stage: automatic_test_dev\n  only:\n    - dev\n  tags:\n    - python\n  script:\n    - poetry config virtualenvs.create false  # 在容器中，不用创建虚拟环境\n    - poetry lock     # 锁定依赖版本\n    - poetry install  # 下载依赖\n    - pytest tests/   # 执行测试\n\npackage_build_push_job_dev:\n  image: docker:27.3  # 使用docker镜像\n  stage: package_build_push_dev\n  only:\n    - dev\n  tags:\n    - python\n  artifacts:\n    paths:\n      - BUILDTIME   # 缓存构建时间文件供下一个job使用\n  script:\n    - date +'%Y%m%d%H%M' > BUILDTIME  # 将构建时间写到文件\n    - export IMAGE_TAG=dev-$(cat BUILDTIME)-$CI_COMMIT_SHORT_SHA # 镜像tag  dev-[年月日时分]-[commit id前八位]\n    - export IMAGE_NAME=$(echo $IMAGE_NAME | tr 'A-Z' 'a-z')  # 把gitlab的目录和项目名小写作为镜像名\n    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD\n    - docker build  -t $IMAGE_NAME:$IMAGE_TAG .\n    - docker push $IMAGE_NAME:$IMAGE_TAG\n```\n\n#### github actions\n\n```YAML\nname: Release deploy           # workflow名字\n\non:                            # 触发条件，新建tag时触发\n  push:\n    tags:\n      - '*'                   # 任意标签都会触发工作流\n\njobs:\n  pkg:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up QEMU       # 初始化qemu\n        uses: docker/setup-qemu-action@v3\n      - name: Set up Docker Buildx   # 初始化buildx\n        uses: docker/setup-buildx-action@v3\n      - name: Login to Docker Hub   # 登录dockerhub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n      - name: Extract version   # 提取tag\n        id: extract_version\n        run: |\n          VERSION=\"${GITHUB_REF#refs/tags/}\"\n          echo \"VERSION=${VERSION}\" >> $GITHUB_ENV\n      - name: Build and push   # 构建镜像并推送\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: ${{ github.repository }}:${{ env.VERSION }}\n```\n\n### 总结\n\n如果你使用 docker compose/docker swarm/k8s 等基础设施，你还可以结合 docker/kubectl 或者 docker api/k8s api 来进行 CD，从而实现应用从发布到部署完全流水线化。\n\n应用的发布在不同的团队，不同的公司是有着不同的流程和偏好的，以上只是我提供的一种实现参考，但是无论是什么发布流程，考虑的重点其实是大差不差的：\n\n1. 镜像大小要尽可能压缩\n\n2. 发布要做到可回滚，可灰度\n\n3. 发布流程中的信息要可追溯\n\n4. 发布中用到的组件复用度要高\n\n5. ......\n\n按照这些个思路去编排发布流水线，相信你能得到一个理想中的流水线。\n","source":"_posts/Python工程化不完全指南.md","raw":"---\ntitle: Python工程化不完全指南\ndate: 2024-7-06 21:37:12\ntags: Python, 日常开发\ncategories: 日常开发\n---\n\nPython 作为一个弱类型语言，似乎从诞生之初就被很多人觉得这是一个很随便的语言，构建一个可靠的 Python 项目是一个很难的事情。事实也确实如此，随着 AI 的爆发，入坑 Python 的人越来越多，但对 Python 的诟病却只增不减。不过，Python 工程化还是在诟病中曲折前进的，到今天为止，尽管还存在着一些混乱，Python 工程化的标准趋于基本完善。本篇将从“过来人”的视角，由浅入深地讲述 python 工程化的方方面面，提供一个最佳实践供你参考。\n\n# 项目目录结构\n\nPython 作为脚本语言，一个.py 文件能放在任何地方运行，但是**一个清晰的目录结构不仅易于排查问题，更方便别人读懂我们的代码，更加优雅**。Python 由于其应用广泛，不同类型的 Python 项目也有着不同的目录结构规约。这里我选取普通应用工程和数据/AI 工程这两种最为广泛的类型进行说明。\n\n## 普通应用工程\n\n假定我们的项目名为`robocanic-project`，普通应用工程最常用的目录结构风格如下所示：\n\n```Plain Text\n robocanic-project/\n │\n ├── robocanic_project/      # 主包，我们的核心代码都在这里面\n │   ├── __init__.py         # 包初始化文件\n │   ├── module1.py          # 模块1\n │   ├── module2.py          # 模块2\n │   └── main.py             # 主程序入口\n │\n ├── tests/                  # 测试目录\n │   ├── __init__.py\n │   ├── test_module1.py\n │   └── test_module2.py\n │\n ├── requirements.txt        # 依赖文件\n ├── setup.py                # 安装脚本\n ├── README.md               # 项目说明\n └── .gitignore              # Git忽略文件\n```\n\n那上面这种还比较宽泛，如果以前后端分离的后端 Web 应用这种比较常见的项目为例，目录结构可以是下面这样的：\n\n```Plain Text\nrobocanic-project/\n├── robocanic_project/                     # 主应用程序目录\n│   ├── __init__.py          # 将该目录标识为包，通常初始化 FastAPI 实例\n│   ├── main.py              # 主文件，包含应用实例和路由\n│   ├── api/                 # API 路由目录\n│   │   ├── __init__.py\n│   │   ├── v1/              # API 的 v1 版本（可选分版本目录）\n│   │   │   ├── __init__.py\n│   │   │   ├── routes/   # 具体的 API 端点\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── user.py  # 用户相关的 API 路由\n│   │   │   │   └── item.py  # 其他模块（如商品）的 API 路由\n│   │   │   └── ...          # 更多 API 路由\n│   ├── core/                # 核心配置模块\n│   │   ├── __init__.py\n│   │   ├── config.py        # 配置文件，包含数据库连接、第三方服务配置等\n│   │   ├── security.py      # 安全相关的设置，例如 OAuth2、JWT\n│   ├── models/              # 数据库模型\n│   │   ├── __init__.py\n│   │   └── user.py          # 用户模型\n│   │   └── item.py          # 其他数据模型\n│   ├── crud/                # 增删改查操作的封装\n│   │   ├── __init__.py\n│   │   ├── user.py          # 用户的 CRUD 操作\n│   │   └── item.py          # 其他数据的 CRUD 操作\n│   ├── db/                  # 数据库初始化及连接\n│   │   ├── __init__.py\n│   │   ├── base.py          # 基础的数据库模型\n│   │   └── session.py       # 数据库会话（SQLAlchemy 会话）\n│   ├── tests/               # 测试目录\n│   │   ├── __init__.py\n│   │   └── test_user.py     # 用户相关的测试文件\n│   │   └── test_item.py     # 其他模块的测试文件\n│   ├── utils/               # 工具函数目录\n│   │   ├── __init__.py\n│   │   └── hashing.py       # 用于密码加密/解密等实用工具\n    ├── alembic/             # 数据库迁移工具 Alembic 相关文件（如果使用）\n│   │   ├── versions/        # 每个迁移文件都保存在这个目录中\n│   │   ├── env.py           # Alembic 环境配置文件\n│   │   ├── README           # Alembic 说明\n│   │   └── script.py.mako   # Alembic 脚本模板\n│   └── ...\n├── .env                     # 环境变量文件（敏感信息，不应提交到版本控制）\n├── .gitignore               # Git 忽略文件列表\n├── requirements.txt         # 依赖包列表（如果使用 pip）\n├── setup.py                 # 安装脚本（如果使用setuptools）\n├── pyproject.toml           # 项目元数据及依赖管理（如果使用 poetry）\n├── README.md                # 项目说明文件\n└── Dockerfile               # Docker 配置文件（如果使用容器化）\n```\n\n一个以 FastAPI 为基础 Web 框架的项目的目录结构如上所示。其中，除了`api`，`models`，`crud`，`utils`这类见名知意的目录，还有一个不太常见的`alembic`这个目录，alembic 其实是数据库迁移（**Database Migration**）的工具。而数据库迁移就是指在我们的应用开发过程中，当涉及到需要修改 ORM 对应的数据库结构（例如表、字段、索引等）时，引入的一套逐步演进数据库的状态，使其与应用代码保持一致的工具。这套工具一般是半自动或者全自动的，可以大大降低手动操作数据库带来的风险。\n\n## 数据/AI 工程\n\n而对于数据科学，模型训练，科学计算这类项目，则有着另一套完全不一样的目录风格：\n\n```Plain Text\nrobocanic-project/\n├── data/\n├── notebooks/\n├── scripts/\n├── requirements.txt\n└── README.md\n\n```\n\n以上是比较简略的目录结构，展开来看：\n\n```Plain Text\nrobocanic-project/\n├── data/\n│   ├── raw/                  # 原始数据（未处理的数据）\n│   ├── processed/            # 处理后的数据（清洗后的数据、特征工程后的数据）\n│   └── external/             # 外部数据源（可能是API或第三方提供的数据）\n│\n├── notebooks/                # Jupyter Notebooks（探索性分析和初步模型）\n│   ├── 01_data_exploration.ipynb  # 数据探索\n│   ├── 02_data_cleaning.ipynb     # 数据清理\n│   └── 03_model_training.ipynb    # 模型训练\n│\n├── scripts/                  # 数据处理和模型训练的Python脚本\n│   ├── data_preprocessing.py  # 数据预处理脚本\n│   ├── train_model.py         # 模型训练脚本\n│   └── evaluate_model.py      # 模型评估脚本\n│\n├── models/                   # 保存的模型（训练好的模型、标记化文件等）\n│   └── model_v1.pkl           # 保存的模型文件\n│\n├── reports/                  # 项目报告与结果展示\n│   ├── figures/              # 图表和可视化结果\n│   └── final_report.pdf      # 最终报告或结果总结\n│\n├── requirements.txt          # 项目所需的依赖库列表\n├── environment.yml           # Conda 环境配置文件\n├── README.md                 # 项目说明文件\n└── .gitignore                # Git忽略文件\n\n```\n\n可以看出数据/AI 项目和普通的应用还是有很大区别的。**数据/AI 项目更多是从数据的流向来进行目录结构的划分，从数据采集 → 数据处理 → 模型训练（数据聚合）→ 模型评估（数据评估）→...... 而普通应用项目则更多是按功能模块来划分，比如 MVC 的划分模式，以 APP 为核心的划分模型等。**\n\n总的来说，Python 工程的目录还是比较灵活的，我们在构建我们自己的项目目录时可以不拘泥于固定的目录结构，但也要遵循上面提到的一些基本规律，这样别人上手我们的项目时能够快速读懂我们的项目结构，进而读懂代码。\n\n# 项目环境与依赖管理\n\n接下来要谈到的部分个人认为是 python 中最混乱的部分——依赖管理。但是讲 Python 的依赖管理不能只讲依赖管理，还要连带着**虚拟环境(Virtual Environment)**一起讲。\n\n不同于 Java，Go 这类依赖跟着项目走的做法，Python 项目的依赖是对于当前虚拟环境而言的。也就是说你在命令行中敲下`pip install fastapi`去下载 fastapi 这个包时，这个依赖是对当前环境有效的，如果项目 A 和项目 B 都使用了虚拟环境 E，那项目 A 和项目 B 都可以使用`fastapi`这个依赖，如果有多个项目都需要依赖`fastapi`，那是不是把他们放到一个虚拟化环境里就行？答案是否定的，因为一般来说，一个项目不单单只依赖一个`fastapi`，还有其他的依赖。比如两个项目 A 和 B 依赖了一个共同的包`pymysql`，但是依赖的版本不一样，这样就会发生依赖冲突。因此我们在创建 Python 项目时，一般都会创建一个对应的虚拟环境来防止依赖冲突。所以到这你就会发现虚拟环境其实还是项目层面的，一个项目就对应一个虚拟环境，虚拟环境的这个设计说实话很鸡肋，不仅相同版本的包不能得到复用，还变相地提高了依赖管理的复杂度。\n\n吐槽完之后，我们来看看现阶段环境管理以及依赖管理的最佳实践。这个最佳实践包括不推荐的方式 venv/virtualenv+pip，以及两种推荐的方式：conda+pip，poetry。\n\n## venv/virtualenv+pip（不推荐）\n\nvenv 和 virtualenv 都是用来创建 python 虚拟环境的工具，不同的地方在于 venv 是 python3.3 后自带的轻量级虚拟环境创建工具，只能用于 python3；而 virtualenv 则需要另外安装，可以用于 py2 以及 py3，还有一些 venv 没有的功能（个人觉得可有可无）。那对于 python3.3 以后的项目，现在都推荐自带的 venv 了。venv 使用起来也很简单：\n\n1.  `python -m venv venv`命令的第一个 venv，是运行 venv 这个模块来创建一个虚拟环境。第二个 venv 是指虚拟环境的文件夹的名字，这个可以根据需要来修改。命令执行后，会在当前文件夹中，建立一个 venv 目录。 在这个 venv 目录中，会默认放置 python.exe、pip.exe 等与系统目录隔离的可执行文件和依赖。一般 venv 会放置在项目的根目录下。\n\n2.  进入到`venv/Scipts`文件夹，执行`activate`，可以激活当前的虚拟环境; 执行`deactivate`，可以停用当前虚拟环境\n\n3.  删除这个虚拟环境只需要删除掉项目根目录下的 venv 文件夹即可。\n\nvenv 没有管理虚拟环境的功能，这是因为虚拟环境的依赖都跟着项目走了（venv 文件夹在项目根目录下）。因此它足够的轻量。\n\npip 是一个轻量级包管理工具，安装 python 时都会自带 pip。pip 最常用的命令有用于下载依赖的`pip install deps`、`pip install -r requirements`和用于删除依赖的`pip uninstall deps`。很多人在一开始使用 pip 时还觉得简单好用，但在使用多了之后就深恶痛绝。pip 让人深恶痛绝的最主要的两个原因如下：\n\n1. 在命令行执行完`pip install deps`后下载的依赖不会同步到 requirements.txt 中，同样`pip uninstall deps`删除的依赖也不会删除 requirements 中声明的依赖。\n\n2. **`pip uninstall deps`只会删除`deps`这个直接依赖，而不会删除最初下载`deps`这个包引入的间接依赖**\n\n其中，第一点还可以使用`pip freeze > requirements.txt`来完成手动同步，第二点则是吐槽最多的点。这两点经常会引起依赖冲突，生产环境与本地开发环境不一致的情况出现。所以在使用 venv+pip 组合时，得遵循一个开发范式，包括但不限于以下几点\n\n1. 直接依赖需要写入 requirements.txt 中，使用`pip install -r requirements`来下载依赖，摈弃`pip install deps`，保证项目依赖相对清晰\n\n2. 发版时必须执行`pip freeze > requirements.txt`来保证本地与云端环境一致\n\n## conda+pip（推荐用于数据/AI 领域）\n\nconda 不仅是一个包管理工具库，还是一个环境管理工具，广泛用于科学计算领域，conda 命令也比较简单易用，使用 conda 的基本步骤如下：\n\n1. `conda create -n my-ns`创建一个隔离的虚拟环境\n\n2. `conda activate my-ns`，激活虚拟环境\n\n3. `conda install dps`下载依赖\n\n4. `conda remve deps` 卸载依赖，conda 在卸载依赖时会智能地处理包的依赖关系，将间接依赖中无用的包也会一并卸载\n\n5. `conda remove --name my-ns --all`删除虚拟环境\n\n其中，conda 创建的虚拟环境会维护一个与环境名同名的文件目录（类似 venv），但这个文件目录会统一放在一个地方，不会放在项目根目录下，这也让多个使用 conda 的项目“有了共享虚拟环境的可能”。那 conda 既能管理环境，又能管理依赖，是不是就能替代 pip？很遗憾还是不能，主要原因有两点：\n\n1. conda 主要用于数据科学领域，整个环境安装起来就比较重，环境初始时就自带了很多依赖，很多依赖是普通项目不需要的。此外，conda 下载依赖的速度也会慢一些。\n\n2. conda 的包与 pip 安装的包不一样，conda 包是二进制格式的，除了数据科学领域，很多 python 库都会在 PyPI 上发布，但不会在 Anaconda repository 上发布\n\n所以以上两点就限制了 conda 的应用领域，除了数据科学领域，conda 就只能作为一个环境管理的工具。那对于使用 conda 来管理环境的情况，pip 一般也是不可或缺的，使用时的注意点同上面的`venv+pip`\n\n## poetry（推荐）\n\n> 以下代码地址: [https://github.com/robocanic/poetry-fastapi-demo.git](https://github.com/robocanic/poetry-fastapi-demo.git)\n\n上面两种环境与依赖管理的方式都有一个比较棘手的点无法解决，那就是 pip 卸载依赖时无法删除引入的间接依赖，这很可能会导致**依赖臃肿，依赖冲突**等问题。\n\npoetry 是一个 python 依赖管理与环境管理的工具，它能够分析出哪些是直接依赖，哪些是间接依赖，在删除依赖时能够删掉无用的间接依赖，保持项目依赖的清爽。此外，poetry 还有指定模糊依赖，依赖快速升级等实用的功能，这让它在依赖管理方面直接甩了 pip 好几条街。至于环境管理，poetry 则是在 virtualenv 的基础上，增强了一些功能，如自动创建虚拟环境，集中/分离的环境管理等等。\n\npoetry 的命令会相对多一些，但常用的也只有几个，下面从建立一个新项目的流程来熟悉一下如何使用 poetry：\n\n#### 创建虚拟环境\n\n在创建文件夹后，执行`poetry init`，会有一系列互动的 command 来引导你创建`pyproject.toml`:\n\n```YAML\n PS D:\\code\\python-projects\\poetry-fastapi-demo>poetry init\n ​\n This command will guide you through creating your pyproject.toml config.\n ​\n Package name [poetry-fastapi-demo]:  \n Version [0.1.0]:  \n Description []:  A web project template using poetry and fastapi.\n Author [robocanic <robocanic@example.com>, n to skip]:  \n License []:  Apache 2.0\n Compatible Python versions [^3.11]:  ~3.10\n ​\n Would you like to define your main dependencies interactively? (yes/no) [yes] no\n Would you like to define your development dependencies interactively? (yes/no) [yes] no\n Generated file\n ​\n [tool.poetry]\n name = \"poetry-fastapi-demo\"\n version = \"0.1.0\"\n description = \"A web project template using poetry and fastapi.\"\n authors = [\"robocanic <robocanic@example.com>\"]\n license = \"Apache 2.0\"\n readme = \"README.md\"\n ​\n [tool.poetry.dependencies]\n python = \"~3.10\"\n ​\n ​\n [build-system]\n requires = [\"poetry-core\"]\n build-backend = \"poetry.core.masonry.api\"\n ​\n ​\n Do you confirm generation? (yes/no) [yes]\n```\n\n这里你在命令行输入的在后面都是可以通过修改`pyproject.toml`来同步的，因此一般我们都会快速地跳过这个阶段。生成的`pyproject.toml`如下所示：\n\n```YAML\n [tool.poetry] #项目信息\n name = \"poetry-fastapi-demo\"\n version = \"0.1.0\"\n description = \"A web project template using poetry and fastapi.\"\n authors = [\"robocanic <robocanic@example.com>\"]\n license = \"Apache 2.0\"\n readme = \"README.md\"\n ​\n [tool.poetry.dependencies]  #主要依赖\n python = \"~3.10\"\n ​\n ​\n [build-system]  # 构建工具\n requires = [\"poetry-core\"]\n build-backend = \"poetry.core.masonry.api\"\n ​\n```\n\n在创建`pyproject.toml`后，在项目根目录下执行`poetry env use python`，会创建一个该项目专有的虚拟环境：\n\n```YAML\n PS D:\\code\\python-projects\\poetry-fastapi-demo> poetry config virtualenvs.in-project true\n PS D:\\code\\python-projects\\poetry-fastapi-demo> poetry env use D:\\env\\python\\python.exe\n Creating virtualenv poetry-fastapi-demo in D:\\code\\python-projects\\poetry-fastapi-demo\\.venv\n Using virtualenv: D:\\code\\python-projects\\poetry-fastapi-demo\\.venv\n```\n\n这里我指定了 poetry 虚拟环境的路径放置在项目根目录的.venv 目录下，我觉得这样的项目组织方式更清晰。`poetry env use python` 这个命令默认使用系统环境变量中的 python，如果你想使用指定版本的 python，可以将 python 换成`path/to/your/py`。\n\n#### 添加依赖\n\n我们可以编辑`pyproject.toml`，添加指定的依赖，再先后执行`poetry lock` 和`poetry install`，`poetry lock`会解析`pyproject.toml`中的主要依赖与开发依赖以及间接依赖，选择合适的依赖版本，记录到 poetry.lock 这个文件中。poetry.lock 的作用类似于 requirements.txt，即“锁定”项目需要的依赖（包括直接依赖和间接依赖）版本。紧接着的`poetry install`就会根据 poetry.lock 中的内容去下载相应版本的依赖。\n\n```Toml\n[tool.poetry] # 项目信息\nname = \"poetry-fastapi-demo\"\nversion = \"0.1.0\"\ndescription = \"A web project template using poetry and fastapi.\"\nauthors = [\"robocanic <robocanic@example.com>\"]\nlicense = \"Apache 2.0\"\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]  # 主要依赖\npython = \"~3.10\"        # python版本>=3.10 且 <3.20\nfastapi = \"^0.115.0\"    # fastapi版本 >=0.115.0 且 <0.116.0\nsqlalchemy = \"^2.0.36\"  # sqlalchemy版本 >=2.0.36 且 < 3.0\npyyaml = \"^6.0.2\"       # pyyaml版本 >=6.0.2 且 < 7.0.0\n\n[tool.poetry.group.dev.dependencies]  # 开发依赖\npytest = \"^8.3.3\"       # pytest版本 >=8.3.3 且 < 9.0.0\n\n[build-system]  # 构建工具\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n```\n\n我们可以指定主要依赖和开发依赖，在发布部署时只打包主要依赖，这样就可以减小包的体积。同时我们可以指定依赖的版本范围，不同的符号有不同的指定范围策略，这一块可以参考 poetry 官方文档：[https://python-poetry.org/docs/dependency-specification/](https://python-poetry.org/docs/dependency-specification/)\n\n此外，我们也可以直接使用命令行`poetry add deps`来下载包，这个命令会自动地更新`pyproject.toml`以及`poetry.lock`文件，保证环境中的依赖与`pyproject.toml`中的的依赖的一致性。\n\n#### 删除依赖\n\n我们可以通过编辑`pyproject.toml`，删除对应的依赖声明，然后执行`poetry lock` 即可，poetry 会自动帮我们把依赖删除。我们也可以使用`poetry remove deps`来删除依赖。\n\npoetry 的这两种删除方式都会解析`deps`的无用的间接依赖，将其一并删除。\n\n#### 删除虚拟环境\n\n执行`poetry env remove poetry-demo`，即可删除虚拟环境。\n\n> 如果在 poetry 的配置中指定了`poetry config virtualenvs.in-project true`，虚拟环境维护的目录就会放在项目的根目录下。类似于 venv 的方式，因此这种情况下删除.venv 文件夹就等同于删除虚拟环境\n\n#### 查看依赖树\n\npoetry 中很实用的一个功能是它可以使用`poetry show --tree`来查看依赖关系，从而在依赖错误时能够更好地定位异常，更快速地解决问题。\n\n![poetry-show--tree](https://image.robocanic.com/notes/image-20241104154436296.png)\n\n#### 导出依赖\n\n理论上来说，有了 poetry 不再需要 pip 了，自然也不需要 requirements.txt 了，但是在后面的项目发布管理中我们会提到，当使用容器化部署时，我们希望我们的镜像尽可能地精简，我们的项目部署能尽可能快速。从精简镜像这个角度来看，poetry 对于我们的项目而言只是开发时依赖，在运行时我们希望只用最简单的依赖就能把项目跑起来。因此我们需要将 poetry.lock 中的依赖转化为 requirements.txt，这样部署时使用`pip install -r requirements.txt`下完依赖之后直接就能 run 起来项目。\n\npoetry 本身也支持导出环境内的依赖，使用`poetry export -f requirements.txt -o requirements.txt`就可以将环境中的所有依赖导出到 requirements.txt 中。\n\n#### 总结\n\npoetry 作为环境管理与依赖管理合二为一的银弹，在体验下来，除了数据科学/AI 领域的项目，我认为 poetry 是开发大多数 python 项目的最佳环境与依赖的管理方式。\n\n# 项目日志\n\n> 以下代码地址: [https://github.com/robocanic/poetry-fastapi-demo.git](https://github.com/robocanic/poetry-fastapi-demo.git)\n\n## 目标\n\n日志的重要性不言而喻，我们这里探讨的“项目日志”，更准确地来说是怎么使用日志能够得到我们想要的效果。通常，我们对于日志会有一些要求：\n\n1. 我们希望我们的日志能够显示出日志时间，日志等级(INFO, WARN, ERROR .....)，日志内容，所在线程，是由哪个组件/py 文件打印的......\n\n2. 对于以上日志信息，不管是自己项目中的还是依赖包中的，都有一个统一的格式打印出来\n\n3. 不仅要在控制台打印，还需要保存到文件中，以便后续排查错误时能够追溯。\n\n4. 更进一步，我们希望 ERROR 级别的日志能够单独放到一个文件中，每天的日志按照日期做一个切割分块......\n\n## 原理\n\n在阐明日志需要达到的效果之后，我们来看看 python 中的 logging 模块，这个模块是 python 自带的，我们可以先来试用一下：\n\n```Python\nimport logging\nlogging.info(\"this is a info log\")\nlogging.warning(\"this is a warning log\")\nlogging.error(\"this is a error log\")\nlogging.critical(\"this is a critical log\")\n\"\"\"\noutput:\nWARNING:root:this is a warning log\nERROR:root:this is a error log\nCRITICAL:root:this is a critical log\n\"\"\"\n```\n\n运行这个 python 文件会发现控制台并没有打印出 info 级别的日志，这是因为 logging 模块提供的日志记录函数所使用的日志器设置的日志级别是`WARNING`，因此只有`WARNING`级别的日志记录以及大于它的`ERROR`和`CRITICAL`级别的日志记录被输出了，而小于它的`INFO`级别的日志记录被丢弃了。\n\n我们可以观察每条日志，每个日志都由三部分构成：`日志级别:日志器名称:日志内容`，这是因为 logging 模块提供的日志记录函数所使用的日志器设置的日志格式默认为`%(levelname)s:%(name)s:%(message)s`。\n\n那自然我们会想到，可不可以通过设置 logging 的日志级别与日志格式，来生成我们想要的日志格式？进一步，我们可不可以调整日志输出的位置，同时输出在控制台和文件？\n\n在回答这个问题之前，我们可以来先简单看下 logging 模块涉及到的四个组件\n\n1. 日志器（Logger），提供了我们的代码可以使用的接口，即 log.info，log.warning，log.error 等\n\n2. 处理器（Handler），将 logger 创建的日志记录发送到合适的目的输出\n\n3. 过滤器（Filter），提供了更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录\n\n4. 格式器（Formatter），决定日志记录的输出格式\n\n这些组件的关系大致如下：日志器（Logger）需要通过处理器（Handler）将日志信息输出到目标位置（文件，控制台，网络等）。而处理器（Handler）可以设置过滤器（Filter）和格式器（Formatter）来对日志进行过滤和格式化，再输出到指定的目标位置。\n\n因此上面的问题也有了答案：通过调整 Logger，Handler，Filter，Formatter 的设置和组合关系，我们可以得到我们想要的日志。\n\n我们可以通过 3 种方式来配置 logging：\n\n1. 使用 Python 代码显式的创建 logger，handle，filter，formatter 并分别调用它们的配置函数\n\n2. 创建一个日志配置文件，然后使用`fileConfig()`函数来读取该文件的内容；\n\n3. 创建一个包含配置信息的 dict，然后把它传递给`dictConfig()`函数；\n\n## 实践\n\n这里我介绍一下第三种，其他两种可以自行研究。第三种我们通常会用一个 yaml/json 文件来描述配置，然后使用`yaml.load`读取日志配置文件，转化成 dict，进而传递给`dictConfig()`，完成 logging 的配置。\n\nyaml 形式的日志配置如下：\n\n```YAML\nversion: 1\nformatters:  # 定义格式器\n  default:   # 格式器名\n    format: '%(asctime)s - %(name)s - %(levelname)s -%(threadName)s%(thread)d - %(message)s'  # 日志格式：时间 - 日志器名 - 日志等级 - 线程名 线程ID - 日志内容\n    datefmt: '%Y-%m-%d %H:%M:%S'   # 时间格式\n    use_colors: true   # 使用颜色\nhandlers:     # 定义处理器\n  console:    # 处理器名\n    class: logging.StreamHandler  # 使用的handler\n    level: INFO    # 日志等级\n    formatter: default  # 使用的formatter名字\n    stream: ext://sys.stdout  # 输出到控制台\n  file:\n    class: logging.FileHandler\n    level: INFO\n    formatter: default\n    filename: app.log   # 输出到app.log\nloggers:         # 定义日志器\n  poetry_fastapi_demo:   # 日志器名称\n    level: INFO  # 日志等级\n    handlers:    # 使用的handler\n      - file\n      - console\n    propagate: false   # 是否传播到父logger再处理\n  poetry_fastapi_demo.routers:  # poetry_fastapi_demo的子logger\n    level: INFO\n    handlers:\n      - console\n      - file\n    propagate: false   # 是否传播到父logger再处理\n  uvicorn:\n    level: INFO\n    handlers:\n      - console\n      - file\n    propagate: false\nroot:            # 根日志器，所有没有归属的日志都会由root来处理\n  level: INFO\n  handlers:\n    - console\n    - file\n```\n\n其中，logger 是有层级结构的，logger 的名称是一个以'.'分割的结构，每个'.'后面的 logger 都是'.'前面的 logger 的 children。而 root 是一个特殊的 logger，它会捕捉没有被其他 logger 处理的日志消息，我们依赖的三方包打印的日志大部分都会由 root logger 捕获到进行处理，因此 root 是很重要的兜底 logger。\n\n在完善好`log.yaml`后，我们做一个验证，`poetry-fastapi-demo`项目结构如下：\n\n```Plain Text\n poetry-fastapi-demo/\n │\n ├── poetry_fastapi_demo/         \n │   ├── models             # 模型\n │   │   ├── __init__.py\n |   |   ├── user.py\n |   ├── routers             # 路由\n |   |   ├── __init__.py\n |   |   ├── user.py\n |   ├── tables              # 增删改查\n |   |   ├── __init__.py\n |   |   ├── user.py\n │   ├── __init__.py    \n │   └── main.py             # 主程序入口\n```\n\n`poetry_fastapi_demo/__init__.py`的内容如下，这里我们将 log.yaml 的路径以环境变量传入，然后使用`.dictConfig`完成日志的配置\n\n```Python\nimport logging.config\nimport os\nimport yaml\n\nlog_conf_path = os.environ.get(\"LOG_CONFIG\")\nwith open(log_conf_path, 'r', encoding='utf-8') as f:\n    dict_conf = yaml.safe_load(f)\nlogging.config.dictConfig(dict_conf)\n\n```\n\n`poetry_fastapi_demo/routers/user.py`的内容如下\n\n```Python\nimport logging\n\nfrom fastapi import APIRouter\n\nfrom poetry_fastapi_demo.models import User\nfrom poetry_fastapi_demo.tables import user_table\n\nlog = logging.getLogger(__name__)\nrouter = APIRouter()\n\n\n@router.get(\"\")\ndef get_all_users():\n    return user_table.get_all_users()\n\n\n@router.get(\"/{user_id}\")\ndef get_user(user_id: int):\n    return user_table.get_user_by_id(user_id)\n\n\n@router.post(\"\")\ndef create_user(user: User):\n    log.info(f\"Creating user: {user}\")\n    return user_table.add_user(user)\n\n\n@router.delete(\"/{user_id}\")\ndef delete_user(user_id: int):\n    log.warning(f\"Deleting user with id: {user_id}\")\n    return user_table.delete_user(user_id)\n\n\n@router.put(\"\")\ndef update_user(user: User):\n    log.warning(f\"Updating user: {user}\")\n    return user_table.update_user(user)\n\n```\n\n运行 main.py（记得设置环境变量），我们可以在控制台中看到日志输出，同时在项目的根目录下也会生成 app.log 日志文件，记录运行的日志。\n\n![app-log](https://image.robocanic.com/notes/app-log.png)\n\n我们发起一个新增 user 的请求：\n\n```Shell\ncurl --request POST \\\n  --url http://localhost:8080/api/v1/user \\\n  --header 'content-type: application/json' \\\n  --data '{\n  \"id\": 6,\n  \"name\": \"robb\",\n  \"email\": \"robocanic@gmail.com\",\n \"password\": \"xclkjva\",\n  \"role\": \"user\"\n}'\n```\n\n我们可以看到日志显示如下：\n\n![create-user-log](https://image.robocanic.com/notes/create-user-log.png)\n\n到这，基本的日志需求就满足了，我们无需调整代码，仅通过调整配置文件就能适时调整日志。那对于目标中的第 4 点“我们希望 ERROR 级别的日志能够单独放到一个文件中，每天的日志按照日期做一个切割分块”，相信你可以举一反三\n\n# 项目测试\n\n> 以下代码地址: [https://github.com/robocanic/poetry-fastapi-demo.git](https://github.com/robocanic/poetry-fastapi-demo.git)\n\n一个项目可靠的项目离不开完备的测试，测试一般分为单元测试和接口测试，单测针对某个函数或者某个模块，测试返回的参数是否符合预期，而接口测试是针对于 HTTP（RPC）接口，测试的是某一块功能的完备性。\n\n这里我们讨论的仅限于单元测试。在 python 中，单元测试可以使用 unittest 模块和 pytest，uninttest 是 python 自带的测试模块，而 pytest 是一个第三方模块，在兼容 unittest 的基础上，增加了集成测试的功能，方便我们进行批量的单元测试，与 CI 进行结合。因此后文中使用 pytest 来进行讲解。\n\npytest 可以自动递归指定路径下的所有文件，只要符合`test_`或者`_test`开头的 py 文件都会被识别为测试用例文件。都会在测试计划中执行。\n\n## 实践\n\n在使用 pytest 之前需要使用 pip 或者 poetry 下载，我们可以将 pytest 下载到`dev`分组的依赖，也就是开发时依赖（如`poetry add pytest --group dev`），以便生产部署时精简掉开发时依赖。\n\n项目目录结构如下：\n\n```Plain Text\n poetry-fastapi-demo/\n │\n ├── poetry_fastapi_demo/   # 程序主包    \n │   ├── models/             # 模型\n │   │   ├── __init__.py\n |   |   ├── user.py\n |   ├── routers/             # 路由\n |   |   ├── __init__.py\n |   |   ├── user.py\n |   ├── tables/              # 增删改查\n |   |   ├── __init__.py\n |   |   ├── user.py\n │   ├── __init__.py    \n │   └── main.py             # 主程序入口\n ├── tests/                  # 测试文件\n |   ├── test_user_table.py    # 模型\n ......\n```\n\n其中，`poetry_fastapi_demo/tables/user.py`内容如下：\n\n```Python\nfrom typing import Optional, List\n\nfrom poetry_fastapi_demo.models import User\n\nuser_list = [\n    User(\n        id=1,\n        name=\"Chris\",\n        email=\"chris@gmail.com\",\n        password=\"pso3sd5xv\",\n        role=\"admin\"\n    ),\n    User(\n        id=2,\n        name=\"Jon\",\n        email=\"jon@gmail.com\",\n        password=\"rthdfwe5sdf\",\n        role=\"user\"\n    ),\n    User(\n        id=3,\n        name=\"Arya\",\n        email=\"arya@gmail.com\",\n        password=\"ndddrwe42\",\n        role=\"user\"\n    )\n\n]\n\n\nclass UserTable:\n\n    def get_all_users(self) -> List[User]:\n        return user_list\n\n    def get_user_by_id(self, user_id: int) -> Optional[User]:\n        for user in user_list:\n            if user.id == user_id:\n                return user\n        return None\n\n    def update_user(self, user: User) -> bool:\n        for u in user_list:\n            if u.id == user.id:\n                u.name = user.name\n                u.email = user.email\n                u.password = user.password\n                u.role = user.role\n                return True\n        return False\n\n    def delete_user(self, user_id: int) -> bool:\n        for i, u in enumerate(user_list):\n            if u.id == user_id:\n                del user_list[i]\n                return True\n        return False\n\n    def add_user(self, user: User) -> bool:\n        for u in user_list:\n            if u.id == user.id:\n                return False\n        user_list.append(user)\n        return True\n\n\nuser_table = UserTable()\n\n```\n\n测试案例`test_user_table.py`内容如下：\n\n```Python\nfrom poetry_fastapi_demo.models import User\nfrom poetry_fastapi_demo.tables import user_table\n\n\nclass TestUserTable:\n\n    def test_get_all(self):\n        user_table.get_all_users()\n\n    def test_get_by_id(self):\n        user = user_table.get_user_by_id(1)\n        assert user.name == \"Chris\"\n\n    def test_update_user(self):\n        user = user_table.get_user_by_id(1)\n        user.name = \"Chris2\"\n        assert user_table.update_user(user) is True\n        assert user_table.get_user_by_id(1).name == \"Chris\"   # 故意写错\n\n    def test_delete_user(self):\n        assert user_table.delete_user(1) is True\n        assert user_table.get_user_by_id(1) is None\n\n    def test_add_user(self):\n        result = user_table.add_user(User(\n            id=4,\n            name=\"robb\",\n            email=\"robb@gmail.com\",\n            password=\"loqjwnd[as;\",\n            role=\"admin\"\n        ))\n        assert result is True\n        assert user_table.get_user_by_id(4).name == \"robb\"\n\n\n\n```\n\n然后我们在项目根目录执行`pytest tests/ -v`，输出如下：\n\n![py-test](https://image.robocanic.com/notes/py-test.png)\n\npytest 会递归地在 tests 文件夹下寻找以`test_`或`_test`开头的 py 文件，在 py 文件中，会寻找以`test_`或`_test`开头的函数或者类，对于我们这个案例来说，一共有 5 个测试用例，在输出中我们也能详细地查看到通过和失败的具体用例，错误的原因，执行的时间等等。此外，pytest 还有其他的功能（可参考[https://learning-pytest.readthedocs.io/zh/latest/index.html](https://learning-pytest.readthedocs.io/zh/latest/index.html)），如测试前和测试后的预处理和后处理，使用插件生成测试报告等，这里就算抛砖引玉给大家。\n\n## CI 集成\n\n按照开发流程来说，我们在本地开发并单测完后，会发布到测试环境中进行进一步地调试验证。有时候我们修改完代码后忘记执行对应的单测就提交了，然后在调试中才发现了错误，然后又回炉重造。为了尽量减少修改小错误反复发布的时间，我们可以将自动化测试集成到 gitlab pipeline（使用参考[https://docs.gitlab.com/ee/ci/pipelines/](https://docs.gitlab.com/ee/ci/pipelines/)）或 github actions(使用参考[https://docs.github.com/zh/actions](https://docs.github.com/zh/actions))。\n\n#### github actions\n\n```YAML\nname: Python ci           # workflow名字\n\non:                            # 触发条件，push或merge到dev中触发\n  push:\n    branches: [ \"dev\" ]\n  pull_request:\n    branches: [ \"dev\" ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest    # 跑在ubuntu虚拟机上\n    strategy:                 # 执行策略\n      fail-fast: false\n      matrix:\n        python-version: [\"3.10\"]\n\n    steps:                    # 执行步骤\n    - uses: actions/checkout@v4    # 使用checkout这个已有的action来初始化git环境\n    - name: Set up Python ${{ matrix.python-version }}   # 使用setup-python来初始化python环境\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}     # 指定python版本\n    - name: Set up Poetry                 # 使用setup-poetry这个已有的action来初始化poetry\n      uses: Gr1N/setup-poetry@v9\n    - name: Install dependencies         # 使用poetry下载依赖，因为是在一个单独的虚拟机/容器中，所以无需创建虚拟环境\n      run: |\n        poetry config virtualenvs.create false\n        poetry lock\n        poetry install --all-extras\n    - name: Test with pytest            # 使用pytest执行集成测试\n      env:\n        LOG_CONFIG: ./log.yaml\n      run: |\n        pytest tests/ -v\n```\n\n我们把上面这个 yml 命名为 ci.yml，并放置在项目根目录.github/workflows 目录下，然后 github 会自动检测到 workflow 的存在并按照 yml 中定义的步骤依次执行。然后我们在 dev 分支 push 到远程，然后我们会在 actions 中发现历史执行/正在执行的 workflow。\n\n![github-action](https://image.robocanic.com/notes/github-action.png)\n\n我们点进某一个 workflow 可以看到 job 的执行结果是成功还是失败：\n\n![github-workflow-job](https://image.robocanic.com/notes/github-workflow-job.png)\n\n进一步，我们进入 build 这个 job，我们可以看到集成测试的信息：\n\n![job-test](https://image.robocanic.com/notes/job-test.png)\n\n此外，github actions 还可以探索更多的玩法，比如：当 job 失败了发送邮件到自己的邮箱提示流水线失败了，当 job 失败了回滚到上一个 commit 的状态等等，这些就都留给你去探索了\n\n#### gitlab pipeline\n\n```YAML\nstages:\n  - automatic_test_dev\n\nautomatic_test_job_dev:   # 我们只在测试环境执行自动化测试，生产环境为了加快发布速度，不执行测试\n  image: sunpeek/poetry:py3.10-slim    # 使用带poetry的python镜像\n  stage: automatic_test_dev\n  only:\n    - dev                 # 只有dev分支发生变化（merge或push）时触发\n  tags:                   # 匹配python标签的runner才运行\n    - python\n  script:                 # 执行脚本\n    - poetry config virtualenvs.create false  # 在容器中，不用创建虚拟环境\n    - poetry lock     # 锁定依赖版本\n    - poetry install  # 下载依赖\n    - pytest tests/   # 执行测试\n```\n\n我们将这个 yml 文件命名为.gitlab-ci.yml，然后 push 到 dev 分支，就会触发 pipeline。gitlab pipeline 本质上和 github actions 是一样的，都是声明式的流水线，因此这里就不再赘述，你可以查阅官方文档（[https://docs.gitlab.com/ee/ci/pipelines/](https://docs.gitlab.com/ee/ci/pipelines/)）来组合出你的 pipeline。\n\n# 项目发布管理\n\n当我们项目在本地运行 ok，测试也 ok 后，该考虑发布到各个环境（联调，测试，生产等）。这个过程根据项目的属性分为两类，一类是二方包的发布，另一类则是正经应用发布。\n\n在谈这两类发布之前，我们先来确认发布过程中我们想要达到的目标（要求）：\n\n1. 对于二方包发布，我们希望它在本地就能够发布 beta 版本，以便于快速验证。此外，正式版本的发布，我们希望能够集成到 CI 中。\n\n2. 对于应用发布，我们希望它发布时足够迅速，以便在出现问题时快速推送补丁解决问题。\n\n3. 无论是二方包还是应用发布，我们希望在发布的时候自动执行集成测试（生产除外），生成一份测试报告。\n\n## 二方包发布\n\n二方包的发布根据我们使用的项目环境和依赖管理工具可以划分为两类，第一类是使用 conda+pip 或者 venv+pip 后的发布流程，另一类是使用 poetry 后的发布流程。\n\n### setuptools+twine\n\n发布分为打包和推送两个步骤，setuptools 负责将我们的 python 代码打包，而 twine 则负责将打包后的 pkg 推送到 PyPI 仓库。\n\nsetuptools 是很多年来 python 打包的首选工具，我们首先需要执行`pip install setuptools`来下载这个工具。然后在项目根目录下新建一个`setup.py`文件来写打包时的配置，一个 setup.py 如下所示：\n\n```Python\nfrom setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\", encoding=\"UTF-8\") as fh:\n    long_description = fh.read()\nversion= os.environ.get(\"GITHUB_REF_NAME\", \"0.0.1b0\") # 包的版本，GITHUB_REF_NAME是github tag name的环境变量，代表代码分支TAG；0.0.1b0 是0.0.1-BETA0的缩写\nsetup(\n    name='poetry_fastapi_demo',  # 包名\n    version=version,     # 构建版本\n    author='robocanic',  # 作者\n    author_email='robocanic@gmail.com',\n    description='A web project template using poetry and fastapi.',   # 描述\n    long_description=long_description,  # 长的描述\n    long_description_content_type=\"text/markdown\",\n    url='https://github.com/robocanic/poetry-fastapi-demo',\n    packages=find_packages(),  # 打包所有包目录\n    classifiers=[\n        \"Development Status :: 2 - Beta\"    # 开发阶段\n        \"Programming Language :: Python :: 3.10\",   # 使用的语言\n        \"Operating System:: OS Independent\",   # 不限定OS\n    ],\n    install_requires=[     # 该项目的依赖，别人下载我们的包时会自动下载这些依赖\n        \"fastapi==0.115.0\",\n        \"sqlalchemy==2.0.36\",\n        \"pyyaml==6.0.2\",\n        \"uvicorn=0.32.0\"\n    ],\n    python_requires='>=3.10'    # python要求\n)\n\n```\n\n`setup.py`使用代码的方式声明了我们打包的配置，包括构建版本，直接依赖，python 版本要求等等。接下来我们只需要执行`python setup.py sdist`就能将项目打包成.tar.gz 文件，当然我们也可以指定打包格式为`bdist_wheel`，打包成.wheel 文件。打包后的文件默认放在 dist 目录下。\n\n接下来我们需要使用 twine 上传到 PyPI 仓库，twine 也是一个 python 包，在使用之前需要通过`pip install twine`下载。然后执行`twine upload dist/*`就上传到了仓库。\n\n> 如果要上传到私有的 PyPI 仓库，则需要配置上传的用户名和密码，同时在上传时需要指定私有仓库。最便捷的方法是在 root 目录下新增一个.pypirc 文件，文件内容为：\n\n    [distutils]\n\n\n    index-servers = private-pypi\n\n    [nexus]\n\nrepository=https://private-pypi.com/simple/\nusername=foo\npassword=bar\n然后使用`twine upload -r private-pypi dist/*` 来上传到指定的私有仓库\n\n### poetry\n\n如果你使用了 poetry，那 poetry 就自带了打包和上传的功能。poetry 打包非常简单，只需要执行`poetry build`，它就会参照`pyproject.toml`中的配置进行打包。打包生成的文件默认也会放在 dist 目录下。\n\n然后我们执行`poetry publish`就可以发布到 PyPI 仓库\n\n> 同样，若要使用 poetry 上传到私有的 PyPI 仓库。也需要额外的配置：\n> `poetry config repositories.foo-pub [https://pypi.example.org/legacy/](https://pypi.example.org/legacy/)` > `poetry config http-basic.foo-pub <username> <password>` > `poetry publish --repository foo-pub`\n\n### CI 集成\n\n很多时候我们发现了特定版本包的一些问题，我们想要这个特定版本的包对应的源代码，并在此基础上加一个补丁。因此我们需要将我们包的版本和我们代码的特定分支一一对应。通过人工完成这个过程是可行的，我们只需要在每次打包前/后 加一个 commit，推到远程仓库，打一个 tag 就能对应起来。但是这件重复的工作我们时常会忘记，这个重复的工作可以交给一个单独的程序来做吗？答案当然是肯定的，毕竟程序员最习惯的事就是将重复的工作程序化，复杂的工作流程化。gitlab pipeline/github actions 能够通过我们声明的 yml 文件来完成这个过程。\n\n#### gitlab pipeline\n\n一个使用 poetry 的二方包发布的 gitlab pipeline 文件可以如下（集成了单测）：\n\n```YAML\nimage: sunpeek/poetry:py3.10-slim   # 需要带有poetry的python镜像\n\nstages:\n  - automatic_test\n  - package_build_push\n\n\nautomatic_test_job:   #\n  stage: automatic_test\n  only:\n    - dev\n  tags:\n    - golang\n  script:\n    - poetry config virtualenvs.create false  # 在容器中，不用创建虚拟环境\n    - poetry lock     # 锁定依赖版本\n    - poetry install  # 下载依赖\n    - pytest tests/   # 执行测试\n\n\npackage_build_push_job:\n  stage: package_build_push\n  only:    # 触发条件：只有打tag之后才会触发该job\n    - tags\n  script:\n    - poetry config repositories.foo-pub https://pypi.example.org/legacy/   # 添加发布仓库\n    - poetry config http-basic.foo-pub $FOO_USERNAME $FOO_PASSWORD          # 添加发布仓库的用户名密码，通过流水线环境变量可以设置\n    - sed -i \"s/^version = \\\".*\\\"/version = \\\"$CI_COMMIT_TAG\\\"/\" pyproject.toml  # 修改构建版本，与TAG一致\n    - poetry publish --build  --repository foo-pub   # 打包并推送\n```\n\n简单来说，gitlab 在我们打上一个 tag 之后，会起一个 runner 执行这个 yml 文件的 script（具体过程可自行了解）。因此当我们想要发布一个版本时，推到镜像仓库后，打一个 tag，gitlab pipeline 就会进行打包，推送，并且推送到仓库的包的版本和我们的 TAG 是严格对应的。\n\n#### github actions\n\n```YAML\nname: Release package           # workflow名字\n\non:                            # 触发条件，新建tag时触发\n  push:\n    tags:\n      - '*'                  # 任意标签都会触发工作流\n\njobs:\n  pkg:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4    # 使用checkout这个已有的action来初始化git环境\n      - name: Set up Python ${{ matrix.python-version }}   # 使用setup-python来初始化python环境\n        uses: actions/setup-python@v3\n        with:\n          python-version: ${{ matrix.python-version }}     # 指定python版本\n      - name: Set up Poetry                 # 使用setup-poetry这个已有的action来初始化poetry\n        uses: Gr1N/setup-poetry@v9\n      - name: Extract version\n        id: extract_version\n        run: |\n          VERSION=\"${GITHUB_REF#refs/tags/}\"\n          echo \"VERSION=${VERSION}\" >> $GITHUB_ENV\n      - name: Replace version\n        run: |\n          sed -i \"s/^version = \\\".*\\\"/version = \\\"${{ env.VERSION }}\\\"/\" pyproject.toml\n      - name: Build Package        # 打包\n        run: |\n          poetry config virtualenvs.create false\n          poetry build\n      - name: Publish Package    # 发布\n        env:\n          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}    # 提前定义pypi的 api token\n        run: |\n          poetry config pypi-token.pypi $PYPI_API_TOKEN\n          poetry publish\n\n\n```\n\n#### 总结\n\npoetry 作为集环境管理，依赖管理，打包发布一体的工具，虽然有上手难度，但从长期来看是值得使用的，强烈推荐。gitlab pipeline/github actions 的使用倒是可以看自身需求，如果项目比较小，发布次数少，不要求代码分支与包的版本严格对应，是可以不用的。此外，我们在使用 gitlab pipeline 时也可以适当没那么“严格”，比如，为了图方便我们可以在本地发布非正式版本，而正式版本则走 pipeline，保证正式版本的稳定。\n\n## 应用发布\n\n应用发布即让我们的应用运行在机器上，对外提供服务。应用的运行形态可以基本分为容器/虚拟机，后文中都基于使用更广泛的容器来进行说明。\n\n应用发布大体上分为两个阶段，一个是镜像的打包与推送，另一个是镜像拉取和启动容器。其中，镜像推送，镜像拉取和启动容器对于每一种应用程序都是大差不差的，而镜像打包则是差异比较大的，所以这里我就镜像打包展开来讲。\n\n### 镜像打包\n\n镜像的大小关乎到推送和拉取的效率，因此我们要尽可能地减小镜像大小。python 的基础镜像中，`slim`版本的基础镜像移除了不必要的系统个工具和库，因此基础镜像我们选择`slim`版本（127MB 左右）。\n\n此外，我们如果使用了 poetry 来作为依赖管理的工具，那在打包时就有两种选择：第一种是直接将 poetry 打到基础镜像中，第二种是使用 multi-stage build，即在第一个阶段先下载 poetry，导出依赖到 requirements.txt，然后在第二个阶段使用 pip install 来下载依赖。multi-stage build 虽然最终的镜像里不包含 poetry，但是第一个阶段下载 poetry 和导出依赖都需要时间，而第一种方法中直接将 poetry 打到基础镜像中，镜像大小也只增加了不到 100MB，在可以接受的范围内，因此我更推荐第一种。\n\n确定好镜像策略后，我们来看看 Dockerfile 长啥样（基础镜像的打包就是在 python 基础镜像的上面使用 pip 下载 poetry 即可，不再赘述）：\n\n```Dockerfile\n# 包含poetry的python基础镜像\nFROM sunpeek/poetry:py3.10-slim\nLABEL maintainer=\"robocanic@gmail.com\"\n# Keeps Python from generating .pyc files in the container\nENV PYTHONDONTWRITEBYTECODE=1\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED=1\n\n# mv source code to a specific directory\nWORKDIR /appruntime\nCOPY . /appruntime\n\n# no need to create virtual env\nRUN poetry config virtualenvs.create false\n# analyze deps\nRUN poetry lock\n# Install deps\nRUN poetry install\n\n# Creates a non-root user with an explicit UID and adds permission to access the /appruntime folder\nRUN adduser -u 5678 --disabled-password --gecos \"\" appuser && chown -R appuser /appruntime\nUSER appuser\n\nCMD [\"uvicorn\", \"poetry_fastapi_demo.main:app\", \"--host=0.0.0.0\", \"--port=8080\", \"--log-config=/appruntime/log.yaml\"]\n```\n\n### CI 集成\n\n如果使用了 gitlab pipeline/github actions，那我们可以将镜像打包，镜像推送都结合到 CI 中\n\n#### gitlab pipeline\n\n```YAML\nvariables:    # 变量\n  IMAGE_NAME: $CI_PROJECT_PATH\n  PROJECT_NAME: $CI_PROJECT_NAME\n\n\nstages:\n  - automatic_test_dev\n  - package_build_push_dev\n  - deploy_dev\n\nautomatic_test_job_dev:   # 我们只在联调/测试时执行自动化测试，生产环境为了加快发布速度，不执行测试\n  image: sunpeek/poetry:py3.10-slim    # 使用带poetry的python镜像\n  stage: automatic_test_dev\n  only:\n    - dev\n  tags:\n    - python\n  script:\n    - poetry config virtualenvs.create false  # 在容器中，不用创建虚拟环境\n    - poetry lock     # 锁定依赖版本\n    - poetry install  # 下载依赖\n    - pytest tests/   # 执行测试\n\npackage_build_push_job_dev:\n  image: docker:27.3  # 使用docker镜像\n  stage: package_build_push_dev\n  only:\n    - dev\n  tags:\n    - python\n  artifacts:\n    paths:\n      - BUILDTIME   # 缓存构建时间文件供下一个job使用\n  script:\n    - date +'%Y%m%d%H%M' > BUILDTIME  # 将构建时间写到文件\n    - export IMAGE_TAG=dev-$(cat BUILDTIME)-$CI_COMMIT_SHORT_SHA # 镜像tag  dev-[年月日时分]-[commit id前八位]\n    - export IMAGE_NAME=$(echo $IMAGE_NAME | tr 'A-Z' 'a-z')  # 把gitlab的目录和项目名小写作为镜像名\n    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD\n    - docker build  -t $IMAGE_NAME:$IMAGE_TAG .\n    - docker push $IMAGE_NAME:$IMAGE_TAG\n```\n\n#### github actions\n\n```YAML\nname: Release deploy           # workflow名字\n\non:                            # 触发条件，新建tag时触发\n  push:\n    tags:\n      - '*'                   # 任意标签都会触发工作流\n\njobs:\n  pkg:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up QEMU       # 初始化qemu\n        uses: docker/setup-qemu-action@v3\n      - name: Set up Docker Buildx   # 初始化buildx\n        uses: docker/setup-buildx-action@v3\n      - name: Login to Docker Hub   # 登录dockerhub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n      - name: Extract version   # 提取tag\n        id: extract_version\n        run: |\n          VERSION=\"${GITHUB_REF#refs/tags/}\"\n          echo \"VERSION=${VERSION}\" >> $GITHUB_ENV\n      - name: Build and push   # 构建镜像并推送\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: ${{ github.repository }}:${{ env.VERSION }}\n```\n\n### 总结\n\n如果你使用 docker compose/docker swarm/k8s 等基础设施，你还可以结合 docker/kubectl 或者 docker api/k8s api 来进行 CD，从而实现应用从发布到部署完全流水线化。\n\n应用的发布在不同的团队，不同的公司是有着不同的流程和偏好的，以上只是我提供的一种实现参考，但是无论是什么发布流程，考虑的重点其实是大差不差的：\n\n1. 镜像大小要尽可能压缩\n\n2. 发布要做到可回滚，可灰度\n\n3. 发布流程中的信息要可追溯\n\n4. 发布中用到的组件复用度要高\n\n5. ......\n\n按照这些个思路去编排发布流水线，相信你能得到一个理想中的流水线。\n","slug":"Python工程化不完全指南","published":1,"updated":"2024-12-26T14:31:55.380Z","_id":"cm521ppgw00000kwbdm7l44jx","comments":1,"layout":"post","photos":[],"content":"<p>Python 作为一个弱类型语言，似乎从诞生之初就被很多人觉得这是一个很随便的语言，构建一个可靠的 Python 项目是一个很难的事情。事实也确实如此，随着 AI 的爆发，入坑 Python 的人越来越多，但对 Python 的诟病却只增不减。不过，Python 工程化还是在诟病中曲折前进的，到今天为止，尽管还存在着一些混乱，Python 工程化的标准趋于基本完善。本篇将从“过来人”的视角，由浅入深地讲述 python 工程化的方方面面，提供一个最佳实践供你参考。</p>\n<h1 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h1><p>Python 作为脚本语言，一个.py 文件能放在任何地方运行，但是<strong>一个清晰的目录结构不仅易于排查问题，更方便别人读懂我们的代码，更加优雅</strong>。Python 由于其应用广泛，不同类型的 Python 项目也有着不同的目录结构规约。这里我选取普通应用工程和数据&#x2F;AI 工程这两种最为广泛的类型进行说明。</p>\n<h2 id=\"普通应用工程\"><a href=\"#普通应用工程\" class=\"headerlink\" title=\"普通应用工程\"></a>普通应用工程</h2><p>假定我们的项目名为<code>robocanic-project</code>，普通应用工程最常用的目录结构风格如下所示：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> robocanic-project/</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── robocanic_project/      # 主包，我们的核心代码都在这里面</span><br><span class=\"line\"> │   ├── __init__.py         # 包初始化文件</span><br><span class=\"line\"> │   ├── module1.py          # 模块1</span><br><span class=\"line\"> │   ├── module2.py          # 模块2</span><br><span class=\"line\"> │   └── main.py             # 主程序入口</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── tests/                  # 测试目录</span><br><span class=\"line\"> │   ├── __init__.py</span><br><span class=\"line\"> │   ├── test_module1.py</span><br><span class=\"line\"> │   └── test_module2.py</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── requirements.txt        # 依赖文件</span><br><span class=\"line\"> ├── setup.py                # 安装脚本</span><br><span class=\"line\"> ├── README.md               # 项目说明</span><br><span class=\"line\"> └── .gitignore              # Git忽略文件</span><br></pre></td></tr></table></figure>\n\n<p>那上面这种还比较宽泛，如果以前后端分离的后端 Web 应用这种比较常见的项目为例，目录结构可以是下面这样的：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">robocanic-project/</span><br><span class=\"line\">├── robocanic_project/                     # 主应用程序目录</span><br><span class=\"line\">│   ├── __init__.py          # 将该目录标识为包，通常初始化 FastAPI 实例</span><br><span class=\"line\">│   ├── main.py              # 主文件，包含应用实例和路由</span><br><span class=\"line\">│   ├── api/                 # API 路由目录</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── v1/              # API 的 v1 版本（可选分版本目录）</span><br><span class=\"line\">│   │   │   ├── __init__.py</span><br><span class=\"line\">│   │   │   ├── routes/   # 具体的 API 端点</span><br><span class=\"line\">│   │   │   │   ├── __init__.py</span><br><span class=\"line\">│   │   │   │   ├── user.py  # 用户相关的 API 路由</span><br><span class=\"line\">│   │   │   │   └── item.py  # 其他模块（如商品）的 API 路由</span><br><span class=\"line\">│   │   │   └── ...          # 更多 API 路由</span><br><span class=\"line\">│   ├── core/                # 核心配置模块</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── config.py        # 配置文件，包含数据库连接、第三方服务配置等</span><br><span class=\"line\">│   │   ├── security.py      # 安全相关的设置，例如 OAuth2、JWT</span><br><span class=\"line\">│   ├── models/              # 数据库模型</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── user.py          # 用户模型</span><br><span class=\"line\">│   │   └── item.py          # 其他数据模型</span><br><span class=\"line\">│   ├── crud/                # 增删改查操作的封装</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── user.py          # 用户的 CRUD 操作</span><br><span class=\"line\">│   │   └── item.py          # 其他数据的 CRUD 操作</span><br><span class=\"line\">│   ├── db/                  # 数据库初始化及连接</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── base.py          # 基础的数据库模型</span><br><span class=\"line\">│   │   └── session.py       # 数据库会话（SQLAlchemy 会话）</span><br><span class=\"line\">│   ├── tests/               # 测试目录</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── test_user.py     # 用户相关的测试文件</span><br><span class=\"line\">│   │   └── test_item.py     # 其他模块的测试文件</span><br><span class=\"line\">│   ├── utils/               # 工具函数目录</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── hashing.py       # 用于密码加密/解密等实用工具</span><br><span class=\"line\">    ├── alembic/             # 数据库迁移工具 Alembic 相关文件（如果使用）</span><br><span class=\"line\">│   │   ├── versions/        # 每个迁移文件都保存在这个目录中</span><br><span class=\"line\">│   │   ├── env.py           # Alembic 环境配置文件</span><br><span class=\"line\">│   │   ├── README           # Alembic 说明</span><br><span class=\"line\">│   │   └── script.py.mako   # Alembic 脚本模板</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── .env                     # 环境变量文件（敏感信息，不应提交到版本控制）</span><br><span class=\"line\">├── .gitignore               # Git 忽略文件列表</span><br><span class=\"line\">├── requirements.txt         # 依赖包列表（如果使用 pip）</span><br><span class=\"line\">├── setup.py                 # 安装脚本（如果使用setuptools）</span><br><span class=\"line\">├── pyproject.toml           # 项目元数据及依赖管理（如果使用 poetry）</span><br><span class=\"line\">├── README.md                # 项目说明文件</span><br><span class=\"line\">└── Dockerfile               # Docker 配置文件（如果使用容器化）</span><br></pre></td></tr></table></figure>\n\n<p>一个以 FastAPI 为基础 Web 框架的项目的目录结构如上所示。其中，除了<code>api</code>，<code>models</code>，<code>crud</code>，<code>utils</code>这类见名知意的目录，还有一个不太常见的<code>alembic</code>这个目录，alembic 其实是数据库迁移（<strong>Database Migration</strong>）的工具。而数据库迁移就是指在我们的应用开发过程中，当涉及到需要修改 ORM 对应的数据库结构（例如表、字段、索引等）时，引入的一套逐步演进数据库的状态，使其与应用代码保持一致的工具。这套工具一般是半自动或者全自动的，可以大大降低手动操作数据库带来的风险。</p>\n<h2 id=\"数据-AI-工程\"><a href=\"#数据-AI-工程\" class=\"headerlink\" title=\"数据&#x2F;AI 工程\"></a>数据&#x2F;AI 工程</h2><p>而对于数据科学，模型训练，科学计算这类项目，则有着另一套完全不一样的目录风格：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">robocanic-project/</span><br><span class=\"line\">├── data/</span><br><span class=\"line\">├── notebooks/</span><br><span class=\"line\">├── scripts/</span><br><span class=\"line\">├── requirements.txt</span><br><span class=\"line\">└── README.md</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上是比较简略的目录结构，展开来看：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">robocanic-project/</span><br><span class=\"line\">├── data/</span><br><span class=\"line\">│   ├── raw/                  # 原始数据（未处理的数据）</span><br><span class=\"line\">│   ├── processed/            # 处理后的数据（清洗后的数据、特征工程后的数据）</span><br><span class=\"line\">│   └── external/             # 外部数据源（可能是API或第三方提供的数据）</span><br><span class=\"line\">│</span><br><span class=\"line\">├── notebooks/                # Jupyter Notebooks（探索性分析和初步模型）</span><br><span class=\"line\">│   ├── 01_data_exploration.ipynb  # 数据探索</span><br><span class=\"line\">│   ├── 02_data_cleaning.ipynb     # 数据清理</span><br><span class=\"line\">│   └── 03_model_training.ipynb    # 模型训练</span><br><span class=\"line\">│</span><br><span class=\"line\">├── scripts/                  # 数据处理和模型训练的Python脚本</span><br><span class=\"line\">│   ├── data_preprocessing.py  # 数据预处理脚本</span><br><span class=\"line\">│   ├── train_model.py         # 模型训练脚本</span><br><span class=\"line\">│   └── evaluate_model.py      # 模型评估脚本</span><br><span class=\"line\">│</span><br><span class=\"line\">├── models/                   # 保存的模型（训练好的模型、标记化文件等）</span><br><span class=\"line\">│   └── model_v1.pkl           # 保存的模型文件</span><br><span class=\"line\">│</span><br><span class=\"line\">├── reports/                  # 项目报告与结果展示</span><br><span class=\"line\">│   ├── figures/              # 图表和可视化结果</span><br><span class=\"line\">│   └── final_report.pdf      # 最终报告或结果总结</span><br><span class=\"line\">│</span><br><span class=\"line\">├── requirements.txt          # 项目所需的依赖库列表</span><br><span class=\"line\">├── environment.yml           # Conda 环境配置文件</span><br><span class=\"line\">├── README.md                 # 项目说明文件</span><br><span class=\"line\">└── .gitignore                # Git忽略文件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看出数据&#x2F;AI 项目和普通的应用还是有很大区别的。<strong>数据&#x2F;AI 项目更多是从数据的流向来进行目录结构的划分，从数据采集 → 数据处理 → 模型训练（数据聚合）→ 模型评估（数据评估）→…… 而普通应用项目则更多是按功能模块来划分，比如 MVC 的划分模式，以 APP 为核心的划分模型等。</strong></p>\n<p>总的来说，Python 工程的目录还是比较灵活的，我们在构建我们自己的项目目录时可以不拘泥于固定的目录结构，但也要遵循上面提到的一些基本规律，这样别人上手我们的项目时能够快速读懂我们的项目结构，进而读懂代码。</p>\n<h1 id=\"项目环境与依赖管理\"><a href=\"#项目环境与依赖管理\" class=\"headerlink\" title=\"项目环境与依赖管理\"></a>项目环境与依赖管理</h1><p>接下来要谈到的部分个人认为是 python 中最混乱的部分——依赖管理。但是讲 Python 的依赖管理不能只讲依赖管理，还要连带着**虚拟环境(Virtual Environment)**一起讲。</p>\n<p>不同于 Java，Go 这类依赖跟着项目走的做法，Python 项目的依赖是对于当前虚拟环境而言的。也就是说你在命令行中敲下<code>pip install fastapi</code>去下载 fastapi 这个包时，这个依赖是对当前环境有效的，如果项目 A 和项目 B 都使用了虚拟环境 E，那项目 A 和项目 B 都可以使用<code>fastapi</code>这个依赖，如果有多个项目都需要依赖<code>fastapi</code>，那是不是把他们放到一个虚拟化环境里就行？答案是否定的，因为一般来说，一个项目不单单只依赖一个<code>fastapi</code>，还有其他的依赖。比如两个项目 A 和 B 依赖了一个共同的包<code>pymysql</code>，但是依赖的版本不一样，这样就会发生依赖冲突。因此我们在创建 Python 项目时，一般都会创建一个对应的虚拟环境来防止依赖冲突。所以到这你就会发现虚拟环境其实还是项目层面的，一个项目就对应一个虚拟环境，虚拟环境的这个设计说实话很鸡肋，不仅相同版本的包不能得到复用，还变相地提高了依赖管理的复杂度。</p>\n<p>吐槽完之后，我们来看看现阶段环境管理以及依赖管理的最佳实践。这个最佳实践包括不推荐的方式 venv&#x2F;virtualenv+pip，以及两种推荐的方式：conda+pip，poetry。</p>\n<h2 id=\"venv-virtualenv-pip（不推荐）\"><a href=\"#venv-virtualenv-pip（不推荐）\" class=\"headerlink\" title=\"venv&#x2F;virtualenv+pip（不推荐）\"></a>venv&#x2F;virtualenv+pip（不推荐）</h2><p>venv 和 virtualenv 都是用来创建 python 虚拟环境的工具，不同的地方在于 venv 是 python3.3 后自带的轻量级虚拟环境创建工具，只能用于 python3；而 virtualenv 则需要另外安装，可以用于 py2 以及 py3，还有一些 venv 没有的功能（个人觉得可有可无）。那对于 python3.3 以后的项目，现在都推荐自带的 venv 了。venv 使用起来也很简单：</p>\n<ol>\n<li><p><code>python -m venv venv</code>命令的第一个 venv，是运行 venv 这个模块来创建一个虚拟环境。第二个 venv 是指虚拟环境的文件夹的名字，这个可以根据需要来修改。命令执行后，会在当前文件夹中，建立一个 venv 目录。 在这个 venv 目录中，会默认放置 python.exe、pip.exe 等与系统目录隔离的可执行文件和依赖。一般 venv 会放置在项目的根目录下。</p>\n</li>\n<li><p>进入到<code>venv/Scipts</code>文件夹，执行<code>activate</code>，可以激活当前的虚拟环境; 执行<code>deactivate</code>，可以停用当前虚拟环境</p>\n</li>\n<li><p>删除这个虚拟环境只需要删除掉项目根目录下的 venv 文件夹即可。</p>\n</li>\n</ol>\n<p>venv 没有管理虚拟环境的功能，这是因为虚拟环境的依赖都跟着项目走了（venv 文件夹在项目根目录下）。因此它足够的轻量。</p>\n<p>pip 是一个轻量级包管理工具，安装 python 时都会自带 pip。pip 最常用的命令有用于下载依赖的<code>pip install deps</code>、<code>pip install -r requirements</code>和用于删除依赖的<code>pip uninstall deps</code>。很多人在一开始使用 pip 时还觉得简单好用，但在使用多了之后就深恶痛绝。pip 让人深恶痛绝的最主要的两个原因如下：</p>\n<ol>\n<li><p>在命令行执行完<code>pip install deps</code>后下载的依赖不会同步到 requirements.txt 中，同样<code>pip uninstall deps</code>删除的依赖也不会删除 requirements 中声明的依赖。</p>\n</li>\n<li><p><strong><code>pip uninstall deps</code>只会删除<code>deps</code>这个直接依赖，而不会删除最初下载<code>deps</code>这个包引入的间接依赖</strong></p>\n</li>\n</ol>\n<p>其中，第一点还可以使用<code>pip freeze &gt; requirements.txt</code>来完成手动同步，第二点则是吐槽最多的点。这两点经常会引起依赖冲突，生产环境与本地开发环境不一致的情况出现。所以在使用 venv+pip 组合时，得遵循一个开发范式，包括但不限于以下几点</p>\n<ol>\n<li><p>直接依赖需要写入 requirements.txt 中，使用<code>pip install -r requirements</code>来下载依赖，摈弃<code>pip install deps</code>，保证项目依赖相对清晰</p>\n</li>\n<li><p>发版时必须执行<code>pip freeze &gt; requirements.txt</code>来保证本地与云端环境一致</p>\n</li>\n</ol>\n<h2 id=\"conda-pip（推荐用于数据-AI-领域）\"><a href=\"#conda-pip（推荐用于数据-AI-领域）\" class=\"headerlink\" title=\"conda+pip（推荐用于数据&#x2F;AI 领域）\"></a>conda+pip（推荐用于数据&#x2F;AI 领域）</h2><p>conda 不仅是一个包管理工具库，还是一个环境管理工具，广泛用于科学计算领域，conda 命令也比较简单易用，使用 conda 的基本步骤如下：</p>\n<ol>\n<li><p><code>conda create -n my-ns</code>创建一个隔离的虚拟环境</p>\n</li>\n<li><p><code>conda activate my-ns</code>，激活虚拟环境</p>\n</li>\n<li><p><code>conda install dps</code>下载依赖</p>\n</li>\n<li><p><code>conda remve deps</code> 卸载依赖，conda 在卸载依赖时会智能地处理包的依赖关系，将间接依赖中无用的包也会一并卸载</p>\n</li>\n<li><p><code>conda remove --name my-ns --all</code>删除虚拟环境</p>\n</li>\n</ol>\n<p>其中，conda 创建的虚拟环境会维护一个与环境名同名的文件目录（类似 venv），但这个文件目录会统一放在一个地方，不会放在项目根目录下，这也让多个使用 conda 的项目“有了共享虚拟环境的可能”。那 conda 既能管理环境，又能管理依赖，是不是就能替代 pip？很遗憾还是不能，主要原因有两点：</p>\n<ol>\n<li><p>conda 主要用于数据科学领域，整个环境安装起来就比较重，环境初始时就自带了很多依赖，很多依赖是普通项目不需要的。此外，conda 下载依赖的速度也会慢一些。</p>\n</li>\n<li><p>conda 的包与 pip 安装的包不一样，conda 包是二进制格式的，除了数据科学领域，很多 python 库都会在 PyPI 上发布，但不会在 Anaconda repository 上发布</p>\n</li>\n</ol>\n<p>所以以上两点就限制了 conda 的应用领域，除了数据科学领域，conda 就只能作为一个环境管理的工具。那对于使用 conda 来管理环境的情况，pip 一般也是不可或缺的，使用时的注意点同上面的<code>venv+pip</code></p>\n<h2 id=\"poetry（推荐）\"><a href=\"#poetry（推荐）\" class=\"headerlink\" title=\"poetry（推荐）\"></a>poetry（推荐）</h2><blockquote>\n<p>以下代码地址: <a href=\"https://github.com/robocanic/poetry-fastapi-demo.git\">https://github.com/robocanic/poetry-fastapi-demo.git</a></p>\n</blockquote>\n<p>上面两种环境与依赖管理的方式都有一个比较棘手的点无法解决，那就是 pip 卸载依赖时无法删除引入的间接依赖，这很可能会导致<strong>依赖臃肿，依赖冲突</strong>等问题。</p>\n<p>poetry 是一个 python 依赖管理与环境管理的工具，它能够分析出哪些是直接依赖，哪些是间接依赖，在删除依赖时能够删掉无用的间接依赖，保持项目依赖的清爽。此外，poetry 还有指定模糊依赖，依赖快速升级等实用的功能，这让它在依赖管理方面直接甩了 pip 好几条街。至于环境管理，poetry 则是在 virtualenv 的基础上，增强了一些功能，如自动创建虚拟环境，集中&#x2F;分离的环境管理等等。</p>\n<p>poetry 的命令会相对多一些，但常用的也只有几个，下面从建立一个新项目的流程来熟悉一下如何使用 poetry：</p>\n<h4 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h4><p>在创建文件夹后，执行<code>poetry init</code>，会有一系列互动的 command 来引导你创建<code>pyproject.toml</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">PS</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo&gt;poetry</span> <span class=\"string\">init</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">This</span> <span class=\"string\">command</span> <span class=\"string\">will</span> <span class=\"string\">guide</span> <span class=\"string\">you</span> <span class=\"string\">through</span> <span class=\"string\">creating</span> <span class=\"string\">your</span> <span class=\"string\">pyproject.toml</span> <span class=\"string\">config.</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">Package</span> <span class=\"string\">name</span> [<span class=\"string\">poetry-fastapi-demo</span>]<span class=\"string\">:</span>  </span><br><span class=\"line\"> <span class=\"string\">Version</span> [<span class=\"number\">0.1</span><span class=\"number\">.0</span>]<span class=\"string\">:</span>  </span><br><span class=\"line\"> <span class=\"string\">Description</span> []<span class=\"string\">:</span>  <span class=\"string\">A</span> <span class=\"string\">web</span> <span class=\"string\">project</span> <span class=\"string\">template</span> <span class=\"string\">using</span> <span class=\"string\">poetry</span> <span class=\"string\">and</span> <span class=\"string\">fastapi.</span></span><br><span class=\"line\"> <span class=\"string\">Author</span> [<span class=\"string\">robocanic</span> <span class=\"string\">&lt;robocanic@example.com&gt;</span>, <span class=\"string\">n</span> <span class=\"string\">to</span> <span class=\"string\">skip</span>]<span class=\"string\">:</span>  </span><br><span class=\"line\"> <span class=\"string\">License</span> []<span class=\"string\">:</span>  <span class=\"string\">Apache</span> <span class=\"number\">2.0</span></span><br><span class=\"line\"> <span class=\"string\">Compatible</span> <span class=\"string\">Python</span> <span class=\"string\">versions</span> [<span class=\"string\">^3.11</span>]<span class=\"string\">:</span>  <span class=\"string\">~3.10</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">Would</span> <span class=\"string\">you</span> <span class=\"string\">like</span> <span class=\"string\">to</span> <span class=\"string\">define</span> <span class=\"string\">your</span> <span class=\"string\">main</span> <span class=\"string\">dependencies</span> <span class=\"string\">interactively?</span> <span class=\"string\">(yes/no)</span> [<span class=\"literal\">yes</span>] <span class=\"literal\">no</span></span><br><span class=\"line\"> <span class=\"string\">Would</span> <span class=\"string\">you</span> <span class=\"string\">like</span> <span class=\"string\">to</span> <span class=\"string\">define</span> <span class=\"string\">your</span> <span class=\"string\">development</span> <span class=\"string\">dependencies</span> <span class=\"string\">interactively?</span> <span class=\"string\">(yes/no)</span> [<span class=\"literal\">yes</span>] <span class=\"literal\">no</span></span><br><span class=\"line\"> <span class=\"string\">Generated</span> <span class=\"string\">file</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">tool.poetry</span>]</span><br><span class=\"line\"> <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;poetry-fastapi-demo&quot;</span></span><br><span class=\"line\"> <span class=\"string\">version</span> <span class=\"string\">=</span> <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"> <span class=\"string\">description</span> <span class=\"string\">=</span> <span class=\"string\">&quot;A web project template using poetry and fastapi.&quot;</span></span><br><span class=\"line\"> <span class=\"string\">authors</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;robocanic &lt;robocanic@example.com&gt;&quot;</span>]</span><br><span class=\"line\"> <span class=\"string\">license</span> <span class=\"string\">=</span> <span class=\"string\">&quot;Apache 2.0&quot;</span></span><br><span class=\"line\"> <span class=\"string\">readme</span> <span class=\"string\">=</span> <span class=\"string\">&quot;README.md&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">tool.poetry.dependencies</span>]</span><br><span class=\"line\"> <span class=\"string\">python</span> <span class=\"string\">=</span> <span class=\"string\">&quot;~3.10&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">build-system</span>]</span><br><span class=\"line\"> <span class=\"string\">requires</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;poetry-core&quot;</span>]</span><br><span class=\"line\"> <span class=\"string\">build-backend</span> <span class=\"string\">=</span> <span class=\"string\">&quot;poetry.core.masonry.api&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">Do</span> <span class=\"string\">you</span> <span class=\"string\">confirm</span> <span class=\"string\">generation?</span> <span class=\"string\">(yes/no)</span> [<span class=\"literal\">yes</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这里你在命令行输入的在后面都是可以通过修改<code>pyproject.toml</code>来同步的，因此一般我们都会快速地跳过这个阶段。生成的<code>pyproject.toml</code>如下所示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> [<span class=\"string\">tool.poetry</span>] <span class=\"comment\">#项目信息</span></span><br><span class=\"line\"> <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;poetry-fastapi-demo&quot;</span></span><br><span class=\"line\"> <span class=\"string\">version</span> <span class=\"string\">=</span> <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"> <span class=\"string\">description</span> <span class=\"string\">=</span> <span class=\"string\">&quot;A web project template using poetry and fastapi.&quot;</span></span><br><span class=\"line\"> <span class=\"string\">authors</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;robocanic &lt;robocanic@example.com&gt;&quot;</span>]</span><br><span class=\"line\"> <span class=\"string\">license</span> <span class=\"string\">=</span> <span class=\"string\">&quot;Apache 2.0&quot;</span></span><br><span class=\"line\"> <span class=\"string\">readme</span> <span class=\"string\">=</span> <span class=\"string\">&quot;README.md&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">tool.poetry.dependencies</span>]  <span class=\"comment\">#主要依赖</span></span><br><span class=\"line\"> <span class=\"string\">python</span> <span class=\"string\">=</span> <span class=\"string\">&quot;~3.10&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">build-system</span>]  <span class=\"comment\"># 构建工具</span></span><br><span class=\"line\"> <span class=\"string\">requires</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;poetry-core&quot;</span>]</span><br><span class=\"line\"> <span class=\"string\">build-backend</span> <span class=\"string\">=</span> <span class=\"string\">&quot;poetry.core.masonry.api&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br></pre></td></tr></table></figure>\n\n<p>在创建<code>pyproject.toml</code>后，在项目根目录下执行<code>poetry env use python</code>，会创建一个该项目专有的虚拟环境：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">PS</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo&gt;</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">virtualenvs.in-project</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"string\">PS</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo&gt;</span> <span class=\"string\">poetry</span> <span class=\"string\">env</span> <span class=\"string\">use</span> <span class=\"string\">D:\\env\\python\\python.exe</span></span><br><span class=\"line\"> <span class=\"string\">Creating</span> <span class=\"string\">virtualenv</span> <span class=\"string\">poetry-fastapi-demo</span> <span class=\"string\">in</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo\\.venv</span></span><br><span class=\"line\"> <span class=\"attr\">Using virtualenv:</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo\\.venv</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我指定了 poetry 虚拟环境的路径放置在项目根目录的.venv 目录下，我觉得这样的项目组织方式更清晰。<code>poetry env use python</code> 这个命令默认使用系统环境变量中的 python，如果你想使用指定版本的 python，可以将 python 换成<code>path/to/your/py</code>。</p>\n<h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><p>我们可以编辑<code>pyproject.toml</code>，添加指定的依赖，再先后执行<code>poetry lock</code> 和<code>poetry install</code>，<code>poetry lock</code>会解析<code>pyproject.toml</code>中的主要依赖与开发依赖以及间接依赖，选择合适的依赖版本，记录到 poetry.lock 这个文件中。poetry.lock 的作用类似于 requirements.txt，即“锁定”项目需要的依赖（包括直接依赖和间接依赖）版本。紧接着的<code>poetry install</code>就会根据 poetry.lock 中的内容去下载相应版本的依赖。</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[tool.poetry]</span> <span class=\"comment\"># 项目信息</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;poetry-fastapi-demo&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version</span> = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">description</span> = <span class=\"string\">&quot;A web project template using poetry and fastapi.&quot;</span></span><br><span class=\"line\"><span class=\"attr\">authors</span> = [<span class=\"string\">&quot;robocanic &lt;robocanic@example.com&gt;&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">license</span> = <span class=\"string\">&quot;Apache 2.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">readme</span> = <span class=\"string\">&quot;README.md&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[tool.poetry.dependencies]</span>  <span class=\"comment\"># 主要依赖</span></span><br><span class=\"line\"><span class=\"attr\">python</span> = <span class=\"string\">&quot;~3.10&quot;</span>        <span class=\"comment\"># python版本&gt;=3.10 且 &lt;3.20</span></span><br><span class=\"line\"><span class=\"attr\">fastapi</span> = <span class=\"string\">&quot;^0.115.0&quot;</span>    <span class=\"comment\"># fastapi版本 &gt;=0.115.0 且 &lt;0.116.0</span></span><br><span class=\"line\"><span class=\"attr\">sqlalchemy</span> = <span class=\"string\">&quot;^2.0.36&quot;</span>  <span class=\"comment\"># sqlalchemy版本 &gt;=2.0.36 且 &lt; 3.0</span></span><br><span class=\"line\"><span class=\"attr\">pyyaml</span> = <span class=\"string\">&quot;^6.0.2&quot;</span>       <span class=\"comment\"># pyyaml版本 &gt;=6.0.2 且 &lt; 7.0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[tool.poetry.group.dev.dependencies]</span>  <span class=\"comment\"># 开发依赖</span></span><br><span class=\"line\"><span class=\"attr\">pytest</span> = <span class=\"string\">&quot;^8.3.3&quot;</span>       <span class=\"comment\"># pytest版本 &gt;=8.3.3 且 &lt; 9.0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[build-system]</span>  <span class=\"comment\"># 构建工具</span></span><br><span class=\"line\"><span class=\"attr\">requires</span> = [<span class=\"string\">&quot;poetry-core&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">build-backend</span> = <span class=\"string\">&quot;poetry.core.masonry.api&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们可以指定主要依赖和开发依赖，在发布部署时只打包主要依赖，这样就可以减小包的体积。同时我们可以指定依赖的版本范围，不同的符号有不同的指定范围策略，这一块可以参考 poetry 官方文档：<a href=\"https://python-poetry.org/docs/dependency-specification/\">https://python-poetry.org/docs/dependency-specification/</a></p>\n<p>此外，我们也可以直接使用命令行<code>poetry add deps</code>来下载包，这个命令会自动地更新<code>pyproject.toml</code>以及<code>poetry.lock</code>文件，保证环境中的依赖与<code>pyproject.toml</code>中的的依赖的一致性。</p>\n<h4 id=\"删除依赖\"><a href=\"#删除依赖\" class=\"headerlink\" title=\"删除依赖\"></a>删除依赖</h4><p>我们可以通过编辑<code>pyproject.toml</code>，删除对应的依赖声明，然后执行<code>poetry lock</code> 即可，poetry 会自动帮我们把依赖删除。我们也可以使用<code>poetry remove deps</code>来删除依赖。</p>\n<p>poetry 的这两种删除方式都会解析<code>deps</code>的无用的间接依赖，将其一并删除。</p>\n<h4 id=\"删除虚拟环境\"><a href=\"#删除虚拟环境\" class=\"headerlink\" title=\"删除虚拟环境\"></a>删除虚拟环境</h4><p>执行<code>poetry env remove poetry-demo</code>，即可删除虚拟环境。</p>\n<blockquote>\n<p>如果在 poetry 的配置中指定了<code>poetry config virtualenvs.in-project true</code>，虚拟环境维护的目录就会放在项目的根目录下。类似于 venv 的方式，因此这种情况下删除.venv 文件夹就等同于删除虚拟环境</p>\n</blockquote>\n<h4 id=\"查看依赖树\"><a href=\"#查看依赖树\" class=\"headerlink\" title=\"查看依赖树\"></a>查看依赖树</h4><p>poetry 中很实用的一个功能是它可以使用<code>poetry show --tree</code>来查看依赖关系，从而在依赖错误时能够更好地定位异常，更快速地解决问题。</p>\n<p><img src=\"https://image.robocanic.com/notes/image-20241104154436296.png\" alt=\"poetry-show--tree\"></p>\n<h4 id=\"导出依赖\"><a href=\"#导出依赖\" class=\"headerlink\" title=\"导出依赖\"></a>导出依赖</h4><p>理论上来说，有了 poetry 不再需要 pip 了，自然也不需要 requirements.txt 了，但是在后面的项目发布管理中我们会提到，当使用容器化部署时，我们希望我们的镜像尽可能地精简，我们的项目部署能尽可能快速。从精简镜像这个角度来看，poetry 对于我们的项目而言只是开发时依赖，在运行时我们希望只用最简单的依赖就能把项目跑起来。因此我们需要将 poetry.lock 中的依赖转化为 requirements.txt，这样部署时使用<code>pip install -r requirements.txt</code>下完依赖之后直接就能 run 起来项目。</p>\n<p>poetry 本身也支持导出环境内的依赖，使用<code>poetry export -f requirements.txt -o requirements.txt</code>就可以将环境中的所有依赖导出到 requirements.txt 中。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>poetry 作为环境管理与依赖管理合二为一的银弹，在体验下来，除了数据科学&#x2F;AI 领域的项目，我认为 poetry 是开发大多数 python 项目的最佳环境与依赖的管理方式。</p>\n<h1 id=\"项目日志\"><a href=\"#项目日志\" class=\"headerlink\" title=\"项目日志\"></a>项目日志</h1><blockquote>\n<p>以下代码地址: <a href=\"https://github.com/robocanic/poetry-fastapi-demo.git\">https://github.com/robocanic/poetry-fastapi-demo.git</a></p>\n</blockquote>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>日志的重要性不言而喻，我们这里探讨的“项目日志”，更准确地来说是怎么使用日志能够得到我们想要的效果。通常，我们对于日志会有一些要求：</p>\n<ol>\n<li><p>我们希望我们的日志能够显示出日志时间，日志等级(INFO, WARN, ERROR …..)，日志内容，所在线程，是由哪个组件&#x2F;py 文件打印的……</p>\n</li>\n<li><p>对于以上日志信息，不管是自己项目中的还是依赖包中的，都有一个统一的格式打印出来</p>\n</li>\n<li><p>不仅要在控制台打印，还需要保存到文件中，以便后续排查错误时能够追溯。</p>\n</li>\n<li><p>更进一步，我们希望 ERROR 级别的日志能够单独放到一个文件中，每天的日志按照日期做一个切割分块……</p>\n</li>\n</ol>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>在阐明日志需要达到的效果之后，我们来看看 python 中的 logging 模块，这个模块是 python 自带的，我们可以先来试用一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\">logging.info(<span class=\"string\">&quot;this is a info log&quot;</span>)</span><br><span class=\"line\">logging.warning(<span class=\"string\">&quot;this is a warning log&quot;</span>)</span><br><span class=\"line\">logging.error(<span class=\"string\">&quot;this is a error log&quot;</span>)</span><br><span class=\"line\">logging.critical(<span class=\"string\">&quot;this is a critical log&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">output:</span></span><br><span class=\"line\"><span class=\"string\">WARNING:root:this is a warning log</span></span><br><span class=\"line\"><span class=\"string\">ERROR:root:this is a error log</span></span><br><span class=\"line\"><span class=\"string\">CRITICAL:root:this is a critical log</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行这个 python 文件会发现控制台并没有打印出 info 级别的日志，这是因为 logging 模块提供的日志记录函数所使用的日志器设置的日志级别是<code>WARNING</code>，因此只有<code>WARNING</code>级别的日志记录以及大于它的<code>ERROR</code>和<code>CRITICAL</code>级别的日志记录被输出了，而小于它的<code>INFO</code>级别的日志记录被丢弃了。</p>\n<p>我们可以观察每条日志，每个日志都由三部分构成：<code>日志级别:日志器名称:日志内容</code>，这是因为 logging 模块提供的日志记录函数所使用的日志器设置的日志格式默认为<code>%(levelname)s:%(name)s:%(message)s</code>。</p>\n<p>那自然我们会想到，可不可以通过设置 logging 的日志级别与日志格式，来生成我们想要的日志格式？进一步，我们可不可以调整日志输出的位置，同时输出在控制台和文件？</p>\n<p>在回答这个问题之前，我们可以来先简单看下 logging 模块涉及到的四个组件</p>\n<ol>\n<li><p>日志器（Logger），提供了我们的代码可以使用的接口，即 log.info，log.warning，log.error 等</p>\n</li>\n<li><p>处理器（Handler），将 logger 创建的日志记录发送到合适的目的输出</p>\n</li>\n<li><p>过滤器（Filter），提供了更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录</p>\n</li>\n<li><p>格式器（Formatter），决定日志记录的输出格式</p>\n</li>\n</ol>\n<p>这些组件的关系大致如下：日志器（Logger）需要通过处理器（Handler）将日志信息输出到目标位置（文件，控制台，网络等）。而处理器（Handler）可以设置过滤器（Filter）和格式器（Formatter）来对日志进行过滤和格式化，再输出到指定的目标位置。</p>\n<p>因此上面的问题也有了答案：通过调整 Logger，Handler，Filter，Formatter 的设置和组合关系，我们可以得到我们想要的日志。</p>\n<p>我们可以通过 3 种方式来配置 logging：</p>\n<ol>\n<li><p>使用 Python 代码显式的创建 logger，handle，filter，formatter 并分别调用它们的配置函数</p>\n</li>\n<li><p>创建一个日志配置文件，然后使用<code>fileConfig()</code>函数来读取该文件的内容；</p>\n</li>\n<li><p>创建一个包含配置信息的 dict，然后把它传递给<code>dictConfig()</code>函数；</p>\n</li>\n</ol>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>这里我介绍一下第三种，其他两种可以自行研究。第三种我们通常会用一个 yaml&#x2F;json 文件来描述配置，然后使用<code>yaml.load</code>读取日志配置文件，转化成 dict，进而传递给<code>dictConfig()</code>，完成 logging 的配置。</p>\n<p>yaml 形式的日志配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">formatters:</span>  <span class=\"comment\"># 定义格式器</span></span><br><span class=\"line\">  <span class=\"attr\">default:</span>   <span class=\"comment\"># 格式器名</span></span><br><span class=\"line\">    <span class=\"attr\">format:</span> <span class=\"string\">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(threadName)s%(thread)d - %(message)s&#x27;</span>  <span class=\"comment\"># 日志格式：时间 - 日志器名 - 日志等级 - 线程名 线程ID - 日志内容</span></span><br><span class=\"line\">    <span class=\"attr\">datefmt:</span> <span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>   <span class=\"comment\"># 时间格式</span></span><br><span class=\"line\">    <span class=\"attr\">use_colors:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># 使用颜色</span></span><br><span class=\"line\"><span class=\"attr\">handlers:</span>     <span class=\"comment\"># 定义处理器</span></span><br><span class=\"line\">  <span class=\"attr\">console:</span>    <span class=\"comment\"># 处理器名</span></span><br><span class=\"line\">    <span class=\"attr\">class:</span> <span class=\"string\">logging.StreamHandler</span>  <span class=\"comment\"># 使用的handler</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span>    <span class=\"comment\"># 日志等级</span></span><br><span class=\"line\">    <span class=\"attr\">formatter:</span> <span class=\"string\">default</span>  <span class=\"comment\"># 使用的formatter名字</span></span><br><span class=\"line\">    <span class=\"attr\">stream:</span> <span class=\"string\">ext://sys.stdout</span>  <span class=\"comment\"># 输出到控制台</span></span><br><span class=\"line\">  <span class=\"attr\">file:</span></span><br><span class=\"line\">    <span class=\"attr\">class:</span> <span class=\"string\">logging.FileHandler</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\">    <span class=\"attr\">formatter:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">filename:</span> <span class=\"string\">app.log</span>   <span class=\"comment\"># 输出到app.log</span></span><br><span class=\"line\"><span class=\"attr\">loggers:</span>         <span class=\"comment\"># 定义日志器</span></span><br><span class=\"line\">  <span class=\"attr\">poetry_fastapi_demo:</span>   <span class=\"comment\"># 日志器名称</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span>  <span class=\"comment\"># 日志等级</span></span><br><span class=\"line\">    <span class=\"attr\">handlers:</span>    <span class=\"comment\"># 使用的handler</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">file</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br><span class=\"line\">    <span class=\"attr\">propagate:</span> <span class=\"literal\">false</span>   <span class=\"comment\"># 是否传播到父logger再处理</span></span><br><span class=\"line\">  <span class=\"attr\">poetry_fastapi_demo.routers:</span>  <span class=\"comment\"># poetry_fastapi_demo的子logger</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\">    <span class=\"attr\">handlers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">file</span></span><br><span class=\"line\">    <span class=\"attr\">propagate:</span> <span class=\"literal\">false</span>   <span class=\"comment\"># 是否传播到父logger再处理</span></span><br><span class=\"line\">  <span class=\"attr\">uvicorn:</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\">    <span class=\"attr\">handlers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">file</span></span><br><span class=\"line\">    <span class=\"attr\">propagate:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">root:</span>            <span class=\"comment\"># 根日志器，所有没有归属的日志都会由root来处理</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">file</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，logger 是有层级结构的，logger 的名称是一个以’.’分割的结构，每个’.’后面的 logger 都是’.’前面的 logger 的 children。而 root 是一个特殊的 logger，它会捕捉没有被其他 logger 处理的日志消息，我们依赖的三方包打印的日志大部分都会由 root logger 捕获到进行处理，因此 root 是很重要的兜底 logger。</p>\n<p>在完善好<code>log.yaml</code>后，我们做一个验证，<code>poetry-fastapi-demo</code>项目结构如下：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poetry-fastapi-demo/</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── poetry_fastapi_demo/         </span><br><span class=\"line\"> │   ├── models             # 模型</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">|   ├── routers             # 路由</span><br><span class=\"line\">|   |   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">|   ├── tables              # 增删改查</span><br><span class=\"line\">|   |   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">│   ├── __init__.py    </span><br><span class=\"line\">│   └── main.py             # 主程序入口</span><br></pre></td></tr></table></figure>\n\n<p><code>poetry_fastapi_demo/__init__.py</code>的内容如下，这里我们将 log.yaml 的路径以环境变量传入，然后使用<code>.dictConfig</code>完成日志的配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging.config</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\">log_conf_path = os.environ.get(<span class=\"string\">&quot;LOG_CONFIG&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(log_conf_path, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    dict_conf = yaml.safe_load(f)</span><br><span class=\"line\">logging.config.dictConfig(dict_conf)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>poetry_fastapi_demo/routers/user.py</code>的内容如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> APIRouter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.tables <span class=\"keyword\">import</span> user_table</span><br><span class=\"line\"></span><br><span class=\"line\">log = logging.getLogger(__name__)</span><br><span class=\"line\">router = APIRouter()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_all_users</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.get_all_users()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_user</span>(<span class=\"params\">user_id: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.get_user_by_id(user_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.post(<span class=\"params\"><span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_user</span>(<span class=\"params\">user: User</span>):</span><br><span class=\"line\">    log.info(<span class=\"string\">f&quot;Creating user: <span class=\"subst\">&#123;user&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.add_user(user)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.delete(<span class=\"params\"><span class=\"string\">&quot;/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete_user</span>(<span class=\"params\">user_id: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    log.warning(<span class=\"string\">f&quot;Deleting user with id: <span class=\"subst\">&#123;user_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.delete_user(user_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.put(<span class=\"params\"><span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">update_user</span>(<span class=\"params\">user: User</span>):</span><br><span class=\"line\">    log.warning(<span class=\"string\">f&quot;Updating user: <span class=\"subst\">&#123;user&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.update_user(user)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行 main.py（记得设置环境变量），我们可以在控制台中看到日志输出，同时在项目的根目录下也会生成 app.log 日志文件，记录运行的日志。</p>\n<p><img src=\"https://image.robocanic.com/notes/app-log.png\" alt=\"app-log\"></p>\n<p>我们发起一个新增 user 的请求：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --request POST \\</span><br><span class=\"line\">  --url http://localhost:8080/api/v1/user \\</span><br><span class=\"line\">  --header &#x27;content-type: application/json&#x27; \\</span><br><span class=\"line\">  --data &#x27;&#123;</span><br><span class=\"line\">  &quot;id&quot;: 6,</span><br><span class=\"line\">  &quot;name&quot;: &quot;robb&quot;,</span><br><span class=\"line\">  &quot;email&quot;: &quot;robocanic@gmail.com&quot;,</span><br><span class=\"line\"> &quot;password&quot;: &quot;xclkjva&quot;,</span><br><span class=\"line\">  &quot;role&quot;: &quot;user&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到日志显示如下：</p>\n<p><img src=\"https://image.robocanic.com/notes/create-user-log.png\" alt=\"create-user-log\"></p>\n<p>到这，基本的日志需求就满足了，我们无需调整代码，仅通过调整配置文件就能适时调整日志。那对于目标中的第 4 点“我们希望 ERROR 级别的日志能够单独放到一个文件中，每天的日志按照日期做一个切割分块”，相信你可以举一反三</p>\n<h1 id=\"项目测试\"><a href=\"#项目测试\" class=\"headerlink\" title=\"项目测试\"></a>项目测试</h1><blockquote>\n<p>以下代码地址: <a href=\"https://github.com/robocanic/poetry-fastapi-demo.git\">https://github.com/robocanic/poetry-fastapi-demo.git</a></p>\n</blockquote>\n<p>一个项目可靠的项目离不开完备的测试，测试一般分为单元测试和接口测试，单测针对某个函数或者某个模块，测试返回的参数是否符合预期，而接口测试是针对于 HTTP（RPC）接口，测试的是某一块功能的完备性。</p>\n<p>这里我们讨论的仅限于单元测试。在 python 中，单元测试可以使用 unittest 模块和 pytest，uninttest 是 python 自带的测试模块，而 pytest 是一个第三方模块，在兼容 unittest 的基础上，增加了集成测试的功能，方便我们进行批量的单元测试，与 CI 进行结合。因此后文中使用 pytest 来进行讲解。</p>\n<p>pytest 可以自动递归指定路径下的所有文件，只要符合<code>test_</code>或者<code>_test</code>开头的 py 文件都会被识别为测试用例文件。都会在测试计划中执行。</p>\n<h2 id=\"实践-1\"><a href=\"#实践-1\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>在使用 pytest 之前需要使用 pip 或者 poetry 下载，我们可以将 pytest 下载到<code>dev</code>分组的依赖，也就是开发时依赖（如<code>poetry add pytest --group dev</code>），以便生产部署时精简掉开发时依赖。</p>\n<p>项目目录结构如下：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poetry-fastapi-demo/</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── poetry_fastapi_demo/   # 程序主包    </span><br><span class=\"line\"> │   ├── models/             # 模型</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">|   ├── routers/             # 路由</span><br><span class=\"line\">|   |   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">|   ├── tables/              # 增删改查</span><br><span class=\"line\">|   |   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">│   ├── __init__.py    </span><br><span class=\"line\">│   └── main.py             # 主程序入口</span><br><span class=\"line\">├── tests/                  # 测试文件</span><br><span class=\"line\">|   ├── test_user_table.py    # 模型</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>poetry_fastapi_demo/tables/user.py</code>内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Optional</span>, <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"></span><br><span class=\"line\">user_list = [</span><br><span class=\"line\">    User(</span><br><span class=\"line\">        <span class=\"built_in\">id</span>=<span class=\"number\">1</span>,</span><br><span class=\"line\">        name=<span class=\"string\">&quot;Chris&quot;</span>,</span><br><span class=\"line\">        email=<span class=\"string\">&quot;chris@gmail.com&quot;</span>,</span><br><span class=\"line\">        password=<span class=\"string\">&quot;pso3sd5xv&quot;</span>,</span><br><span class=\"line\">        role=<span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    User(</span><br><span class=\"line\">        <span class=\"built_in\">id</span>=<span class=\"number\">2</span>,</span><br><span class=\"line\">        name=<span class=\"string\">&quot;Jon&quot;</span>,</span><br><span class=\"line\">        email=<span class=\"string\">&quot;jon@gmail.com&quot;</span>,</span><br><span class=\"line\">        password=<span class=\"string\">&quot;rthdfwe5sdf&quot;</span>,</span><br><span class=\"line\">        role=<span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    User(</span><br><span class=\"line\">        <span class=\"built_in\">id</span>=<span class=\"number\">3</span>,</span><br><span class=\"line\">        name=<span class=\"string\">&quot;Arya&quot;</span>,</span><br><span class=\"line\">        email=<span class=\"string\">&quot;arya@gmail.com&quot;</span>,</span><br><span class=\"line\">        password=<span class=\"string\">&quot;ndddrwe42&quot;</span>,</span><br><span class=\"line\">        role=<span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserTable</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_all_users</span>(<span class=\"params\">self</span>) -&gt; <span class=\"type\">List</span>[User]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user_list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_user_by_id</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[User]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> user_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> user.<span class=\"built_in\">id</span> == user_id:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> user</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_user</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> u <span class=\"keyword\">in</span> user_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> u.<span class=\"built_in\">id</span> == user.<span class=\"built_in\">id</span>:</span><br><span class=\"line\">                u.name = user.name</span><br><span class=\"line\">                u.email = user.email</span><br><span class=\"line\">                u.password = user.password</span><br><span class=\"line\">                u.role = user.role</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">delete_user</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, u <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(user_list):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> u.<span class=\"built_in\">id</span> == user_id:</span><br><span class=\"line\">                <span class=\"keyword\">del</span> user_list[i]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_user</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> u <span class=\"keyword\">in</span> user_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> u.<span class=\"built_in\">id</span> == user.<span class=\"built_in\">id</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        user_list.append(user)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">user_table = UserTable()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>测试案例<code>test_user_table.py</code>内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.tables <span class=\"keyword\">import</span> user_table</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestUserTable</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_get_all</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        user_table.get_all_users()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_get_by_id</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        user = user_table.get_user_by_id(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user.name == <span class=\"string\">&quot;Chris&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_update_user</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        user = user_table.get_user_by_id(<span class=\"number\">1</span>)</span><br><span class=\"line\">        user.name = <span class=\"string\">&quot;Chris2&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.update_user(user) <span class=\"keyword\">is</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.get_user_by_id(<span class=\"number\">1</span>).name == <span class=\"string\">&quot;Chris&quot;</span>   <span class=\"comment\"># 故意写错</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_user</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.delete_user(<span class=\"number\">1</span>) <span class=\"keyword\">is</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.get_user_by_id(<span class=\"number\">1</span>) <span class=\"keyword\">is</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_add_user</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        result = user_table.add_user(User(</span><br><span class=\"line\">            <span class=\"built_in\">id</span>=<span class=\"number\">4</span>,</span><br><span class=\"line\">            name=<span class=\"string\">&quot;robb&quot;</span>,</span><br><span class=\"line\">            email=<span class=\"string\">&quot;robb@gmail.com&quot;</span>,</span><br><span class=\"line\">            password=<span class=\"string\">&quot;loqjwnd[as;&quot;</span>,</span><br><span class=\"line\">            role=<span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">        ))</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> result <span class=\"keyword\">is</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.get_user_by_id(<span class=\"number\">4</span>).name == <span class=\"string\">&quot;robb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后我们在项目根目录执行<code>pytest tests/ -v</code>，输出如下：</p>\n<p><img src=\"https://image.robocanic.com/notes/py-test.png\" alt=\"py-test\"></p>\n<p>pytest 会递归地在 tests 文件夹下寻找以<code>test_</code>或<code>_test</code>开头的 py 文件，在 py 文件中，会寻找以<code>test_</code>或<code>_test</code>开头的函数或者类，对于我们这个案例来说，一共有 5 个测试用例，在输出中我们也能详细地查看到通过和失败的具体用例，错误的原因，执行的时间等等。此外，pytest 还有其他的功能（可参考<a href=\"https://learning-pytest.readthedocs.io/zh/latest/index.html\">https://learning-pytest.readthedocs.io/zh/latest/index.html</a>），如测试前和测试后的预处理和后处理，使用插件生成测试报告等，这里就算抛砖引玉给大家。</p>\n<h2 id=\"CI-集成\"><a href=\"#CI-集成\" class=\"headerlink\" title=\"CI 集成\"></a>CI 集成</h2><p>按照开发流程来说，我们在本地开发并单测完后，会发布到测试环境中进行进一步地调试验证。有时候我们修改完代码后忘记执行对应的单测就提交了，然后在调试中才发现了错误，然后又回炉重造。为了尽量减少修改小错误反复发布的时间，我们可以将自动化测试集成到 gitlab pipeline（使用参考<a href=\"https://docs.gitlab.com/ee/ci/pipelines/\">https://docs.gitlab.com/ee/ci/pipelines/</a>）或 github actions(使用参考<a href=\"https://docs.github.com/zh/actions\">https://docs.github.com/zh/actions</a>)。</p>\n<h4 id=\"github-actions\"><a href=\"#github-actions\" class=\"headerlink\" title=\"github actions\"></a>github actions</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Python</span> <span class=\"string\">ci</span>           <span class=\"comment\"># workflow名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span>                            <span class=\"comment\"># 触发条件，push或merge到dev中触发</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">&quot;dev&quot;</span> ]</span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">&quot;dev&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span>    <span class=\"comment\"># 跑在ubuntu虚拟机上</span></span><br><span class=\"line\">    <span class=\"attr\">strategy:</span>                 <span class=\"comment\"># 执行策略</span></span><br><span class=\"line\">      <span class=\"attr\">fail-fast:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">matrix:</span></span><br><span class=\"line\">        <span class=\"attr\">python-version:</span> [<span class=\"string\">&quot;3.10&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span>                    <span class=\"comment\"># 执行步骤</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span>    <span class=\"comment\"># 使用checkout这个已有的action来初始化git环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Python</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.python-version</span> <span class=\"string\">&#125;&#125;</span>   <span class=\"comment\"># 使用setup-python来初始化python环境</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v3</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">python-version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.python-version</span> <span class=\"string\">&#125;&#125;</span>     <span class=\"comment\"># 指定python版本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Poetry</span>                 <span class=\"comment\"># 使用setup-poetry这个已有的action来初始化poetry</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">Gr1N/setup-poetry@v9</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span>         <span class=\"comment\"># 使用poetry下载依赖，因为是在一个单独的虚拟机/容器中，所以无需创建虚拟环境</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        poetry config virtualenvs.create false</span></span><br><span class=\"line\"><span class=\"string\">        poetry lock</span></span><br><span class=\"line\"><span class=\"string\">        poetry install --all-extras</span></span><br><span class=\"line\"><span class=\"string\"></span>    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Test</span> <span class=\"string\">with</span> <span class=\"string\">pytest</span>            <span class=\"comment\"># 使用pytest执行集成测试</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"attr\">LOG_CONFIG:</span> <span class=\"string\">./log.yaml</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">pytest</span> <span class=\"string\">tests/</span> <span class=\"string\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p>我们把上面这个 yml 命名为 ci.yml，并放置在项目根目录.github&#x2F;workflows 目录下，然后 github 会自动检测到 workflow 的存在并按照 yml 中定义的步骤依次执行。然后我们在 dev 分支 push 到远程，然后我们会在 actions 中发现历史执行&#x2F;正在执行的 workflow。</p>\n<p><img src=\"https://image.robocanic.com/notes/github-action.png\" alt=\"github-action\"></p>\n<p>我们点进某一个 workflow 可以看到 job 的执行结果是成功还是失败：</p>\n<p><img src=\"https://image.robocanic.com/notes/github-workflow-job.png\" alt=\"github-workflow-job\"></p>\n<p>进一步，我们进入 build 这个 job，我们可以看到集成测试的信息：</p>\n<p><img src=\"https://image.robocanic.com/notes/job-test.png\" alt=\"job-test\"></p>\n<p>此外，github actions 还可以探索更多的玩法，比如：当 job 失败了发送邮件到自己的邮箱提示流水线失败了，当 job 失败了回滚到上一个 commit 的状态等等，这些就都留给你去探索了</p>\n<h4 id=\"gitlab-pipeline\"><a href=\"#gitlab-pipeline\" class=\"headerlink\" title=\"gitlab pipeline\"></a>gitlab pipeline</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">automatic_test_dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">automatic_test_job_dev:</span>   <span class=\"comment\"># 我们只在测试环境执行自动化测试，生产环境为了加快发布速度，不执行测试</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">sunpeek/poetry:py3.10-slim</span>    <span class=\"comment\"># 使用带poetry的python镜像</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">automatic_test_dev</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dev</span>                 <span class=\"comment\"># 只有dev分支发生变化（merge或push）时触发</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span>                   <span class=\"comment\"># 匹配python标签的runner才运行</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">python</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span>                 <span class=\"comment\"># 执行脚本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">virtualenvs.create</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 在容器中，不用创建虚拟环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">lock</span>     <span class=\"comment\"># 锁定依赖版本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">install</span>  <span class=\"comment\"># 下载依赖</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">pytest</span> <span class=\"string\">tests/</span>   <span class=\"comment\"># 执行测试</span></span><br></pre></td></tr></table></figure>\n\n<p>我们将这个 yml 文件命名为.gitlab-ci.yml，然后 push 到 dev 分支，就会触发 pipeline。gitlab pipeline 本质上和 github actions 是一样的，都是声明式的流水线，因此这里就不再赘述，你可以查阅官方文档（<a href=\"https://docs.gitlab.com/ee/ci/pipelines/\">https://docs.gitlab.com/ee/ci/pipelines/</a>）来组合出你的 pipeline。</p>\n<h1 id=\"项目发布管理\"><a href=\"#项目发布管理\" class=\"headerlink\" title=\"项目发布管理\"></a>项目发布管理</h1><p>当我们项目在本地运行 ok，测试也 ok 后，该考虑发布到各个环境（联调，测试，生产等）。这个过程根据项目的属性分为两类，一类是二方包的发布，另一类则是正经应用发布。</p>\n<p>在谈这两类发布之前，我们先来确认发布过程中我们想要达到的目标（要求）：</p>\n<ol>\n<li><p>对于二方包发布，我们希望它在本地就能够发布 beta 版本，以便于快速验证。此外，正式版本的发布，我们希望能够集成到 CI 中。</p>\n</li>\n<li><p>对于应用发布，我们希望它发布时足够迅速，以便在出现问题时快速推送补丁解决问题。</p>\n</li>\n<li><p>无论是二方包还是应用发布，我们希望在发布的时候自动执行集成测试（生产除外），生成一份测试报告。</p>\n</li>\n</ol>\n<h2 id=\"二方包发布\"><a href=\"#二方包发布\" class=\"headerlink\" title=\"二方包发布\"></a>二方包发布</h2><p>二方包的发布根据我们使用的项目环境和依赖管理工具可以划分为两类，第一类是使用 conda+pip 或者 venv+pip 后的发布流程，另一类是使用 poetry 后的发布流程。</p>\n<h3 id=\"setuptools-twine\"><a href=\"#setuptools-twine\" class=\"headerlink\" title=\"setuptools+twine\"></a>setuptools+twine</h3><p>发布分为打包和推送两个步骤，setuptools 负责将我们的 python 代码打包，而 twine 则负责将打包后的 pkg 推送到 PyPI 仓库。</p>\n<p>setuptools 是很多年来 python 打包的首选工具，我们首先需要执行<code>pip install setuptools</code>来下载这个工具。然后在项目根目录下新建一个<code>setup.py</code>文件来写打包时的配置，一个 setup.py 如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup, find_packages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;README.md&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;UTF-8&quot;</span>) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">    long_description = fh.read()</span><br><span class=\"line\">version= os.environ.get(<span class=\"string\">&quot;GITHUB_REF_NAME&quot;</span>, <span class=\"string\">&quot;0.0.1b0&quot;</span>) <span class=\"comment\"># 包的版本，GITHUB_REF_NAME是github tag name的环境变量，代表代码分支TAG；0.0.1b0 是0.0.1-BETA0的缩写</span></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;poetry_fastapi_demo&#x27;</span>,  <span class=\"comment\"># 包名</span></span><br><span class=\"line\">    version=version,     <span class=\"comment\"># 构建版本</span></span><br><span class=\"line\">    author=<span class=\"string\">&#x27;robocanic&#x27;</span>,  <span class=\"comment\"># 作者</span></span><br><span class=\"line\">    author_email=<span class=\"string\">&#x27;robocanic@gmail.com&#x27;</span>,</span><br><span class=\"line\">    description=<span class=\"string\">&#x27;A web project template using poetry and fastapi.&#x27;</span>,   <span class=\"comment\"># 描述</span></span><br><span class=\"line\">    long_description=long_description,  <span class=\"comment\"># 长的描述</span></span><br><span class=\"line\">    long_description_content_type=<span class=\"string\">&quot;text/markdown&quot;</span>,</span><br><span class=\"line\">    url=<span class=\"string\">&#x27;https://github.com/robocanic/poetry-fastapi-demo&#x27;</span>,</span><br><span class=\"line\">    packages=find_packages(),  <span class=\"comment\"># 打包所有包目录</span></span><br><span class=\"line\">    classifiers=[</span><br><span class=\"line\">        <span class=\"string\">&quot;Development Status :: 2 - Beta&quot;</span>    <span class=\"comment\"># 开发阶段</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.10&quot;</span>,   <span class=\"comment\"># 使用的语言</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Operating System:: OS Independent&quot;</span>,   <span class=\"comment\"># 不限定OS</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    install_requires=[     <span class=\"comment\"># 该项目的依赖，别人下载我们的包时会自动下载这些依赖</span></span><br><span class=\"line\">        <span class=\"string\">&quot;fastapi==0.115.0&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;sqlalchemy==2.0.36&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;pyyaml==6.0.2&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;uvicorn=0.32.0&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    python_requires=<span class=\"string\">&#x27;&gt;=3.10&#x27;</span>    <span class=\"comment\"># python要求</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>setup.py</code>使用代码的方式声明了我们打包的配置，包括构建版本，直接依赖，python 版本要求等等。接下来我们只需要执行<code>python setup.py sdist</code>就能将项目打包成.tar.gz 文件，当然我们也可以指定打包格式为<code>bdist_wheel</code>，打包成.wheel 文件。打包后的文件默认放在 dist 目录下。</p>\n<p>接下来我们需要使用 twine 上传到 PyPI 仓库，twine 也是一个 python 包，在使用之前需要通过<code>pip install twine</code>下载。然后执行<code>twine upload dist/*</code>就上传到了仓库。</p>\n<blockquote>\n<p>如果要上传到私有的 PyPI 仓库，则需要配置上传的用户名和密码，同时在上传时需要指定私有仓库。最便捷的方法是在 root 目录下新增一个.pypirc 文件，文件内容为：</p>\n</blockquote>\n<pre><code>[distutils]\n\n\nindex-servers = private-pypi\n\n[nexus]\n</code></pre>\n<p>repository&#x3D;<a href=\"https://private-pypi.com/simple/\">https://private-pypi.com/simple/</a><br>username&#x3D;foo<br>password&#x3D;bar<br>然后使用<code>twine upload -r private-pypi dist/*</code> 来上传到指定的私有仓库</p>\n<h3 id=\"poetry\"><a href=\"#poetry\" class=\"headerlink\" title=\"poetry\"></a>poetry</h3><p>如果你使用了 poetry，那 poetry 就自带了打包和上传的功能。poetry 打包非常简单，只需要执行<code>poetry build</code>，它就会参照<code>pyproject.toml</code>中的配置进行打包。打包生成的文件默认也会放在 dist 目录下。</p>\n<p>然后我们执行<code>poetry publish</code>就可以发布到 PyPI 仓库</p>\n<blockquote>\n<p>同样，若要使用 poetry 上传到私有的 PyPI 仓库。也需要额外的配置：<br><code>poetry config repositories.foo-pub [https://pypi.example.org/legacy/](https://pypi.example.org/legacy/)</code> &gt; <code>poetry config http-basic.foo-pub &lt;username&gt; &lt;password&gt;</code> &gt; <code>poetry publish --repository foo-pub</code></p>\n</blockquote>\n<h3 id=\"CI-集成-1\"><a href=\"#CI-集成-1\" class=\"headerlink\" title=\"CI 集成\"></a>CI 集成</h3><p>很多时候我们发现了特定版本包的一些问题，我们想要这个特定版本的包对应的源代码，并在此基础上加一个补丁。因此我们需要将我们包的版本和我们代码的特定分支一一对应。通过人工完成这个过程是可行的，我们只需要在每次打包前&#x2F;后 加一个 commit，推到远程仓库，打一个 tag 就能对应起来。但是这件重复的工作我们时常会忘记，这个重复的工作可以交给一个单独的程序来做吗？答案当然是肯定的，毕竟程序员最习惯的事就是将重复的工作程序化，复杂的工作流程化。gitlab pipeline&#x2F;github actions 能够通过我们声明的 yml 文件来完成这个过程。</p>\n<h4 id=\"gitlab-pipeline-1\"><a href=\"#gitlab-pipeline-1\" class=\"headerlink\" title=\"gitlab pipeline\"></a>gitlab pipeline</h4><p>一个使用 poetry 的二方包发布的 gitlab pipeline 文件可以如下（集成了单测）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">sunpeek/poetry:py3.10-slim</span>   <span class=\"comment\"># 需要带有poetry的python镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">automatic_test</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">package_build_push</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">automatic_test_job:</span>   <span class=\"comment\">#</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">automatic_test</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">golang</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">virtualenvs.create</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 在容器中，不用创建虚拟环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">lock</span>     <span class=\"comment\"># 锁定依赖版本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">install</span>  <span class=\"comment\"># 下载依赖</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">pytest</span> <span class=\"string\">tests/</span>   <span class=\"comment\"># 执行测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">package_build_push_job:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">package_build_push</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span>    <span class=\"comment\"># 触发条件：只有打tag之后才会触发该job</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">repositories.foo-pub</span> <span class=\"string\">https://pypi.example.org/legacy/</span>   <span class=\"comment\"># 添加发布仓库</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">http-basic.foo-pub</span> <span class=\"string\">$FOO_USERNAME</span> <span class=\"string\">$FOO_PASSWORD</span>          <span class=\"comment\"># 添加发布仓库的用户名密码，通过流水线环境变量可以设置</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">sed</span> <span class=\"string\">-i</span> <span class=\"string\">&quot;s/^version = \\&quot;.*\\&quot;/version = \\&quot;$CI_COMMIT_TAG\\&quot;/&quot;</span> <span class=\"string\">pyproject.toml</span>  <span class=\"comment\"># 修改构建版本，与TAG一致</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">publish</span> <span class=\"string\">--build</span>  <span class=\"string\">--repository</span> <span class=\"string\">foo-pub</span>   <span class=\"comment\"># 打包并推送</span></span><br></pre></td></tr></table></figure>\n\n<p>简单来说，gitlab 在我们打上一个 tag 之后，会起一个 runner 执行这个 yml 文件的 script（具体过程可自行了解）。因此当我们想要发布一个版本时，推到镜像仓库后，打一个 tag，gitlab pipeline 就会进行打包，推送，并且推送到仓库的包的版本和我们的 TAG 是严格对应的。</p>\n<h4 id=\"github-actions-1\"><a href=\"#github-actions-1\" class=\"headerlink\" title=\"github actions\"></a>github actions</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Release</span> <span class=\"string\">package</span>           <span class=\"comment\"># workflow名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span>                            <span class=\"comment\"># 触发条件，新建tag时触发</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;*&#x27;</span>                  <span class=\"comment\"># 任意标签都会触发工作流</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pkg:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span>    <span class=\"comment\"># 使用checkout这个已有的action来初始化git环境</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Python</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.python-version</span> <span class=\"string\">&#125;&#125;</span>   <span class=\"comment\"># 使用setup-python来初始化python环境</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.python-version</span> <span class=\"string\">&#125;&#125;</span>     <span class=\"comment\"># 指定python版本</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Poetry</span>                 <span class=\"comment\"># 使用setup-poetry这个已有的action来初始化poetry</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">Gr1N/setup-poetry@v9</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Extract</span> <span class=\"string\">version</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">extract_version</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          VERSION=&quot;$&#123;GITHUB_REF#refs/tags/&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;VERSION=$&#123;VERSION&#125;&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Replace</span> <span class=\"string\">version</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          sed -i &quot;s/^version = \\&quot;.*\\&quot;/version = \\&quot;$&#123;&#123; env.VERSION &#125;&#125;\\&quot;/&quot; pyproject.toml</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">Package</span>        <span class=\"comment\"># 打包</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          poetry config virtualenvs.create false</span></span><br><span class=\"line\"><span class=\"string\">          poetry build</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span>    <span class=\"comment\"># 发布</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">PYPI_API_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.PYPI_API_TOKEN</span> <span class=\"string\">&#125;&#125;</span>    <span class=\"comment\"># 提前定义pypi的 api token</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          poetry config pypi-token.pypi $PYPI_API_TOKEN</span></span><br><span class=\"line\"><span class=\"string\">          poetry publish</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>poetry 作为集环境管理，依赖管理，打包发布一体的工具，虽然有上手难度，但从长期来看是值得使用的，强烈推荐。gitlab pipeline&#x2F;github actions 的使用倒是可以看自身需求，如果项目比较小，发布次数少，不要求代码分支与包的版本严格对应，是可以不用的。此外，我们在使用 gitlab pipeline 时也可以适当没那么“严格”，比如，为了图方便我们可以在本地发布非正式版本，而正式版本则走 pipeline，保证正式版本的稳定。</p>\n<h2 id=\"应用发布\"><a href=\"#应用发布\" class=\"headerlink\" title=\"应用发布\"></a>应用发布</h2><p>应用发布即让我们的应用运行在机器上，对外提供服务。应用的运行形态可以基本分为容器&#x2F;虚拟机，后文中都基于使用更广泛的容器来进行说明。</p>\n<p>应用发布大体上分为两个阶段，一个是镜像的打包与推送，另一个是镜像拉取和启动容器。其中，镜像推送，镜像拉取和启动容器对于每一种应用程序都是大差不差的，而镜像打包则是差异比较大的，所以这里我就镜像打包展开来讲。</p>\n<h3 id=\"镜像打包\"><a href=\"#镜像打包\" class=\"headerlink\" title=\"镜像打包\"></a>镜像打包</h3><p>镜像的大小关乎到推送和拉取的效率，因此我们要尽可能地减小镜像大小。python 的基础镜像中，<code>slim</code>版本的基础镜像移除了不必要的系统个工具和库，因此基础镜像我们选择<code>slim</code>版本（127MB 左右）。</p>\n<p>此外，我们如果使用了 poetry 来作为依赖管理的工具，那在打包时就有两种选择：第一种是直接将 poetry 打到基础镜像中，第二种是使用 multi-stage build，即在第一个阶段先下载 poetry，导出依赖到 requirements.txt，然后在第二个阶段使用 pip install 来下载依赖。multi-stage build 虽然最终的镜像里不包含 poetry，但是第一个阶段下载 poetry 和导出依赖都需要时间，而第一种方法中直接将 poetry 打到基础镜像中，镜像大小也只增加了不到 100MB，在可以接受的范围内，因此我更推荐第一种。</p>\n<p>确定好镜像策略后，我们来看看 Dockerfile 长啥样（基础镜像的打包就是在 python 基础镜像的上面使用 pip 下载 poetry 即可，不再赘述）：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 包含poetry的python基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sunpeek/poetry:py3.<span class=\"number\">10</span>-slim</span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"language-bash\"> maintainer=<span class=\"string\">&quot;robocanic@gmail.com&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"># Keeps Python from generating .pyc files in the container</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PYTHONDONTWRITEBYTECODE=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># Turns off buffering for easier container logging</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PYTHONUNBUFFERED=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mv source code to a specific directory</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /appruntime</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . /appruntime</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># no need to create virtual env</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> poetry config virtualenvs.create <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"comment\"># analyze deps</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> poetry lock</span></span><br><span class=\"line\"><span class=\"comment\"># Install deps</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> poetry install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creates a non-root user with an explicit UID and adds permission to access the /appruntime folder</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> adduser -u 5678 --disabled-password --gecos <span class=\"string\">&quot;&quot;</span> appuser &amp;&amp; <span class=\"built_in\">chown</span> -R appuser /appruntime</span></span><br><span class=\"line\"><span class=\"keyword\">USER</span> appuser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;uvicorn&quot;</span>, <span class=\"string\">&quot;poetry_fastapi_demo.main:app&quot;</span>, <span class=\"string\">&quot;--host=0.0.0.0&quot;</span>, <span class=\"string\">&quot;--port=8080&quot;</span>, <span class=\"string\">&quot;--log-config=/appruntime/log.yaml&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CI-集成-2\"><a href=\"#CI-集成-2\" class=\"headerlink\" title=\"CI 集成\"></a>CI 集成</h3><p>如果使用了 gitlab pipeline&#x2F;github actions，那我们可以将镜像打包，镜像推送都结合到 CI 中</p>\n<h4 id=\"gitlab-pipeline-2\"><a href=\"#gitlab-pipeline-2\" class=\"headerlink\" title=\"gitlab pipeline\"></a>gitlab pipeline</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">variables:</span>    <span class=\"comment\"># 变量</span></span><br><span class=\"line\">  <span class=\"attr\">IMAGE_NAME:</span> <span class=\"string\">$CI_PROJECT_PATH</span></span><br><span class=\"line\">  <span class=\"attr\">PROJECT_NAME:</span> <span class=\"string\">$CI_PROJECT_NAME</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">automatic_test_dev</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">package_build_push_dev</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy_dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">automatic_test_job_dev:</span>   <span class=\"comment\"># 我们只在联调/测试时执行自动化测试，生产环境为了加快发布速度，不执行测试</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">sunpeek/poetry:py3.10-slim</span>    <span class=\"comment\"># 使用带poetry的python镜像</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">automatic_test_dev</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">python</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">virtualenvs.create</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 在容器中，不用创建虚拟环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">lock</span>     <span class=\"comment\"># 锁定依赖版本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">install</span>  <span class=\"comment\"># 下载依赖</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">pytest</span> <span class=\"string\">tests/</span>   <span class=\"comment\"># 执行测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">package_build_push_job_dev:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker:27.3</span>  <span class=\"comment\"># 使用docker镜像</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">package_build_push_dev</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">python</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">BUILDTIME</span>   <span class=\"comment\"># 缓存构建时间文件供下一个job使用</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">date</span> <span class=\"string\">+&#x27;%Y%m%d%H%M&#x27;</span> <span class=\"string\">&gt;</span> <span class=\"string\">BUILDTIME</span>  <span class=\"comment\"># 将构建时间写到文件</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">export</span> <span class=\"string\">IMAGE_TAG=dev-$(cat</span> <span class=\"string\">BUILDTIME)-$CI_COMMIT_SHORT_SHA</span> <span class=\"comment\"># 镜像tag  dev-[年月日时分]-[commit id前八位]</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">export</span> <span class=\"string\">IMAGE_NAME=$(echo</span> <span class=\"string\">$IMAGE_NAME</span> <span class=\"string\">|</span> <span class=\"string\">tr</span> <span class=\"string\">&#x27;A-Z&#x27;</span> <span class=\"string\">&#x27;a-z&#x27;</span><span class=\"string\">)</span>  <span class=\"comment\"># 把gitlab的目录和项目名小写作为镜像名</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">login</span> <span class=\"string\">-u</span> <span class=\"string\">$REGISTRY_USERNAME</span> <span class=\"string\">-p</span> <span class=\"string\">$REGISTRY_PASSWORD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">build</span>  <span class=\"string\">-t</span> <span class=\"string\">$IMAGE_NAME:$IMAGE_TAG</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">push</span> <span class=\"string\">$IMAGE_NAME:$IMAGE_TAG</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"github-actions-2\"><a href=\"#github-actions-2\" class=\"headerlink\" title=\"github actions\"></a>github actions</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Release</span> <span class=\"string\">deploy</span>           <span class=\"comment\"># workflow名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span>                            <span class=\"comment\"># 触发条件，新建tag时触发</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;*&#x27;</span>                   <span class=\"comment\"># 任意标签都会触发工作流</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pkg:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">QEMU</span>       <span class=\"comment\"># 初始化qemu</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/setup-qemu-action@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Docker</span> <span class=\"string\">Buildx</span>   <span class=\"comment\"># 初始化buildx</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/setup-buildx-action@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Login</span> <span class=\"string\">to</span> <span class=\"string\">Docker</span> <span class=\"string\">Hub</span>   <span class=\"comment\"># 登录dockerhub</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/login-action@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DOCKERHUB_USERNAME</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DOCKERHUB_PASSWORD</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Extract</span> <span class=\"string\">version</span>   <span class=\"comment\"># 提取tag</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">extract_version</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          VERSION=&quot;$&#123;GITHUB_REF#refs/tags/&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;VERSION=$&#123;VERSION&#125;&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">and</span> <span class=\"string\">push</span>   <span class=\"comment\"># 构建镜像并推送</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/build-push-action@v6</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">push:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">tags:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.repository</span> <span class=\"string\">&#125;&#125;:$&#123;&#123;</span> <span class=\"string\">env.VERSION</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>如果你使用 docker compose&#x2F;docker swarm&#x2F;k8s 等基础设施，你还可以结合 docker&#x2F;kubectl 或者 docker api&#x2F;k8s api 来进行 CD，从而实现应用从发布到部署完全流水线化。</p>\n<p>应用的发布在不同的团队，不同的公司是有着不同的流程和偏好的，以上只是我提供的一种实现参考，但是无论是什么发布流程，考虑的重点其实是大差不差的：</p>\n<ol>\n<li><p>镜像大小要尽可能压缩</p>\n</li>\n<li><p>发布要做到可回滚，可灰度</p>\n</li>\n<li><p>发布流程中的信息要可追溯</p>\n</li>\n<li><p>发布中用到的组件复用度要高</p>\n</li>\n<li><p>……</p>\n</li>\n</ol>\n<p>按照这些个思路去编排发布流水线，相信你能得到一个理想中的流水线。</p>\n","excerpt":"","more":"<p>Python 作为一个弱类型语言，似乎从诞生之初就被很多人觉得这是一个很随便的语言，构建一个可靠的 Python 项目是一个很难的事情。事实也确实如此，随着 AI 的爆发，入坑 Python 的人越来越多，但对 Python 的诟病却只增不减。不过，Python 工程化还是在诟病中曲折前进的，到今天为止，尽管还存在着一些混乱，Python 工程化的标准趋于基本完善。本篇将从“过来人”的视角，由浅入深地讲述 python 工程化的方方面面，提供一个最佳实践供你参考。</p>\n<h1 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h1><p>Python 作为脚本语言，一个.py 文件能放在任何地方运行，但是<strong>一个清晰的目录结构不仅易于排查问题，更方便别人读懂我们的代码，更加优雅</strong>。Python 由于其应用广泛，不同类型的 Python 项目也有着不同的目录结构规约。这里我选取普通应用工程和数据&#x2F;AI 工程这两种最为广泛的类型进行说明。</p>\n<h2 id=\"普通应用工程\"><a href=\"#普通应用工程\" class=\"headerlink\" title=\"普通应用工程\"></a>普通应用工程</h2><p>假定我们的项目名为<code>robocanic-project</code>，普通应用工程最常用的目录结构风格如下所示：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> robocanic-project/</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── robocanic_project/      # 主包，我们的核心代码都在这里面</span><br><span class=\"line\"> │   ├── __init__.py         # 包初始化文件</span><br><span class=\"line\"> │   ├── module1.py          # 模块1</span><br><span class=\"line\"> │   ├── module2.py          # 模块2</span><br><span class=\"line\"> │   └── main.py             # 主程序入口</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── tests/                  # 测试目录</span><br><span class=\"line\"> │   ├── __init__.py</span><br><span class=\"line\"> │   ├── test_module1.py</span><br><span class=\"line\"> │   └── test_module2.py</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── requirements.txt        # 依赖文件</span><br><span class=\"line\"> ├── setup.py                # 安装脚本</span><br><span class=\"line\"> ├── README.md               # 项目说明</span><br><span class=\"line\"> └── .gitignore              # Git忽略文件</span><br></pre></td></tr></table></figure>\n\n<p>那上面这种还比较宽泛，如果以前后端分离的后端 Web 应用这种比较常见的项目为例，目录结构可以是下面这样的：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">robocanic-project/</span><br><span class=\"line\">├── robocanic_project/                     # 主应用程序目录</span><br><span class=\"line\">│   ├── __init__.py          # 将该目录标识为包，通常初始化 FastAPI 实例</span><br><span class=\"line\">│   ├── main.py              # 主文件，包含应用实例和路由</span><br><span class=\"line\">│   ├── api/                 # API 路由目录</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── v1/              # API 的 v1 版本（可选分版本目录）</span><br><span class=\"line\">│   │   │   ├── __init__.py</span><br><span class=\"line\">│   │   │   ├── routes/   # 具体的 API 端点</span><br><span class=\"line\">│   │   │   │   ├── __init__.py</span><br><span class=\"line\">│   │   │   │   ├── user.py  # 用户相关的 API 路由</span><br><span class=\"line\">│   │   │   │   └── item.py  # 其他模块（如商品）的 API 路由</span><br><span class=\"line\">│   │   │   └── ...          # 更多 API 路由</span><br><span class=\"line\">│   ├── core/                # 核心配置模块</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── config.py        # 配置文件，包含数据库连接、第三方服务配置等</span><br><span class=\"line\">│   │   ├── security.py      # 安全相关的设置，例如 OAuth2、JWT</span><br><span class=\"line\">│   ├── models/              # 数据库模型</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── user.py          # 用户模型</span><br><span class=\"line\">│   │   └── item.py          # 其他数据模型</span><br><span class=\"line\">│   ├── crud/                # 增删改查操作的封装</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── user.py          # 用户的 CRUD 操作</span><br><span class=\"line\">│   │   └── item.py          # 其他数据的 CRUD 操作</span><br><span class=\"line\">│   ├── db/                  # 数据库初始化及连接</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   ├── base.py          # 基础的数据库模型</span><br><span class=\"line\">│   │   └── session.py       # 数据库会话（SQLAlchemy 会话）</span><br><span class=\"line\">│   ├── tests/               # 测试目录</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── test_user.py     # 用户相关的测试文件</span><br><span class=\"line\">│   │   └── test_item.py     # 其他模块的测试文件</span><br><span class=\"line\">│   ├── utils/               # 工具函数目录</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   │   └── hashing.py       # 用于密码加密/解密等实用工具</span><br><span class=\"line\">    ├── alembic/             # 数据库迁移工具 Alembic 相关文件（如果使用）</span><br><span class=\"line\">│   │   ├── versions/        # 每个迁移文件都保存在这个目录中</span><br><span class=\"line\">│   │   ├── env.py           # Alembic 环境配置文件</span><br><span class=\"line\">│   │   ├── README           # Alembic 说明</span><br><span class=\"line\">│   │   └── script.py.mako   # Alembic 脚本模板</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── .env                     # 环境变量文件（敏感信息，不应提交到版本控制）</span><br><span class=\"line\">├── .gitignore               # Git 忽略文件列表</span><br><span class=\"line\">├── requirements.txt         # 依赖包列表（如果使用 pip）</span><br><span class=\"line\">├── setup.py                 # 安装脚本（如果使用setuptools）</span><br><span class=\"line\">├── pyproject.toml           # 项目元数据及依赖管理（如果使用 poetry）</span><br><span class=\"line\">├── README.md                # 项目说明文件</span><br><span class=\"line\">└── Dockerfile               # Docker 配置文件（如果使用容器化）</span><br></pre></td></tr></table></figure>\n\n<p>一个以 FastAPI 为基础 Web 框架的项目的目录结构如上所示。其中，除了<code>api</code>，<code>models</code>，<code>crud</code>，<code>utils</code>这类见名知意的目录，还有一个不太常见的<code>alembic</code>这个目录，alembic 其实是数据库迁移（<strong>Database Migration</strong>）的工具。而数据库迁移就是指在我们的应用开发过程中，当涉及到需要修改 ORM 对应的数据库结构（例如表、字段、索引等）时，引入的一套逐步演进数据库的状态，使其与应用代码保持一致的工具。这套工具一般是半自动或者全自动的，可以大大降低手动操作数据库带来的风险。</p>\n<h2 id=\"数据-AI-工程\"><a href=\"#数据-AI-工程\" class=\"headerlink\" title=\"数据&#x2F;AI 工程\"></a>数据&#x2F;AI 工程</h2><p>而对于数据科学，模型训练，科学计算这类项目，则有着另一套完全不一样的目录风格：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">robocanic-project/</span><br><span class=\"line\">├── data/</span><br><span class=\"line\">├── notebooks/</span><br><span class=\"line\">├── scripts/</span><br><span class=\"line\">├── requirements.txt</span><br><span class=\"line\">└── README.md</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以上是比较简略的目录结构，展开来看：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">robocanic-project/</span><br><span class=\"line\">├── data/</span><br><span class=\"line\">│   ├── raw/                  # 原始数据（未处理的数据）</span><br><span class=\"line\">│   ├── processed/            # 处理后的数据（清洗后的数据、特征工程后的数据）</span><br><span class=\"line\">│   └── external/             # 外部数据源（可能是API或第三方提供的数据）</span><br><span class=\"line\">│</span><br><span class=\"line\">├── notebooks/                # Jupyter Notebooks（探索性分析和初步模型）</span><br><span class=\"line\">│   ├── 01_data_exploration.ipynb  # 数据探索</span><br><span class=\"line\">│   ├── 02_data_cleaning.ipynb     # 数据清理</span><br><span class=\"line\">│   └── 03_model_training.ipynb    # 模型训练</span><br><span class=\"line\">│</span><br><span class=\"line\">├── scripts/                  # 数据处理和模型训练的Python脚本</span><br><span class=\"line\">│   ├── data_preprocessing.py  # 数据预处理脚本</span><br><span class=\"line\">│   ├── train_model.py         # 模型训练脚本</span><br><span class=\"line\">│   └── evaluate_model.py      # 模型评估脚本</span><br><span class=\"line\">│</span><br><span class=\"line\">├── models/                   # 保存的模型（训练好的模型、标记化文件等）</span><br><span class=\"line\">│   └── model_v1.pkl           # 保存的模型文件</span><br><span class=\"line\">│</span><br><span class=\"line\">├── reports/                  # 项目报告与结果展示</span><br><span class=\"line\">│   ├── figures/              # 图表和可视化结果</span><br><span class=\"line\">│   └── final_report.pdf      # 最终报告或结果总结</span><br><span class=\"line\">│</span><br><span class=\"line\">├── requirements.txt          # 项目所需的依赖库列表</span><br><span class=\"line\">├── environment.yml           # Conda 环境配置文件</span><br><span class=\"line\">├── README.md                 # 项目说明文件</span><br><span class=\"line\">└── .gitignore                # Git忽略文件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看出数据&#x2F;AI 项目和普通的应用还是有很大区别的。<strong>数据&#x2F;AI 项目更多是从数据的流向来进行目录结构的划分，从数据采集 → 数据处理 → 模型训练（数据聚合）→ 模型评估（数据评估）→…… 而普通应用项目则更多是按功能模块来划分，比如 MVC 的划分模式，以 APP 为核心的划分模型等。</strong></p>\n<p>总的来说，Python 工程的目录还是比较灵活的，我们在构建我们自己的项目目录时可以不拘泥于固定的目录结构，但也要遵循上面提到的一些基本规律，这样别人上手我们的项目时能够快速读懂我们的项目结构，进而读懂代码。</p>\n<h1 id=\"项目环境与依赖管理\"><a href=\"#项目环境与依赖管理\" class=\"headerlink\" title=\"项目环境与依赖管理\"></a>项目环境与依赖管理</h1><p>接下来要谈到的部分个人认为是 python 中最混乱的部分——依赖管理。但是讲 Python 的依赖管理不能只讲依赖管理，还要连带着**虚拟环境(Virtual Environment)**一起讲。</p>\n<p>不同于 Java，Go 这类依赖跟着项目走的做法，Python 项目的依赖是对于当前虚拟环境而言的。也就是说你在命令行中敲下<code>pip install fastapi</code>去下载 fastapi 这个包时，这个依赖是对当前环境有效的，如果项目 A 和项目 B 都使用了虚拟环境 E，那项目 A 和项目 B 都可以使用<code>fastapi</code>这个依赖，如果有多个项目都需要依赖<code>fastapi</code>，那是不是把他们放到一个虚拟化环境里就行？答案是否定的，因为一般来说，一个项目不单单只依赖一个<code>fastapi</code>，还有其他的依赖。比如两个项目 A 和 B 依赖了一个共同的包<code>pymysql</code>，但是依赖的版本不一样，这样就会发生依赖冲突。因此我们在创建 Python 项目时，一般都会创建一个对应的虚拟环境来防止依赖冲突。所以到这你就会发现虚拟环境其实还是项目层面的，一个项目就对应一个虚拟环境，虚拟环境的这个设计说实话很鸡肋，不仅相同版本的包不能得到复用，还变相地提高了依赖管理的复杂度。</p>\n<p>吐槽完之后，我们来看看现阶段环境管理以及依赖管理的最佳实践。这个最佳实践包括不推荐的方式 venv&#x2F;virtualenv+pip，以及两种推荐的方式：conda+pip，poetry。</p>\n<h2 id=\"venv-virtualenv-pip（不推荐）\"><a href=\"#venv-virtualenv-pip（不推荐）\" class=\"headerlink\" title=\"venv&#x2F;virtualenv+pip（不推荐）\"></a>venv&#x2F;virtualenv+pip（不推荐）</h2><p>venv 和 virtualenv 都是用来创建 python 虚拟环境的工具，不同的地方在于 venv 是 python3.3 后自带的轻量级虚拟环境创建工具，只能用于 python3；而 virtualenv 则需要另外安装，可以用于 py2 以及 py3，还有一些 venv 没有的功能（个人觉得可有可无）。那对于 python3.3 以后的项目，现在都推荐自带的 venv 了。venv 使用起来也很简单：</p>\n<ol>\n<li><p><code>python -m venv venv</code>命令的第一个 venv，是运行 venv 这个模块来创建一个虚拟环境。第二个 venv 是指虚拟环境的文件夹的名字，这个可以根据需要来修改。命令执行后，会在当前文件夹中，建立一个 venv 目录。 在这个 venv 目录中，会默认放置 python.exe、pip.exe 等与系统目录隔离的可执行文件和依赖。一般 venv 会放置在项目的根目录下。</p>\n</li>\n<li><p>进入到<code>venv/Scipts</code>文件夹，执行<code>activate</code>，可以激活当前的虚拟环境; 执行<code>deactivate</code>，可以停用当前虚拟环境</p>\n</li>\n<li><p>删除这个虚拟环境只需要删除掉项目根目录下的 venv 文件夹即可。</p>\n</li>\n</ol>\n<p>venv 没有管理虚拟环境的功能，这是因为虚拟环境的依赖都跟着项目走了（venv 文件夹在项目根目录下）。因此它足够的轻量。</p>\n<p>pip 是一个轻量级包管理工具，安装 python 时都会自带 pip。pip 最常用的命令有用于下载依赖的<code>pip install deps</code>、<code>pip install -r requirements</code>和用于删除依赖的<code>pip uninstall deps</code>。很多人在一开始使用 pip 时还觉得简单好用，但在使用多了之后就深恶痛绝。pip 让人深恶痛绝的最主要的两个原因如下：</p>\n<ol>\n<li><p>在命令行执行完<code>pip install deps</code>后下载的依赖不会同步到 requirements.txt 中，同样<code>pip uninstall deps</code>删除的依赖也不会删除 requirements 中声明的依赖。</p>\n</li>\n<li><p><strong><code>pip uninstall deps</code>只会删除<code>deps</code>这个直接依赖，而不会删除最初下载<code>deps</code>这个包引入的间接依赖</strong></p>\n</li>\n</ol>\n<p>其中，第一点还可以使用<code>pip freeze &gt; requirements.txt</code>来完成手动同步，第二点则是吐槽最多的点。这两点经常会引起依赖冲突，生产环境与本地开发环境不一致的情况出现。所以在使用 venv+pip 组合时，得遵循一个开发范式，包括但不限于以下几点</p>\n<ol>\n<li><p>直接依赖需要写入 requirements.txt 中，使用<code>pip install -r requirements</code>来下载依赖，摈弃<code>pip install deps</code>，保证项目依赖相对清晰</p>\n</li>\n<li><p>发版时必须执行<code>pip freeze &gt; requirements.txt</code>来保证本地与云端环境一致</p>\n</li>\n</ol>\n<h2 id=\"conda-pip（推荐用于数据-AI-领域）\"><a href=\"#conda-pip（推荐用于数据-AI-领域）\" class=\"headerlink\" title=\"conda+pip（推荐用于数据&#x2F;AI 领域）\"></a>conda+pip（推荐用于数据&#x2F;AI 领域）</h2><p>conda 不仅是一个包管理工具库，还是一个环境管理工具，广泛用于科学计算领域，conda 命令也比较简单易用，使用 conda 的基本步骤如下：</p>\n<ol>\n<li><p><code>conda create -n my-ns</code>创建一个隔离的虚拟环境</p>\n</li>\n<li><p><code>conda activate my-ns</code>，激活虚拟环境</p>\n</li>\n<li><p><code>conda install dps</code>下载依赖</p>\n</li>\n<li><p><code>conda remve deps</code> 卸载依赖，conda 在卸载依赖时会智能地处理包的依赖关系，将间接依赖中无用的包也会一并卸载</p>\n</li>\n<li><p><code>conda remove --name my-ns --all</code>删除虚拟环境</p>\n</li>\n</ol>\n<p>其中，conda 创建的虚拟环境会维护一个与环境名同名的文件目录（类似 venv），但这个文件目录会统一放在一个地方，不会放在项目根目录下，这也让多个使用 conda 的项目“有了共享虚拟环境的可能”。那 conda 既能管理环境，又能管理依赖，是不是就能替代 pip？很遗憾还是不能，主要原因有两点：</p>\n<ol>\n<li><p>conda 主要用于数据科学领域，整个环境安装起来就比较重，环境初始时就自带了很多依赖，很多依赖是普通项目不需要的。此外，conda 下载依赖的速度也会慢一些。</p>\n</li>\n<li><p>conda 的包与 pip 安装的包不一样，conda 包是二进制格式的，除了数据科学领域，很多 python 库都会在 PyPI 上发布，但不会在 Anaconda repository 上发布</p>\n</li>\n</ol>\n<p>所以以上两点就限制了 conda 的应用领域，除了数据科学领域，conda 就只能作为一个环境管理的工具。那对于使用 conda 来管理环境的情况，pip 一般也是不可或缺的，使用时的注意点同上面的<code>venv+pip</code></p>\n<h2 id=\"poetry（推荐）\"><a href=\"#poetry（推荐）\" class=\"headerlink\" title=\"poetry（推荐）\"></a>poetry（推荐）</h2><blockquote>\n<p>以下代码地址: <a href=\"https://github.com/robocanic/poetry-fastapi-demo.git\">https://github.com/robocanic/poetry-fastapi-demo.git</a></p>\n</blockquote>\n<p>上面两种环境与依赖管理的方式都有一个比较棘手的点无法解决，那就是 pip 卸载依赖时无法删除引入的间接依赖，这很可能会导致<strong>依赖臃肿，依赖冲突</strong>等问题。</p>\n<p>poetry 是一个 python 依赖管理与环境管理的工具，它能够分析出哪些是直接依赖，哪些是间接依赖，在删除依赖时能够删掉无用的间接依赖，保持项目依赖的清爽。此外，poetry 还有指定模糊依赖，依赖快速升级等实用的功能，这让它在依赖管理方面直接甩了 pip 好几条街。至于环境管理，poetry 则是在 virtualenv 的基础上，增强了一些功能，如自动创建虚拟环境，集中&#x2F;分离的环境管理等等。</p>\n<p>poetry 的命令会相对多一些，但常用的也只有几个，下面从建立一个新项目的流程来熟悉一下如何使用 poetry：</p>\n<h4 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h4><p>在创建文件夹后，执行<code>poetry init</code>，会有一系列互动的 command 来引导你创建<code>pyproject.toml</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">PS</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo&gt;poetry</span> <span class=\"string\">init</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">This</span> <span class=\"string\">command</span> <span class=\"string\">will</span> <span class=\"string\">guide</span> <span class=\"string\">you</span> <span class=\"string\">through</span> <span class=\"string\">creating</span> <span class=\"string\">your</span> <span class=\"string\">pyproject.toml</span> <span class=\"string\">config.</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">Package</span> <span class=\"string\">name</span> [<span class=\"string\">poetry-fastapi-demo</span>]<span class=\"string\">:</span>  </span><br><span class=\"line\"> <span class=\"string\">Version</span> [<span class=\"number\">0.1</span><span class=\"number\">.0</span>]<span class=\"string\">:</span>  </span><br><span class=\"line\"> <span class=\"string\">Description</span> []<span class=\"string\">:</span>  <span class=\"string\">A</span> <span class=\"string\">web</span> <span class=\"string\">project</span> <span class=\"string\">template</span> <span class=\"string\">using</span> <span class=\"string\">poetry</span> <span class=\"string\">and</span> <span class=\"string\">fastapi.</span></span><br><span class=\"line\"> <span class=\"string\">Author</span> [<span class=\"string\">robocanic</span> <span class=\"string\">&lt;robocanic@example.com&gt;</span>, <span class=\"string\">n</span> <span class=\"string\">to</span> <span class=\"string\">skip</span>]<span class=\"string\">:</span>  </span><br><span class=\"line\"> <span class=\"string\">License</span> []<span class=\"string\">:</span>  <span class=\"string\">Apache</span> <span class=\"number\">2.0</span></span><br><span class=\"line\"> <span class=\"string\">Compatible</span> <span class=\"string\">Python</span> <span class=\"string\">versions</span> [<span class=\"string\">^3.11</span>]<span class=\"string\">:</span>  <span class=\"string\">~3.10</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">Would</span> <span class=\"string\">you</span> <span class=\"string\">like</span> <span class=\"string\">to</span> <span class=\"string\">define</span> <span class=\"string\">your</span> <span class=\"string\">main</span> <span class=\"string\">dependencies</span> <span class=\"string\">interactively?</span> <span class=\"string\">(yes/no)</span> [<span class=\"literal\">yes</span>] <span class=\"literal\">no</span></span><br><span class=\"line\"> <span class=\"string\">Would</span> <span class=\"string\">you</span> <span class=\"string\">like</span> <span class=\"string\">to</span> <span class=\"string\">define</span> <span class=\"string\">your</span> <span class=\"string\">development</span> <span class=\"string\">dependencies</span> <span class=\"string\">interactively?</span> <span class=\"string\">(yes/no)</span> [<span class=\"literal\">yes</span>] <span class=\"literal\">no</span></span><br><span class=\"line\"> <span class=\"string\">Generated</span> <span class=\"string\">file</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">tool.poetry</span>]</span><br><span class=\"line\"> <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;poetry-fastapi-demo&quot;</span></span><br><span class=\"line\"> <span class=\"string\">version</span> <span class=\"string\">=</span> <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"> <span class=\"string\">description</span> <span class=\"string\">=</span> <span class=\"string\">&quot;A web project template using poetry and fastapi.&quot;</span></span><br><span class=\"line\"> <span class=\"string\">authors</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;robocanic &lt;robocanic@example.com&gt;&quot;</span>]</span><br><span class=\"line\"> <span class=\"string\">license</span> <span class=\"string\">=</span> <span class=\"string\">&quot;Apache 2.0&quot;</span></span><br><span class=\"line\"> <span class=\"string\">readme</span> <span class=\"string\">=</span> <span class=\"string\">&quot;README.md&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">tool.poetry.dependencies</span>]</span><br><span class=\"line\"> <span class=\"string\">python</span> <span class=\"string\">=</span> <span class=\"string\">&quot;~3.10&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">build-system</span>]</span><br><span class=\"line\"> <span class=\"string\">requires</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;poetry-core&quot;</span>]</span><br><span class=\"line\"> <span class=\"string\">build-backend</span> <span class=\"string\">=</span> <span class=\"string\">&quot;poetry.core.masonry.api&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">Do</span> <span class=\"string\">you</span> <span class=\"string\">confirm</span> <span class=\"string\">generation?</span> <span class=\"string\">(yes/no)</span> [<span class=\"literal\">yes</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这里你在命令行输入的在后面都是可以通过修改<code>pyproject.toml</code>来同步的，因此一般我们都会快速地跳过这个阶段。生成的<code>pyproject.toml</code>如下所示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> [<span class=\"string\">tool.poetry</span>] <span class=\"comment\">#项目信息</span></span><br><span class=\"line\"> <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;poetry-fastapi-demo&quot;</span></span><br><span class=\"line\"> <span class=\"string\">version</span> <span class=\"string\">=</span> <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"> <span class=\"string\">description</span> <span class=\"string\">=</span> <span class=\"string\">&quot;A web project template using poetry and fastapi.&quot;</span></span><br><span class=\"line\"> <span class=\"string\">authors</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;robocanic &lt;robocanic@example.com&gt;&quot;</span>]</span><br><span class=\"line\"> <span class=\"string\">license</span> <span class=\"string\">=</span> <span class=\"string\">&quot;Apache 2.0&quot;</span></span><br><span class=\"line\"> <span class=\"string\">readme</span> <span class=\"string\">=</span> <span class=\"string\">&quot;README.md&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">tool.poetry.dependencies</span>]  <span class=\"comment\">#主要依赖</span></span><br><span class=\"line\"> <span class=\"string\">python</span> <span class=\"string\">=</span> <span class=\"string\">&quot;~3.10&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br><span class=\"line\"> [<span class=\"string\">build-system</span>]  <span class=\"comment\"># 构建工具</span></span><br><span class=\"line\"> <span class=\"string\">requires</span> <span class=\"string\">=</span> [<span class=\"string\">&quot;poetry-core&quot;</span>]</span><br><span class=\"line\"> <span class=\"string\">build-backend</span> <span class=\"string\">=</span> <span class=\"string\">&quot;poetry.core.masonry.api&quot;</span></span><br><span class=\"line\"> <span class=\"string\">​</span></span><br></pre></td></tr></table></figure>\n\n<p>在创建<code>pyproject.toml</code>后，在项目根目录下执行<code>poetry env use python</code>，会创建一个该项目专有的虚拟环境：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"string\">PS</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo&gt;</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">virtualenvs.in-project</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"string\">PS</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo&gt;</span> <span class=\"string\">poetry</span> <span class=\"string\">env</span> <span class=\"string\">use</span> <span class=\"string\">D:\\env\\python\\python.exe</span></span><br><span class=\"line\"> <span class=\"string\">Creating</span> <span class=\"string\">virtualenv</span> <span class=\"string\">poetry-fastapi-demo</span> <span class=\"string\">in</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo\\.venv</span></span><br><span class=\"line\"> <span class=\"attr\">Using virtualenv:</span> <span class=\"string\">D:\\code\\python-projects\\poetry-fastapi-demo\\.venv</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我指定了 poetry 虚拟环境的路径放置在项目根目录的.venv 目录下，我觉得这样的项目组织方式更清晰。<code>poetry env use python</code> 这个命令默认使用系统环境变量中的 python，如果你想使用指定版本的 python，可以将 python 换成<code>path/to/your/py</code>。</p>\n<h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><p>我们可以编辑<code>pyproject.toml</code>，添加指定的依赖，再先后执行<code>poetry lock</code> 和<code>poetry install</code>，<code>poetry lock</code>会解析<code>pyproject.toml</code>中的主要依赖与开发依赖以及间接依赖，选择合适的依赖版本，记录到 poetry.lock 这个文件中。poetry.lock 的作用类似于 requirements.txt，即“锁定”项目需要的依赖（包括直接依赖和间接依赖）版本。紧接着的<code>poetry install</code>就会根据 poetry.lock 中的内容去下载相应版本的依赖。</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[tool.poetry]</span> <span class=\"comment\"># 项目信息</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;poetry-fastapi-demo&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version</span> = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">description</span> = <span class=\"string\">&quot;A web project template using poetry and fastapi.&quot;</span></span><br><span class=\"line\"><span class=\"attr\">authors</span> = [<span class=\"string\">&quot;robocanic &lt;robocanic@example.com&gt;&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">license</span> = <span class=\"string\">&quot;Apache 2.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">readme</span> = <span class=\"string\">&quot;README.md&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[tool.poetry.dependencies]</span>  <span class=\"comment\"># 主要依赖</span></span><br><span class=\"line\"><span class=\"attr\">python</span> = <span class=\"string\">&quot;~3.10&quot;</span>        <span class=\"comment\"># python版本&gt;=3.10 且 &lt;3.20</span></span><br><span class=\"line\"><span class=\"attr\">fastapi</span> = <span class=\"string\">&quot;^0.115.0&quot;</span>    <span class=\"comment\"># fastapi版本 &gt;=0.115.0 且 &lt;0.116.0</span></span><br><span class=\"line\"><span class=\"attr\">sqlalchemy</span> = <span class=\"string\">&quot;^2.0.36&quot;</span>  <span class=\"comment\"># sqlalchemy版本 &gt;=2.0.36 且 &lt; 3.0</span></span><br><span class=\"line\"><span class=\"attr\">pyyaml</span> = <span class=\"string\">&quot;^6.0.2&quot;</span>       <span class=\"comment\"># pyyaml版本 &gt;=6.0.2 且 &lt; 7.0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[tool.poetry.group.dev.dependencies]</span>  <span class=\"comment\"># 开发依赖</span></span><br><span class=\"line\"><span class=\"attr\">pytest</span> = <span class=\"string\">&quot;^8.3.3&quot;</span>       <span class=\"comment\"># pytest版本 &gt;=8.3.3 且 &lt; 9.0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[build-system]</span>  <span class=\"comment\"># 构建工具</span></span><br><span class=\"line\"><span class=\"attr\">requires</span> = [<span class=\"string\">&quot;poetry-core&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">build-backend</span> = <span class=\"string\">&quot;poetry.core.masonry.api&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们可以指定主要依赖和开发依赖，在发布部署时只打包主要依赖，这样就可以减小包的体积。同时我们可以指定依赖的版本范围，不同的符号有不同的指定范围策略，这一块可以参考 poetry 官方文档：<a href=\"https://python-poetry.org/docs/dependency-specification/\">https://python-poetry.org/docs/dependency-specification/</a></p>\n<p>此外，我们也可以直接使用命令行<code>poetry add deps</code>来下载包，这个命令会自动地更新<code>pyproject.toml</code>以及<code>poetry.lock</code>文件，保证环境中的依赖与<code>pyproject.toml</code>中的的依赖的一致性。</p>\n<h4 id=\"删除依赖\"><a href=\"#删除依赖\" class=\"headerlink\" title=\"删除依赖\"></a>删除依赖</h4><p>我们可以通过编辑<code>pyproject.toml</code>，删除对应的依赖声明，然后执行<code>poetry lock</code> 即可，poetry 会自动帮我们把依赖删除。我们也可以使用<code>poetry remove deps</code>来删除依赖。</p>\n<p>poetry 的这两种删除方式都会解析<code>deps</code>的无用的间接依赖，将其一并删除。</p>\n<h4 id=\"删除虚拟环境\"><a href=\"#删除虚拟环境\" class=\"headerlink\" title=\"删除虚拟环境\"></a>删除虚拟环境</h4><p>执行<code>poetry env remove poetry-demo</code>，即可删除虚拟环境。</p>\n<blockquote>\n<p>如果在 poetry 的配置中指定了<code>poetry config virtualenvs.in-project true</code>，虚拟环境维护的目录就会放在项目的根目录下。类似于 venv 的方式，因此这种情况下删除.venv 文件夹就等同于删除虚拟环境</p>\n</blockquote>\n<h4 id=\"查看依赖树\"><a href=\"#查看依赖树\" class=\"headerlink\" title=\"查看依赖树\"></a>查看依赖树</h4><p>poetry 中很实用的一个功能是它可以使用<code>poetry show --tree</code>来查看依赖关系，从而在依赖错误时能够更好地定位异常，更快速地解决问题。</p>\n<p><img src=\"https://image.robocanic.com/notes/image-20241104154436296.png\" alt=\"poetry-show--tree\"></p>\n<h4 id=\"导出依赖\"><a href=\"#导出依赖\" class=\"headerlink\" title=\"导出依赖\"></a>导出依赖</h4><p>理论上来说，有了 poetry 不再需要 pip 了，自然也不需要 requirements.txt 了，但是在后面的项目发布管理中我们会提到，当使用容器化部署时，我们希望我们的镜像尽可能地精简，我们的项目部署能尽可能快速。从精简镜像这个角度来看，poetry 对于我们的项目而言只是开发时依赖，在运行时我们希望只用最简单的依赖就能把项目跑起来。因此我们需要将 poetry.lock 中的依赖转化为 requirements.txt，这样部署时使用<code>pip install -r requirements.txt</code>下完依赖之后直接就能 run 起来项目。</p>\n<p>poetry 本身也支持导出环境内的依赖，使用<code>poetry export -f requirements.txt -o requirements.txt</code>就可以将环境中的所有依赖导出到 requirements.txt 中。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>poetry 作为环境管理与依赖管理合二为一的银弹，在体验下来，除了数据科学&#x2F;AI 领域的项目，我认为 poetry 是开发大多数 python 项目的最佳环境与依赖的管理方式。</p>\n<h1 id=\"项目日志\"><a href=\"#项目日志\" class=\"headerlink\" title=\"项目日志\"></a>项目日志</h1><blockquote>\n<p>以下代码地址: <a href=\"https://github.com/robocanic/poetry-fastapi-demo.git\">https://github.com/robocanic/poetry-fastapi-demo.git</a></p>\n</blockquote>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>日志的重要性不言而喻，我们这里探讨的“项目日志”，更准确地来说是怎么使用日志能够得到我们想要的效果。通常，我们对于日志会有一些要求：</p>\n<ol>\n<li><p>我们希望我们的日志能够显示出日志时间，日志等级(INFO, WARN, ERROR …..)，日志内容，所在线程，是由哪个组件&#x2F;py 文件打印的……</p>\n</li>\n<li><p>对于以上日志信息，不管是自己项目中的还是依赖包中的，都有一个统一的格式打印出来</p>\n</li>\n<li><p>不仅要在控制台打印，还需要保存到文件中，以便后续排查错误时能够追溯。</p>\n</li>\n<li><p>更进一步，我们希望 ERROR 级别的日志能够单独放到一个文件中，每天的日志按照日期做一个切割分块……</p>\n</li>\n</ol>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>在阐明日志需要达到的效果之后，我们来看看 python 中的 logging 模块，这个模块是 python 自带的，我们可以先来试用一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\">logging.info(<span class=\"string\">&quot;this is a info log&quot;</span>)</span><br><span class=\"line\">logging.warning(<span class=\"string\">&quot;this is a warning log&quot;</span>)</span><br><span class=\"line\">logging.error(<span class=\"string\">&quot;this is a error log&quot;</span>)</span><br><span class=\"line\">logging.critical(<span class=\"string\">&quot;this is a critical log&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">output:</span></span><br><span class=\"line\"><span class=\"string\">WARNING:root:this is a warning log</span></span><br><span class=\"line\"><span class=\"string\">ERROR:root:this is a error log</span></span><br><span class=\"line\"><span class=\"string\">CRITICAL:root:this is a critical log</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行这个 python 文件会发现控制台并没有打印出 info 级别的日志，这是因为 logging 模块提供的日志记录函数所使用的日志器设置的日志级别是<code>WARNING</code>，因此只有<code>WARNING</code>级别的日志记录以及大于它的<code>ERROR</code>和<code>CRITICAL</code>级别的日志记录被输出了，而小于它的<code>INFO</code>级别的日志记录被丢弃了。</p>\n<p>我们可以观察每条日志，每个日志都由三部分构成：<code>日志级别:日志器名称:日志内容</code>，这是因为 logging 模块提供的日志记录函数所使用的日志器设置的日志格式默认为<code>%(levelname)s:%(name)s:%(message)s</code>。</p>\n<p>那自然我们会想到，可不可以通过设置 logging 的日志级别与日志格式，来生成我们想要的日志格式？进一步，我们可不可以调整日志输出的位置，同时输出在控制台和文件？</p>\n<p>在回答这个问题之前，我们可以来先简单看下 logging 模块涉及到的四个组件</p>\n<ol>\n<li><p>日志器（Logger），提供了我们的代码可以使用的接口，即 log.info，log.warning，log.error 等</p>\n</li>\n<li><p>处理器（Handler），将 logger 创建的日志记录发送到合适的目的输出</p>\n</li>\n<li><p>过滤器（Filter），提供了更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录</p>\n</li>\n<li><p>格式器（Formatter），决定日志记录的输出格式</p>\n</li>\n</ol>\n<p>这些组件的关系大致如下：日志器（Logger）需要通过处理器（Handler）将日志信息输出到目标位置（文件，控制台，网络等）。而处理器（Handler）可以设置过滤器（Filter）和格式器（Formatter）来对日志进行过滤和格式化，再输出到指定的目标位置。</p>\n<p>因此上面的问题也有了答案：通过调整 Logger，Handler，Filter，Formatter 的设置和组合关系，我们可以得到我们想要的日志。</p>\n<p>我们可以通过 3 种方式来配置 logging：</p>\n<ol>\n<li><p>使用 Python 代码显式的创建 logger，handle，filter，formatter 并分别调用它们的配置函数</p>\n</li>\n<li><p>创建一个日志配置文件，然后使用<code>fileConfig()</code>函数来读取该文件的内容；</p>\n</li>\n<li><p>创建一个包含配置信息的 dict，然后把它传递给<code>dictConfig()</code>函数；</p>\n</li>\n</ol>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>这里我介绍一下第三种，其他两种可以自行研究。第三种我们通常会用一个 yaml&#x2F;json 文件来描述配置，然后使用<code>yaml.load</code>读取日志配置文件，转化成 dict，进而传递给<code>dictConfig()</code>，完成 logging 的配置。</p>\n<p>yaml 形式的日志配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">formatters:</span>  <span class=\"comment\"># 定义格式器</span></span><br><span class=\"line\">  <span class=\"attr\">default:</span>   <span class=\"comment\"># 格式器名</span></span><br><span class=\"line\">    <span class=\"attr\">format:</span> <span class=\"string\">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(threadName)s%(thread)d - %(message)s&#x27;</span>  <span class=\"comment\"># 日志格式：时间 - 日志器名 - 日志等级 - 线程名 线程ID - 日志内容</span></span><br><span class=\"line\">    <span class=\"attr\">datefmt:</span> <span class=\"string\">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>   <span class=\"comment\"># 时间格式</span></span><br><span class=\"line\">    <span class=\"attr\">use_colors:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># 使用颜色</span></span><br><span class=\"line\"><span class=\"attr\">handlers:</span>     <span class=\"comment\"># 定义处理器</span></span><br><span class=\"line\">  <span class=\"attr\">console:</span>    <span class=\"comment\"># 处理器名</span></span><br><span class=\"line\">    <span class=\"attr\">class:</span> <span class=\"string\">logging.StreamHandler</span>  <span class=\"comment\"># 使用的handler</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span>    <span class=\"comment\"># 日志等级</span></span><br><span class=\"line\">    <span class=\"attr\">formatter:</span> <span class=\"string\">default</span>  <span class=\"comment\"># 使用的formatter名字</span></span><br><span class=\"line\">    <span class=\"attr\">stream:</span> <span class=\"string\">ext://sys.stdout</span>  <span class=\"comment\"># 输出到控制台</span></span><br><span class=\"line\">  <span class=\"attr\">file:</span></span><br><span class=\"line\">    <span class=\"attr\">class:</span> <span class=\"string\">logging.FileHandler</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\">    <span class=\"attr\">formatter:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">filename:</span> <span class=\"string\">app.log</span>   <span class=\"comment\"># 输出到app.log</span></span><br><span class=\"line\"><span class=\"attr\">loggers:</span>         <span class=\"comment\"># 定义日志器</span></span><br><span class=\"line\">  <span class=\"attr\">poetry_fastapi_demo:</span>   <span class=\"comment\"># 日志器名称</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span>  <span class=\"comment\"># 日志等级</span></span><br><span class=\"line\">    <span class=\"attr\">handlers:</span>    <span class=\"comment\"># 使用的handler</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">file</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br><span class=\"line\">    <span class=\"attr\">propagate:</span> <span class=\"literal\">false</span>   <span class=\"comment\"># 是否传播到父logger再处理</span></span><br><span class=\"line\">  <span class=\"attr\">poetry_fastapi_demo.routers:</span>  <span class=\"comment\"># poetry_fastapi_demo的子logger</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\">    <span class=\"attr\">handlers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">file</span></span><br><span class=\"line\">    <span class=\"attr\">propagate:</span> <span class=\"literal\">false</span>   <span class=\"comment\"># 是否传播到父logger再处理</span></span><br><span class=\"line\">  <span class=\"attr\">uvicorn:</span></span><br><span class=\"line\">    <span class=\"attr\">level:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\">    <span class=\"attr\">handlers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">file</span></span><br><span class=\"line\">    <span class=\"attr\">propagate:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">root:</span>            <span class=\"comment\"># 根日志器，所有没有归属的日志都会由root来处理</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span> <span class=\"string\">INFO</span></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">file</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，logger 是有层级结构的，logger 的名称是一个以’.’分割的结构，每个’.’后面的 logger 都是’.’前面的 logger 的 children。而 root 是一个特殊的 logger，它会捕捉没有被其他 logger 处理的日志消息，我们依赖的三方包打印的日志大部分都会由 root logger 捕获到进行处理，因此 root 是很重要的兜底 logger。</p>\n<p>在完善好<code>log.yaml</code>后，我们做一个验证，<code>poetry-fastapi-demo</code>项目结构如下：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poetry-fastapi-demo/</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── poetry_fastapi_demo/         </span><br><span class=\"line\"> │   ├── models             # 模型</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">|   ├── routers             # 路由</span><br><span class=\"line\">|   |   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">|   ├── tables              # 增删改查</span><br><span class=\"line\">|   |   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">│   ├── __init__.py    </span><br><span class=\"line\">│   └── main.py             # 主程序入口</span><br></pre></td></tr></table></figure>\n\n<p><code>poetry_fastapi_demo/__init__.py</code>的内容如下，这里我们将 log.yaml 的路径以环境变量传入，然后使用<code>.dictConfig</code>完成日志的配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging.config</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\">log_conf_path = os.environ.get(<span class=\"string\">&quot;LOG_CONFIG&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(log_conf_path, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    dict_conf = yaml.safe_load(f)</span><br><span class=\"line\">logging.config.dictConfig(dict_conf)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>poetry_fastapi_demo/routers/user.py</code>的内容如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> APIRouter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.tables <span class=\"keyword\">import</span> user_table</span><br><span class=\"line\"></span><br><span class=\"line\">log = logging.getLogger(__name__)</span><br><span class=\"line\">router = APIRouter()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_all_users</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.get_all_users()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.get(<span class=\"params\"><span class=\"string\">&quot;/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_user</span>(<span class=\"params\">user_id: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.get_user_by_id(user_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.post(<span class=\"params\"><span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_user</span>(<span class=\"params\">user: User</span>):</span><br><span class=\"line\">    log.info(<span class=\"string\">f&quot;Creating user: <span class=\"subst\">&#123;user&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.add_user(user)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.delete(<span class=\"params\"><span class=\"string\">&quot;/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete_user</span>(<span class=\"params\">user_id: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    log.warning(<span class=\"string\">f&quot;Deleting user with id: <span class=\"subst\">&#123;user_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.delete_user(user_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router.put(<span class=\"params\"><span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">update_user</span>(<span class=\"params\">user: User</span>):</span><br><span class=\"line\">    log.warning(<span class=\"string\">f&quot;Updating user: <span class=\"subst\">&#123;user&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_table.update_user(user)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行 main.py（记得设置环境变量），我们可以在控制台中看到日志输出，同时在项目的根目录下也会生成 app.log 日志文件，记录运行的日志。</p>\n<p><img src=\"https://image.robocanic.com/notes/app-log.png\" alt=\"app-log\"></p>\n<p>我们发起一个新增 user 的请求：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --request POST \\</span><br><span class=\"line\">  --url http://localhost:8080/api/v1/user \\</span><br><span class=\"line\">  --header &#x27;content-type: application/json&#x27; \\</span><br><span class=\"line\">  --data &#x27;&#123;</span><br><span class=\"line\">  &quot;id&quot;: 6,</span><br><span class=\"line\">  &quot;name&quot;: &quot;robb&quot;,</span><br><span class=\"line\">  &quot;email&quot;: &quot;robocanic@gmail.com&quot;,</span><br><span class=\"line\"> &quot;password&quot;: &quot;xclkjva&quot;,</span><br><span class=\"line\">  &quot;role&quot;: &quot;user&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到日志显示如下：</p>\n<p><img src=\"https://image.robocanic.com/notes/create-user-log.png\" alt=\"create-user-log\"></p>\n<p>到这，基本的日志需求就满足了，我们无需调整代码，仅通过调整配置文件就能适时调整日志。那对于目标中的第 4 点“我们希望 ERROR 级别的日志能够单独放到一个文件中，每天的日志按照日期做一个切割分块”，相信你可以举一反三</p>\n<h1 id=\"项目测试\"><a href=\"#项目测试\" class=\"headerlink\" title=\"项目测试\"></a>项目测试</h1><blockquote>\n<p>以下代码地址: <a href=\"https://github.com/robocanic/poetry-fastapi-demo.git\">https://github.com/robocanic/poetry-fastapi-demo.git</a></p>\n</blockquote>\n<p>一个项目可靠的项目离不开完备的测试，测试一般分为单元测试和接口测试，单测针对某个函数或者某个模块，测试返回的参数是否符合预期，而接口测试是针对于 HTTP（RPC）接口，测试的是某一块功能的完备性。</p>\n<p>这里我们讨论的仅限于单元测试。在 python 中，单元测试可以使用 unittest 模块和 pytest，uninttest 是 python 自带的测试模块，而 pytest 是一个第三方模块，在兼容 unittest 的基础上，增加了集成测试的功能，方便我们进行批量的单元测试，与 CI 进行结合。因此后文中使用 pytest 来进行讲解。</p>\n<p>pytest 可以自动递归指定路径下的所有文件，只要符合<code>test_</code>或者<code>_test</code>开头的 py 文件都会被识别为测试用例文件。都会在测试计划中执行。</p>\n<h2 id=\"实践-1\"><a href=\"#实践-1\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>在使用 pytest 之前需要使用 pip 或者 poetry 下载，我们可以将 pytest 下载到<code>dev</code>分组的依赖，也就是开发时依赖（如<code>poetry add pytest --group dev</code>），以便生产部署时精简掉开发时依赖。</p>\n<p>项目目录结构如下：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poetry-fastapi-demo/</span><br><span class=\"line\"> │</span><br><span class=\"line\"> ├── poetry_fastapi_demo/   # 程序主包    </span><br><span class=\"line\"> │   ├── models/             # 模型</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">|   ├── routers/             # 路由</span><br><span class=\"line\">|   |   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">|   ├── tables/              # 增删改查</span><br><span class=\"line\">|   |   ├── __init__.py</span><br><span class=\"line\">|   |   ├── user.py</span><br><span class=\"line\">│   ├── __init__.py    </span><br><span class=\"line\">│   └── main.py             # 主程序入口</span><br><span class=\"line\">├── tests/                  # 测试文件</span><br><span class=\"line\">|   ├── test_user_table.py    # 模型</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>poetry_fastapi_demo/tables/user.py</code>内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Optional</span>, <span class=\"type\">List</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"></span><br><span class=\"line\">user_list = [</span><br><span class=\"line\">    User(</span><br><span class=\"line\">        <span class=\"built_in\">id</span>=<span class=\"number\">1</span>,</span><br><span class=\"line\">        name=<span class=\"string\">&quot;Chris&quot;</span>,</span><br><span class=\"line\">        email=<span class=\"string\">&quot;chris@gmail.com&quot;</span>,</span><br><span class=\"line\">        password=<span class=\"string\">&quot;pso3sd5xv&quot;</span>,</span><br><span class=\"line\">        role=<span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    User(</span><br><span class=\"line\">        <span class=\"built_in\">id</span>=<span class=\"number\">2</span>,</span><br><span class=\"line\">        name=<span class=\"string\">&quot;Jon&quot;</span>,</span><br><span class=\"line\">        email=<span class=\"string\">&quot;jon@gmail.com&quot;</span>,</span><br><span class=\"line\">        password=<span class=\"string\">&quot;rthdfwe5sdf&quot;</span>,</span><br><span class=\"line\">        role=<span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    User(</span><br><span class=\"line\">        <span class=\"built_in\">id</span>=<span class=\"number\">3</span>,</span><br><span class=\"line\">        name=<span class=\"string\">&quot;Arya&quot;</span>,</span><br><span class=\"line\">        email=<span class=\"string\">&quot;arya@gmail.com&quot;</span>,</span><br><span class=\"line\">        password=<span class=\"string\">&quot;ndddrwe42&quot;</span>,</span><br><span class=\"line\">        role=<span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserTable</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_all_users</span>(<span class=\"params\">self</span>) -&gt; <span class=\"type\">List</span>[User]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user_list</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_user_by_id</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">Optional</span>[User]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> user_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> user.<span class=\"built_in\">id</span> == user_id:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> user</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update_user</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> u <span class=\"keyword\">in</span> user_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> u.<span class=\"built_in\">id</span> == user.<span class=\"built_in\">id</span>:</span><br><span class=\"line\">                u.name = user.name</span><br><span class=\"line\">                u.email = user.email</span><br><span class=\"line\">                u.password = user.password</span><br><span class=\"line\">                u.role = user.role</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">delete_user</span>(<span class=\"params\">self, user_id: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, u <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(user_list):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> u.<span class=\"built_in\">id</span> == user_id:</span><br><span class=\"line\">                <span class=\"keyword\">del</span> user_list[i]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_user</span>(<span class=\"params\">self, user: User</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> u <span class=\"keyword\">in</span> user_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> u.<span class=\"built_in\">id</span> == user.<span class=\"built_in\">id</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        user_list.append(user)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">user_table = UserTable()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>测试案例<code>test_user_table.py</code>内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> poetry_fastapi_demo.tables <span class=\"keyword\">import</span> user_table</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestUserTable</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_get_all</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        user_table.get_all_users()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_get_by_id</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        user = user_table.get_user_by_id(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user.name == <span class=\"string\">&quot;Chris&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_update_user</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        user = user_table.get_user_by_id(<span class=\"number\">1</span>)</span><br><span class=\"line\">        user.name = <span class=\"string\">&quot;Chris2&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.update_user(user) <span class=\"keyword\">is</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.get_user_by_id(<span class=\"number\">1</span>).name == <span class=\"string\">&quot;Chris&quot;</span>   <span class=\"comment\"># 故意写错</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_user</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.delete_user(<span class=\"number\">1</span>) <span class=\"keyword\">is</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.get_user_by_id(<span class=\"number\">1</span>) <span class=\"keyword\">is</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_add_user</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        result = user_table.add_user(User(</span><br><span class=\"line\">            <span class=\"built_in\">id</span>=<span class=\"number\">4</span>,</span><br><span class=\"line\">            name=<span class=\"string\">&quot;robb&quot;</span>,</span><br><span class=\"line\">            email=<span class=\"string\">&quot;robb@gmail.com&quot;</span>,</span><br><span class=\"line\">            password=<span class=\"string\">&quot;loqjwnd[as;&quot;</span>,</span><br><span class=\"line\">            role=<span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">        ))</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> result <span class=\"keyword\">is</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> user_table.get_user_by_id(<span class=\"number\">4</span>).name == <span class=\"string\">&quot;robb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后我们在项目根目录执行<code>pytest tests/ -v</code>，输出如下：</p>\n<p><img src=\"https://image.robocanic.com/notes/py-test.png\" alt=\"py-test\"></p>\n<p>pytest 会递归地在 tests 文件夹下寻找以<code>test_</code>或<code>_test</code>开头的 py 文件，在 py 文件中，会寻找以<code>test_</code>或<code>_test</code>开头的函数或者类，对于我们这个案例来说，一共有 5 个测试用例，在输出中我们也能详细地查看到通过和失败的具体用例，错误的原因，执行的时间等等。此外，pytest 还有其他的功能（可参考<a href=\"https://learning-pytest.readthedocs.io/zh/latest/index.html\">https://learning-pytest.readthedocs.io/zh/latest/index.html</a>），如测试前和测试后的预处理和后处理，使用插件生成测试报告等，这里就算抛砖引玉给大家。</p>\n<h2 id=\"CI-集成\"><a href=\"#CI-集成\" class=\"headerlink\" title=\"CI 集成\"></a>CI 集成</h2><p>按照开发流程来说，我们在本地开发并单测完后，会发布到测试环境中进行进一步地调试验证。有时候我们修改完代码后忘记执行对应的单测就提交了，然后在调试中才发现了错误，然后又回炉重造。为了尽量减少修改小错误反复发布的时间，我们可以将自动化测试集成到 gitlab pipeline（使用参考<a href=\"https://docs.gitlab.com/ee/ci/pipelines/\">https://docs.gitlab.com/ee/ci/pipelines/</a>）或 github actions(使用参考<a href=\"https://docs.github.com/zh/actions\">https://docs.github.com/zh/actions</a>)。</p>\n<h4 id=\"github-actions\"><a href=\"#github-actions\" class=\"headerlink\" title=\"github actions\"></a>github actions</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Python</span> <span class=\"string\">ci</span>           <span class=\"comment\"># workflow名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span>                            <span class=\"comment\"># 触发条件，push或merge到dev中触发</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">&quot;dev&quot;</span> ]</span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">&quot;dev&quot;</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span>    <span class=\"comment\"># 跑在ubuntu虚拟机上</span></span><br><span class=\"line\">    <span class=\"attr\">strategy:</span>                 <span class=\"comment\"># 执行策略</span></span><br><span class=\"line\">      <span class=\"attr\">fail-fast:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">matrix:</span></span><br><span class=\"line\">        <span class=\"attr\">python-version:</span> [<span class=\"string\">&quot;3.10&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span>                    <span class=\"comment\"># 执行步骤</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span>    <span class=\"comment\"># 使用checkout这个已有的action来初始化git环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Python</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.python-version</span> <span class=\"string\">&#125;&#125;</span>   <span class=\"comment\"># 使用setup-python来初始化python环境</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v3</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">python-version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.python-version</span> <span class=\"string\">&#125;&#125;</span>     <span class=\"comment\"># 指定python版本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Poetry</span>                 <span class=\"comment\"># 使用setup-poetry这个已有的action来初始化poetry</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">Gr1N/setup-poetry@v9</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span>         <span class=\"comment\"># 使用poetry下载依赖，因为是在一个单独的虚拟机/容器中，所以无需创建虚拟环境</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        poetry config virtualenvs.create false</span></span><br><span class=\"line\"><span class=\"string\">        poetry lock</span></span><br><span class=\"line\"><span class=\"string\">        poetry install --all-extras</span></span><br><span class=\"line\"><span class=\"string\"></span>    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Test</span> <span class=\"string\">with</span> <span class=\"string\">pytest</span>            <span class=\"comment\"># 使用pytest执行集成测试</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"attr\">LOG_CONFIG:</span> <span class=\"string\">./log.yaml</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">pytest</span> <span class=\"string\">tests/</span> <span class=\"string\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p>我们把上面这个 yml 命名为 ci.yml，并放置在项目根目录.github&#x2F;workflows 目录下，然后 github 会自动检测到 workflow 的存在并按照 yml 中定义的步骤依次执行。然后我们在 dev 分支 push 到远程，然后我们会在 actions 中发现历史执行&#x2F;正在执行的 workflow。</p>\n<p><img src=\"https://image.robocanic.com/notes/github-action.png\" alt=\"github-action\"></p>\n<p>我们点进某一个 workflow 可以看到 job 的执行结果是成功还是失败：</p>\n<p><img src=\"https://image.robocanic.com/notes/github-workflow-job.png\" alt=\"github-workflow-job\"></p>\n<p>进一步，我们进入 build 这个 job，我们可以看到集成测试的信息：</p>\n<p><img src=\"https://image.robocanic.com/notes/job-test.png\" alt=\"job-test\"></p>\n<p>此外，github actions 还可以探索更多的玩法，比如：当 job 失败了发送邮件到自己的邮箱提示流水线失败了，当 job 失败了回滚到上一个 commit 的状态等等，这些就都留给你去探索了</p>\n<h4 id=\"gitlab-pipeline\"><a href=\"#gitlab-pipeline\" class=\"headerlink\" title=\"gitlab pipeline\"></a>gitlab pipeline</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">automatic_test_dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">automatic_test_job_dev:</span>   <span class=\"comment\"># 我们只在测试环境执行自动化测试，生产环境为了加快发布速度，不执行测试</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">sunpeek/poetry:py3.10-slim</span>    <span class=\"comment\"># 使用带poetry的python镜像</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">automatic_test_dev</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dev</span>                 <span class=\"comment\"># 只有dev分支发生变化（merge或push）时触发</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span>                   <span class=\"comment\"># 匹配python标签的runner才运行</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">python</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span>                 <span class=\"comment\"># 执行脚本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">virtualenvs.create</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 在容器中，不用创建虚拟环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">lock</span>     <span class=\"comment\"># 锁定依赖版本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">install</span>  <span class=\"comment\"># 下载依赖</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">pytest</span> <span class=\"string\">tests/</span>   <span class=\"comment\"># 执行测试</span></span><br></pre></td></tr></table></figure>\n\n<p>我们将这个 yml 文件命名为.gitlab-ci.yml，然后 push 到 dev 分支，就会触发 pipeline。gitlab pipeline 本质上和 github actions 是一样的，都是声明式的流水线，因此这里就不再赘述，你可以查阅官方文档（<a href=\"https://docs.gitlab.com/ee/ci/pipelines/\">https://docs.gitlab.com/ee/ci/pipelines/</a>）来组合出你的 pipeline。</p>\n<h1 id=\"项目发布管理\"><a href=\"#项目发布管理\" class=\"headerlink\" title=\"项目发布管理\"></a>项目发布管理</h1><p>当我们项目在本地运行 ok，测试也 ok 后，该考虑发布到各个环境（联调，测试，生产等）。这个过程根据项目的属性分为两类，一类是二方包的发布，另一类则是正经应用发布。</p>\n<p>在谈这两类发布之前，我们先来确认发布过程中我们想要达到的目标（要求）：</p>\n<ol>\n<li><p>对于二方包发布，我们希望它在本地就能够发布 beta 版本，以便于快速验证。此外，正式版本的发布，我们希望能够集成到 CI 中。</p>\n</li>\n<li><p>对于应用发布，我们希望它发布时足够迅速，以便在出现问题时快速推送补丁解决问题。</p>\n</li>\n<li><p>无论是二方包还是应用发布，我们希望在发布的时候自动执行集成测试（生产除外），生成一份测试报告。</p>\n</li>\n</ol>\n<h2 id=\"二方包发布\"><a href=\"#二方包发布\" class=\"headerlink\" title=\"二方包发布\"></a>二方包发布</h2><p>二方包的发布根据我们使用的项目环境和依赖管理工具可以划分为两类，第一类是使用 conda+pip 或者 venv+pip 后的发布流程，另一类是使用 poetry 后的发布流程。</p>\n<h3 id=\"setuptools-twine\"><a href=\"#setuptools-twine\" class=\"headerlink\" title=\"setuptools+twine\"></a>setuptools+twine</h3><p>发布分为打包和推送两个步骤，setuptools 负责将我们的 python 代码打包，而 twine 则负责将打包后的 pkg 推送到 PyPI 仓库。</p>\n<p>setuptools 是很多年来 python 打包的首选工具，我们首先需要执行<code>pip install setuptools</code>来下载这个工具。然后在项目根目录下新建一个<code>setup.py</code>文件来写打包时的配置，一个 setup.py 如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup, find_packages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;README.md&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;UTF-8&quot;</span>) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">    long_description = fh.read()</span><br><span class=\"line\">version= os.environ.get(<span class=\"string\">&quot;GITHUB_REF_NAME&quot;</span>, <span class=\"string\">&quot;0.0.1b0&quot;</span>) <span class=\"comment\"># 包的版本，GITHUB_REF_NAME是github tag name的环境变量，代表代码分支TAG；0.0.1b0 是0.0.1-BETA0的缩写</span></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;poetry_fastapi_demo&#x27;</span>,  <span class=\"comment\"># 包名</span></span><br><span class=\"line\">    version=version,     <span class=\"comment\"># 构建版本</span></span><br><span class=\"line\">    author=<span class=\"string\">&#x27;robocanic&#x27;</span>,  <span class=\"comment\"># 作者</span></span><br><span class=\"line\">    author_email=<span class=\"string\">&#x27;robocanic@gmail.com&#x27;</span>,</span><br><span class=\"line\">    description=<span class=\"string\">&#x27;A web project template using poetry and fastapi.&#x27;</span>,   <span class=\"comment\"># 描述</span></span><br><span class=\"line\">    long_description=long_description,  <span class=\"comment\"># 长的描述</span></span><br><span class=\"line\">    long_description_content_type=<span class=\"string\">&quot;text/markdown&quot;</span>,</span><br><span class=\"line\">    url=<span class=\"string\">&#x27;https://github.com/robocanic/poetry-fastapi-demo&#x27;</span>,</span><br><span class=\"line\">    packages=find_packages(),  <span class=\"comment\"># 打包所有包目录</span></span><br><span class=\"line\">    classifiers=[</span><br><span class=\"line\">        <span class=\"string\">&quot;Development Status :: 2 - Beta&quot;</span>    <span class=\"comment\"># 开发阶段</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.10&quot;</span>,   <span class=\"comment\"># 使用的语言</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Operating System:: OS Independent&quot;</span>,   <span class=\"comment\"># 不限定OS</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    install_requires=[     <span class=\"comment\"># 该项目的依赖，别人下载我们的包时会自动下载这些依赖</span></span><br><span class=\"line\">        <span class=\"string\">&quot;fastapi==0.115.0&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;sqlalchemy==2.0.36&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;pyyaml==6.0.2&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;uvicorn=0.32.0&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    python_requires=<span class=\"string\">&#x27;&gt;=3.10&#x27;</span>    <span class=\"comment\"># python要求</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>setup.py</code>使用代码的方式声明了我们打包的配置，包括构建版本，直接依赖，python 版本要求等等。接下来我们只需要执行<code>python setup.py sdist</code>就能将项目打包成.tar.gz 文件，当然我们也可以指定打包格式为<code>bdist_wheel</code>，打包成.wheel 文件。打包后的文件默认放在 dist 目录下。</p>\n<p>接下来我们需要使用 twine 上传到 PyPI 仓库，twine 也是一个 python 包，在使用之前需要通过<code>pip install twine</code>下载。然后执行<code>twine upload dist/*</code>就上传到了仓库。</p>\n<blockquote>\n<p>如果要上传到私有的 PyPI 仓库，则需要配置上传的用户名和密码，同时在上传时需要指定私有仓库。最便捷的方法是在 root 目录下新增一个.pypirc 文件，文件内容为：</p>\n</blockquote>\n<pre><code>[distutils]\n\n\nindex-servers = private-pypi\n\n[nexus]\n</code></pre>\n<p>repository&#x3D;<a href=\"https://private-pypi.com/simple/\">https://private-pypi.com/simple/</a><br>username&#x3D;foo<br>password&#x3D;bar<br>然后使用<code>twine upload -r private-pypi dist/*</code> 来上传到指定的私有仓库</p>\n<h3 id=\"poetry\"><a href=\"#poetry\" class=\"headerlink\" title=\"poetry\"></a>poetry</h3><p>如果你使用了 poetry，那 poetry 就自带了打包和上传的功能。poetry 打包非常简单，只需要执行<code>poetry build</code>，它就会参照<code>pyproject.toml</code>中的配置进行打包。打包生成的文件默认也会放在 dist 目录下。</p>\n<p>然后我们执行<code>poetry publish</code>就可以发布到 PyPI 仓库</p>\n<blockquote>\n<p>同样，若要使用 poetry 上传到私有的 PyPI 仓库。也需要额外的配置：<br><code>poetry config repositories.foo-pub [https://pypi.example.org/legacy/](https://pypi.example.org/legacy/)</code> &gt; <code>poetry config http-basic.foo-pub &lt;username&gt; &lt;password&gt;</code> &gt; <code>poetry publish --repository foo-pub</code></p>\n</blockquote>\n<h3 id=\"CI-集成-1\"><a href=\"#CI-集成-1\" class=\"headerlink\" title=\"CI 集成\"></a>CI 集成</h3><p>很多时候我们发现了特定版本包的一些问题，我们想要这个特定版本的包对应的源代码，并在此基础上加一个补丁。因此我们需要将我们包的版本和我们代码的特定分支一一对应。通过人工完成这个过程是可行的，我们只需要在每次打包前&#x2F;后 加一个 commit，推到远程仓库，打一个 tag 就能对应起来。但是这件重复的工作我们时常会忘记，这个重复的工作可以交给一个单独的程序来做吗？答案当然是肯定的，毕竟程序员最习惯的事就是将重复的工作程序化，复杂的工作流程化。gitlab pipeline&#x2F;github actions 能够通过我们声明的 yml 文件来完成这个过程。</p>\n<h4 id=\"gitlab-pipeline-1\"><a href=\"#gitlab-pipeline-1\" class=\"headerlink\" title=\"gitlab pipeline\"></a>gitlab pipeline</h4><p>一个使用 poetry 的二方包发布的 gitlab pipeline 文件可以如下（集成了单测）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">sunpeek/poetry:py3.10-slim</span>   <span class=\"comment\"># 需要带有poetry的python镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">automatic_test</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">package_build_push</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">automatic_test_job:</span>   <span class=\"comment\">#</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">automatic_test</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">golang</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">virtualenvs.create</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 在容器中，不用创建虚拟环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">lock</span>     <span class=\"comment\"># 锁定依赖版本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">install</span>  <span class=\"comment\"># 下载依赖</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">pytest</span> <span class=\"string\">tests/</span>   <span class=\"comment\"># 执行测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">package_build_push_job:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">package_build_push</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span>    <span class=\"comment\"># 触发条件：只有打tag之后才会触发该job</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">repositories.foo-pub</span> <span class=\"string\">https://pypi.example.org/legacy/</span>   <span class=\"comment\"># 添加发布仓库</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">http-basic.foo-pub</span> <span class=\"string\">$FOO_USERNAME</span> <span class=\"string\">$FOO_PASSWORD</span>          <span class=\"comment\"># 添加发布仓库的用户名密码，通过流水线环境变量可以设置</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">sed</span> <span class=\"string\">-i</span> <span class=\"string\">&quot;s/^version = \\&quot;.*\\&quot;/version = \\&quot;$CI_COMMIT_TAG\\&quot;/&quot;</span> <span class=\"string\">pyproject.toml</span>  <span class=\"comment\"># 修改构建版本，与TAG一致</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">publish</span> <span class=\"string\">--build</span>  <span class=\"string\">--repository</span> <span class=\"string\">foo-pub</span>   <span class=\"comment\"># 打包并推送</span></span><br></pre></td></tr></table></figure>\n\n<p>简单来说，gitlab 在我们打上一个 tag 之后，会起一个 runner 执行这个 yml 文件的 script（具体过程可自行了解）。因此当我们想要发布一个版本时，推到镜像仓库后，打一个 tag，gitlab pipeline 就会进行打包，推送，并且推送到仓库的包的版本和我们的 TAG 是严格对应的。</p>\n<h4 id=\"github-actions-1\"><a href=\"#github-actions-1\" class=\"headerlink\" title=\"github actions\"></a>github actions</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Release</span> <span class=\"string\">package</span>           <span class=\"comment\"># workflow名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span>                            <span class=\"comment\"># 触发条件，新建tag时触发</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;*&#x27;</span>                  <span class=\"comment\"># 任意标签都会触发工作流</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pkg:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span>    <span class=\"comment\"># 使用checkout这个已有的action来初始化git环境</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Python</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.python-version</span> <span class=\"string\">&#125;&#125;</span>   <span class=\"comment\"># 使用setup-python来初始化python环境</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.python-version</span> <span class=\"string\">&#125;&#125;</span>     <span class=\"comment\"># 指定python版本</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Poetry</span>                 <span class=\"comment\"># 使用setup-poetry这个已有的action来初始化poetry</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">Gr1N/setup-poetry@v9</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Extract</span> <span class=\"string\">version</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">extract_version</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          VERSION=&quot;$&#123;GITHUB_REF#refs/tags/&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;VERSION=$&#123;VERSION&#125;&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Replace</span> <span class=\"string\">version</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          sed -i &quot;s/^version = \\&quot;.*\\&quot;/version = \\&quot;$&#123;&#123; env.VERSION &#125;&#125;\\&quot;/&quot; pyproject.toml</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">Package</span>        <span class=\"comment\"># 打包</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          poetry config virtualenvs.create false</span></span><br><span class=\"line\"><span class=\"string\">          poetry build</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span>    <span class=\"comment\"># 发布</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">PYPI_API_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.PYPI_API_TOKEN</span> <span class=\"string\">&#125;&#125;</span>    <span class=\"comment\"># 提前定义pypi的 api token</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          poetry config pypi-token.pypi $PYPI_API_TOKEN</span></span><br><span class=\"line\"><span class=\"string\">          poetry publish</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>poetry 作为集环境管理，依赖管理，打包发布一体的工具，虽然有上手难度，但从长期来看是值得使用的，强烈推荐。gitlab pipeline&#x2F;github actions 的使用倒是可以看自身需求，如果项目比较小，发布次数少，不要求代码分支与包的版本严格对应，是可以不用的。此外，我们在使用 gitlab pipeline 时也可以适当没那么“严格”，比如，为了图方便我们可以在本地发布非正式版本，而正式版本则走 pipeline，保证正式版本的稳定。</p>\n<h2 id=\"应用发布\"><a href=\"#应用发布\" class=\"headerlink\" title=\"应用发布\"></a>应用发布</h2><p>应用发布即让我们的应用运行在机器上，对外提供服务。应用的运行形态可以基本分为容器&#x2F;虚拟机，后文中都基于使用更广泛的容器来进行说明。</p>\n<p>应用发布大体上分为两个阶段，一个是镜像的打包与推送，另一个是镜像拉取和启动容器。其中，镜像推送，镜像拉取和启动容器对于每一种应用程序都是大差不差的，而镜像打包则是差异比较大的，所以这里我就镜像打包展开来讲。</p>\n<h3 id=\"镜像打包\"><a href=\"#镜像打包\" class=\"headerlink\" title=\"镜像打包\"></a>镜像打包</h3><p>镜像的大小关乎到推送和拉取的效率，因此我们要尽可能地减小镜像大小。python 的基础镜像中，<code>slim</code>版本的基础镜像移除了不必要的系统个工具和库，因此基础镜像我们选择<code>slim</code>版本（127MB 左右）。</p>\n<p>此外，我们如果使用了 poetry 来作为依赖管理的工具，那在打包时就有两种选择：第一种是直接将 poetry 打到基础镜像中，第二种是使用 multi-stage build，即在第一个阶段先下载 poetry，导出依赖到 requirements.txt，然后在第二个阶段使用 pip install 来下载依赖。multi-stage build 虽然最终的镜像里不包含 poetry，但是第一个阶段下载 poetry 和导出依赖都需要时间，而第一种方法中直接将 poetry 打到基础镜像中，镜像大小也只增加了不到 100MB，在可以接受的范围内，因此我更推荐第一种。</p>\n<p>确定好镜像策略后，我们来看看 Dockerfile 长啥样（基础镜像的打包就是在 python 基础镜像的上面使用 pip 下载 poetry 即可，不再赘述）：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 包含poetry的python基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sunpeek/poetry:py3.<span class=\"number\">10</span>-slim</span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"language-bash\"> maintainer=<span class=\"string\">&quot;robocanic@gmail.com&quot;</span></span></span><br><span class=\"line\"><span class=\"comment\"># Keeps Python from generating .pyc files in the container</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PYTHONDONTWRITEBYTECODE=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># Turns off buffering for easier container logging</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PYTHONUNBUFFERED=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mv source code to a specific directory</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /appruntime</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . /appruntime</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># no need to create virtual env</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> poetry config virtualenvs.create <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"comment\"># analyze deps</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> poetry lock</span></span><br><span class=\"line\"><span class=\"comment\"># Install deps</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> poetry install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creates a non-root user with an explicit UID and adds permission to access the /appruntime folder</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> adduser -u 5678 --disabled-password --gecos <span class=\"string\">&quot;&quot;</span> appuser &amp;&amp; <span class=\"built_in\">chown</span> -R appuser /appruntime</span></span><br><span class=\"line\"><span class=\"keyword\">USER</span> appuser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;uvicorn&quot;</span>, <span class=\"string\">&quot;poetry_fastapi_demo.main:app&quot;</span>, <span class=\"string\">&quot;--host=0.0.0.0&quot;</span>, <span class=\"string\">&quot;--port=8080&quot;</span>, <span class=\"string\">&quot;--log-config=/appruntime/log.yaml&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CI-集成-2\"><a href=\"#CI-集成-2\" class=\"headerlink\" title=\"CI 集成\"></a>CI 集成</h3><p>如果使用了 gitlab pipeline&#x2F;github actions，那我们可以将镜像打包，镜像推送都结合到 CI 中</p>\n<h4 id=\"gitlab-pipeline-2\"><a href=\"#gitlab-pipeline-2\" class=\"headerlink\" title=\"gitlab pipeline\"></a>gitlab pipeline</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">variables:</span>    <span class=\"comment\"># 变量</span></span><br><span class=\"line\">  <span class=\"attr\">IMAGE_NAME:</span> <span class=\"string\">$CI_PROJECT_PATH</span></span><br><span class=\"line\">  <span class=\"attr\">PROJECT_NAME:</span> <span class=\"string\">$CI_PROJECT_NAME</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">automatic_test_dev</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">package_build_push_dev</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy_dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">automatic_test_job_dev:</span>   <span class=\"comment\"># 我们只在联调/测试时执行自动化测试，生产环境为了加快发布速度，不执行测试</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">sunpeek/poetry:py3.10-slim</span>    <span class=\"comment\"># 使用带poetry的python镜像</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">automatic_test_dev</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">python</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">config</span> <span class=\"string\">virtualenvs.create</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 在容器中，不用创建虚拟环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">lock</span>     <span class=\"comment\"># 锁定依赖版本</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">poetry</span> <span class=\"string\">install</span>  <span class=\"comment\"># 下载依赖</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">pytest</span> <span class=\"string\">tests/</span>   <span class=\"comment\"># 执行测试</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">package_build_push_job_dev:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker:27.3</span>  <span class=\"comment\"># 使用docker镜像</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">package_build_push_dev</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">python</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">BUILDTIME</span>   <span class=\"comment\"># 缓存构建时间文件供下一个job使用</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">date</span> <span class=\"string\">+&#x27;%Y%m%d%H%M&#x27;</span> <span class=\"string\">&gt;</span> <span class=\"string\">BUILDTIME</span>  <span class=\"comment\"># 将构建时间写到文件</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">export</span> <span class=\"string\">IMAGE_TAG=dev-$(cat</span> <span class=\"string\">BUILDTIME)-$CI_COMMIT_SHORT_SHA</span> <span class=\"comment\"># 镜像tag  dev-[年月日时分]-[commit id前八位]</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">export</span> <span class=\"string\">IMAGE_NAME=$(echo</span> <span class=\"string\">$IMAGE_NAME</span> <span class=\"string\">|</span> <span class=\"string\">tr</span> <span class=\"string\">&#x27;A-Z&#x27;</span> <span class=\"string\">&#x27;a-z&#x27;</span><span class=\"string\">)</span>  <span class=\"comment\"># 把gitlab的目录和项目名小写作为镜像名</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">login</span> <span class=\"string\">-u</span> <span class=\"string\">$REGISTRY_USERNAME</span> <span class=\"string\">-p</span> <span class=\"string\">$REGISTRY_PASSWORD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">build</span>  <span class=\"string\">-t</span> <span class=\"string\">$IMAGE_NAME:$IMAGE_TAG</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">push</span> <span class=\"string\">$IMAGE_NAME:$IMAGE_TAG</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"github-actions-2\"><a href=\"#github-actions-2\" class=\"headerlink\" title=\"github actions\"></a>github actions</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Release</span> <span class=\"string\">deploy</span>           <span class=\"comment\"># workflow名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span>                            <span class=\"comment\"># 触发条件，新建tag时触发</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;*&#x27;</span>                   <span class=\"comment\"># 任意标签都会触发工作流</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pkg:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">QEMU</span>       <span class=\"comment\"># 初始化qemu</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/setup-qemu-action@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Docker</span> <span class=\"string\">Buildx</span>   <span class=\"comment\"># 初始化buildx</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/setup-buildx-action@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Login</span> <span class=\"string\">to</span> <span class=\"string\">Docker</span> <span class=\"string\">Hub</span>   <span class=\"comment\"># 登录dockerhub</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/login-action@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DOCKERHUB_USERNAME</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DOCKERHUB_PASSWORD</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Extract</span> <span class=\"string\">version</span>   <span class=\"comment\"># 提取tag</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">extract_version</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          VERSION=&quot;$&#123;GITHUB_REF#refs/tags/&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;VERSION=$&#123;VERSION&#125;&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">and</span> <span class=\"string\">push</span>   <span class=\"comment\"># 构建镜像并推送</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">docker/build-push-action@v6</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">push:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">tags:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.repository</span> <span class=\"string\">&#125;&#125;:$&#123;&#123;</span> <span class=\"string\">env.VERSION</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>如果你使用 docker compose&#x2F;docker swarm&#x2F;k8s 等基础设施，你还可以结合 docker&#x2F;kubectl 或者 docker api&#x2F;k8s api 来进行 CD，从而实现应用从发布到部署完全流水线化。</p>\n<p>应用的发布在不同的团队，不同的公司是有着不同的流程和偏好的，以上只是我提供的一种实现参考，但是无论是什么发布流程，考虑的重点其实是大差不差的：</p>\n<ol>\n<li><p>镜像大小要尽可能压缩</p>\n</li>\n<li><p>发布要做到可回滚，可灰度</p>\n</li>\n<li><p>发布流程中的信息要可追溯</p>\n</li>\n<li><p>发布中用到的组件复用度要高</p>\n</li>\n<li><p>……</p>\n</li>\n</ol>\n<p>按照这些个思路去编排发布流水线，相信你能得到一个理想中的流水线。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm50ntui200033gwbfmg56z1g","category_id":"cm50ntui700043gwb7ob77f2d","_id":"cm50ntuia00073gwbbcmq3b3x"},{"post_id":"cm521ppgw00000kwbdm7l44jx","category_id":"cm521pph100010kwbf4ln3vnm","_id":"cm521pph400040kwb2tn6eqob"}],"PostTag":[{"post_id":"cm50ntui200033gwbfmg56z1g","tag_id":"cm50ntui800053gwb1v5zbfir","_id":"cm50ntuia00063gwbhwne6ukh"},{"post_id":"cm521ppgw00000kwbdm7l44jx","tag_id":"cm55fa7l60000pcwb5ugv0x8s","_id":"cm55fa7l80001pcwbg9dbdcae"}],"Tag":[{"name":"云原生","_id":"cm50ntui800053gwb1v5zbfir"},{"name":"Python","_id":"cm521pph300020kwbf1ru7lx7"},{"name":"Python, 日常开发","_id":"cm55fa7l60000pcwb5ugv0x8s"}]}}